(ring_unit_def
 (l_r_inv_equal 0
  (l_r_inv_equal-1 nil 3799599862
   ("" (skeep)
    (("" (expand "exists1")
      (("" (split)
        (("1" (typepred "x")
          (("1" (expand "unit?")
            (("1" (flatten)
              (("1" (expand "l_invertible?")
                (("1" (expand "r_invertible?")
                  (("1" (skeep*)
                    (("1" (case "y = y!1")
                      (("1" (inst 1 "y") (("1" (assert) nil nil)) nil)
                       ("2" (hide 2)
                        (("2" (typepred "R")
                          (("2" (expand "ring_with_one?")
                            (("2" (expand "ring?")
                              (("2"
                                (expand "monoid?")
                                (("2"
                                  (expand "monad?")
                                  (("2"
                                    (expand "identity?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide-all-but
                                         (-8 -9 -11 -12 1))
                                        (("2"
                                          (inst-cp -1 "y")
                                          (("2"
                                            (expand "restrict")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (hide -3)
                                                (("2"
                                                  (inst -1 "y!1")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (replace
                                                         -5
                                                         -2
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "associative?")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (replace
                                                               -3
                                                               -2
                                                               rl)
                                                              (("2"
                                                                (hide
                                                                 -3)
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "unique?")
          (("2" (skosimp)
            (("2" (typepred "R")
              (("2" (expand "ring_with_one?")
                (("2" (expand "monoid?")
                  (("2" (expand "monad?")
                    (("2" (flatten)
                      (("2" (expand "identity?")
                        (("2" (inst-cp -4 "y!1")
                          (("2" (inst -4 "x!1")
                            (("2" (expand "restrict")
                              (("2"
                                (flatten)
                                (("2"
                                  (hide-all-but
                                   (-3 -4 -8 -7 -10 -11 1))
                                  (("2"
                                    (replace -6 -2 rl)
                                    (("2"
                                      (expand "associative?")
                                      (("2"
                                        (inst -4 "x!1" "x" "y!1")
                                        (("2"
                                          (replace -4 -2 rl)
                                          (("2"
                                            (replace -5 -2)
                                            (("2"
                                              (replace -3 -2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((exists1 const-decl "bool" exists1 nil)
    (unique? const-decl "bool" exists1 nil)
    (unit? const-decl "bool" ring_unit_def nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (one formal-const-decl "T" ring_unit_def nil)
    (zero formal-const-decl "T" ring_unit_def nil)
    (* formal-const-decl "[T, T -> T]" ring_unit_def nil)
    (+ formal-const-decl "[T, T -> T]" ring_unit_def nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_unit_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (r_invertible? const-decl "bool" ring_unit_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ring? const-decl "bool" ring_def algebra)
    (monad? const-decl "bool" monad_def algebra)
    (associative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def algebra)
    (TRUE const-decl "bool" booleans nil)
    (l_invertible? const-decl "bool" ring_unit_def nil))
   nil)))

