(boolean_ring_homomorphisms
 (S_TCC1 0
  (S_TCC1-1 nil 3794228854 ("" (rewrite "fullset_is_ring_U") nil nil)
   ((fullset_is_ring_U formula-decl nil boolean_ring_homomorphisms
     nil))
   nil
   (S assuming
    "algebra@ring[boolean_ring_homomorphisms.U, boolean_ring_homomorphisms.s, boolean_ring_homomorphisms.p, boolean_ring_homomorphisms.zeroU].ring"
    "fullset_is_ring: ASSUMPTION ring_def[ring.T, ring.+, ring.*, ring.zero].ring?(sets[ring.T].fullset)")))
 (img_hom_bool_ring 0
  (img_hom_bool_ring-1 nil 3794228904
   ("" (skosimp)
    (("" (expand "boolean_ring?")
      (("" (split)
        (("1" (lemma "image_homo_is_subring [T,+,*,zero, U,s,p,zeroU]")
          (("1" (inst -1 "R!1" "S!1" "phi!1")
            (("1" (expand "subring?") (("1" (assert) nil nil)) nil)
             ("2" (typepred "R!1")
              (("2" (expand "boolean_ring?") (("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("2" (lemma fullset_is_ring_U) (("2" (propax) nil nil)) nil)
           ("3" (lemma fullset_is_ring_T) (("3" (propax) nil nil))
            nil))
          nil)
         ("2" (skosimp)
          (("2" (typepred "phi!1")
            (("2" (expand "R_homomorphism?")
              (("2" (flatten)
                (("2" (expand "homomorphism?")
                  (("2" (typepred "x!1")
                    (("2" (expand "extend")
                      (("2" (expand "restrict")
                        (("2" (expand "image")
                          (("2" (hide-all-but (-1 -7 1))
                            (("2" (case "S!1(x!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "image")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (inst -3 "x!2" "x!2")
                                      (("1"
                                        (typepred "x!2")
                                        (("1"
                                          (typepred "R!1")
                                          (("1"
                                            (expand "boolean_ring?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst -2 "x!2")
                                                (("1"
                                                  (replaces -2 -6)
                                                  (("1"
                                                    (replace -4 -5 rl)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (prop) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean_ring? const-decl "bool" boolean_ring_def nil)
    (homomorphism? const-decl "bool" homomorphisms_def nil)
    (image const-decl "set[R]" function_image nil)
    (TRUE const-decl "bool" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (image const-decl "set[R]" function_image nil)
    (restrict const-decl "R" restrict nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zeroU formal-const-decl "U" boolean_ring_homomorphisms nil)
    (p formal-const-decl "[U, U -> U]" boolean_ring_homomorphisms nil)
    (s formal-const-decl "[U, U -> U]" boolean_ring_homomorphisms nil)
    (U formal-nonempty-type-decl nil boolean_ring_homomorphisms nil)
    (zero formal-const-decl "T" boolean_ring_homomorphisms nil)
    (* formal-const-decl "[T, T -> T]" boolean_ring_homomorphisms nil)
    (+ formal-const-decl "[T, T -> T]" boolean_ring_homomorphisms nil)
    (T formal-nonempty-type-decl nil boolean_ring_homomorphisms nil)
    (image_homo_is_subring formula-decl nil ring_homomorphism_lemmas
     nil)
    (fullset const-decl "set" sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subring? const-decl "bool" ring_def algebra)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (boolean_ring type-eq-decl nil boolean_ring_def nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (fullset_is_ring_U formula-decl nil boolean_ring_homomorphisms nil)
    (fullset_is_ring_T formula-decl nil boolean_ring_homomorphisms
     nil))
   shostak)))
(boolean_ring_w_one_homomorphisms
 (bool_ring_int_domain_set 0
  (bool_ring_int_domain_set-1 nil 3794680724
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (prop)
          (("1" (typepred "R!1")
            (("1" (expand "boolean_ring?")
              (("1" (flatten)
                (("1" (inst -2 "x!1")
                  (("1" (lemma "cancel_right_minus[T,+,*,zero]")
                    (("1" (inst -1 "x!1 * x!1" "x!1" "x!1")
                      (("1" (lemma "negate_is_right_inv[T,+,*,zero]")
                        (("1" (inst -1 "x!1")
                          (("1" (replaces -1 -2)
                            (("1" (lemma "one_times[T,+,*,zero,one]")
                              (("1"
                                (inst -1 "inv[T, +, zero](x!1)")
                                (("1"
                                  (replace -1 -2 rl)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma
                                       "times_negative[T,+,*,zero]")
                                      (("1"
                                        (inst -1 "one" "x!1")
                                        (("1"
                                          (lemma
                                           "negative_times[T,+,*,zero]")
                                          (("1"
                                            (inst -1 "one" "x!1")
                                            (("1"
                                              (replace -1 -2 rl)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (replaces -1 -2)
                                                  (("1"
                                                    (lemma
                                                     "left_distributive[T,+,*,zero]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "x!1"
                                                       "inv[T,+,zero](one)"
                                                       "x!1")
                                                      (("1"
                                                        (replace
                                                         -1
                                                         -2
                                                         rl)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "integral_domain_w_one?")
                                                              (("1"
                                                                (expand
                                                                 "integral_domain?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "nzd_R_cancel_left[T,+,*,zero]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "R!1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "(x!1 + inv[T, +, zero](one))"
                                                                           "x!1"
                                                                           "zero")
                                                                          (("1"
                                                                            (lemma
                                                                             "times_zero[T,+,*,zero]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "(x!1 + inv[T, +, zero](one))")
                                                                              (("1"
                                                                                (replaces
                                                                                 -1
                                                                                 -2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "plus_associative[T, +, *, zero]")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "negate_is_left_inv[T,+,*,zero]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "one")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "zero_plus[T,+,*,zero]")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "one")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -4
                                                                                                 -1
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -3
                                                                                                   "x!1"
                                                                                                   "inv[T, +, zero](one)"
                                                                                                   "one")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -1
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -1
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "plus_zero[T,+,*,zero]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x!1")
                                                                                                          (("1"
                                                                                                            (replaces
                                                                                                             -1
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       fullset_is_ring_w_one_T)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "ring_with_one?")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "ring?")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "abelian_group?")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   fullset_is_ring_w_one_T)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "ring_with_one?")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ring?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "abelian_group?")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "zero_is_member_R[T,+,*,zero]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide-all-but
                                                                             (-2
                                                                              -4
                                                                              1))
                                                                            (("3"
                                                                              (lemma
                                                                               "R_sum_star_closed[T,+,*,zero]")
                                                                              (("3"
                                                                                (inst
                                                                                 -1
                                                                                 "R!1"
                                                                                 "x!1"
                                                                                 "inv[T, +, zero](one)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "inv_is_member_R[T,+,*,zero]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "R!1"
                                                                                       "one")
                                                                                      (("1"
                                                                                        (reveal
                                                                                         -7)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "monad?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "member")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "remove")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "member")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     fullset_is_ring_w_one_T)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "ring_with_one?")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "ring?")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "abelian_group?")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (lemma
                                                                             fullset_is_ring_w_one_T)
                                                                            (("4"
                                                                              (hide-all-but
                                                                               1)
                                                                              (("4"
                                                                                (lemma
                                                                                 fullset_is_ring_w_one_T)
                                                                                (("4"
                                                                                  (expand
                                                                                   "ring_with_one?")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "ring?")
                                                                                    (("4"
                                                                                      (expand
                                                                                       "abelian_group?")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (lemma
                                                           fullset_is_ring_w_one_T)
                                                          (("2"
                                                            (expand
                                                             "ring_with_one?")
                                                            (("2"
                                                              (expand
                                                               "ring?")
                                                              (("2"
                                                                (expand
                                                                 "abelian_group?")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (lemma fullset_is_ring_w_one_T)
                                    (("2"
                                      (expand "ring_with_one?")
                                      (("2"
                                        (expand "ring?")
                                        (("2"
                                          (expand "abelian_group?")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (lemma fullset_is_ring_w_one_T)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but 1)
                      (("2" (lemma fullset_is_ring_w_one_T)
                        (("2" (expand "ring_with_one?")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (replaces -1 1)
            (("2" (lemma "zero_is_member_R[T,+,*,zero]")
              (("1" (inst -1 "R!1")
                (("1" (expand "member") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (lemma fullset_is_ring_w_one_T)
                (("2" (expand "ring_with_one?")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (replaces -1 1)
            (("3" (expand "integral_domain_w_one?")
              (("3" (expand "monad?")
                (("3" (expand "member")
                  (("3" (expand "remove")
                    (("3" (expand "member") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ formal-const-decl "[T, T -> T]" boolean_ring_w_one_homomorphisms
       nil)
    (* formal-const-decl "[T, T -> T]" boolean_ring_w_one_homomorphisms
       nil)
    (zero formal-const-decl "T" boolean_ring_w_one_homomorphisms nil)
    (boolean_ring? const-decl "bool" boolean_ring_def nil)
    (boolean_ring type-eq-decl nil boolean_ring_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (one formal-const-decl "T" boolean_ring_w_one_homomorphisms nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil boolean_ring_w_one_homomorphisms
     nil)
    (R!1 skolem-const-decl "boolean_ring[T, +, *, zero]"
     boolean_ring_w_one_homomorphisms nil)
    (x!1 skolem-const-decl "T" boolean_ring_w_one_homomorphisms nil)
    (one_times formula-decl nil ring_with_one algebra)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (times_negative formula-decl nil ring algebra)
    (negative_times formula-decl nil ring algebra)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (plus_associative formula-decl nil ring algebra)
    (plus_zero formula-decl nil ring algebra)
    (fullset_is_ring_w_one_T formula-decl nil
     boolean_ring_w_one_homomorphisms nil)
    (abelian_group? const-decl "bool" group_def algebra)
    (zero_plus formula-decl nil ring algebra)
    (negate_is_left_inv formula-decl nil ring algebra)
    (times_zero formula-decl nil ring algebra)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (monad? const-decl "bool" monad_def algebra)
    (remove const-decl "set" sets nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (nzd_R_cancel_left formula-decl nil ring_nz_closed_aux nil)
    (integral_domain? const-decl "bool" integral_domain_def algebra)
    (left_distributive formula-decl nil ring algebra)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group algebra)
    (group? const-decl "bool" group_def algebra)
    (TRUE const-decl "bool" booleans nil)
    (negate_is_right_inv formula-decl nil ring algebra)
    (ring? const-decl "bool" ring_def algebra)
    (fullset const-decl "set" sets nil)
    (cancel_right_minus formula-decl nil ring algebra)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (bool_ring_int_domain_is_Z2_TCC1 0
  (bool_ring_int_domain_is_Z2_TCC1-1 nil 3794736166
   ("" (skosimp)
    (("" (inst 1 "+(0,nZ(2))")
      (("" (rewrite "lcoset_iff_coset" :dir rl)
        (("" (expand "left_coset?")
          (("" (inst 1 "0")
            (("" (expand "Z")
              (("" (expand "fullset") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (coset type-eq-decl nil cosets_def nil)
    (+ const-decl "set[T]" cosets_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (fullset const-decl "set" sets nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil))
   nil
   (bool_ring_int_domain_is_Z2 existence ""
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(2))")))
 (bool_ring_int_domain_is_Z2_TCC2 0
  (bool_ring_int_domain_is_Z2_TCC2-1 nil 3794736166
   ("" (skosimp*)
    (("" (lemma "coset_add")
      (("" (inst -1 "Z" "nZ(2)" "x1!1`1" "x1!1`2")
        (("1" (assert) nil nil)
         ("2" (hide 2) (("2" (rewrite "nZ_ideal") nil nil)) nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (coset_add formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil))
   nil
   (bool_ring_int_domain_is_Z2 subtype
    "product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].add(ring_zn.Z, ring_zn.nZ(2))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(2)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(2))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(2))]")))
 (bool_ring_int_domain_is_Z2_TCC3 0
  (bool_ring_int_domain_is_Z2_TCC3-1 nil 3794736166
   ("" (skosimp*)
    (("" (lemma "coset_product")
      (("" (inst -1 "Z" "nZ(2)" "x1!1`1" "x1!1`2")
        (("1" (assert) nil nil)
         ("2" (hide 2) (("2" (rewrite "nZ_ideal") nil nil)) nil))
        nil))
      nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (coset_product formula-decl nil quotient_rings nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (coset type-eq-decl nil cosets_def nil)
    (coset? const-decl "bool" cosets_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil))
   nil
   (bool_ring_int_domain_is_Z2 subtype
    "product_coset_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*)].product(ring_zn.Z, ring_zn.nZ(2))"
    "[[cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(2)), cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(2))] -> cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(2))]")))
 (bool_ring_int_domain_is_Z2_TCC4 0
  (bool_ring_int_domain_is_Z2_TCC4-1 nil 3794736166
   ("" (skosimp)
    (("" (rewrite "ideal_is_coset")
      (("" (hide 2) (("" (rewrite "nZ_ideal") nil nil)) nil)) nil))
    nil)
   ((ideal_is_coset formula-decl nil ring_cosets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nZ_ideal formula-decl nil ring_zn nil))
   nil
   (bool_ring_int_domain_is_Z2 subtype "ring_zn.nZ(2)"
    "cosets_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+)].coset(ring_zn.Z, ring_zn.nZ(2))")))
 (bool_ring_int_domain_is_Z2 0
  (bool_ring_int_domain_is_Z2-2 nil 3797765814
   (""
    (stop-rewrite "right_identity" "left_identity" "one_left"
     "one_right" "zero_plus" "plus_zero")
    (("" (skosimp)
      (("" (expand "R_isomorphic?")
        ((""
          (inst 1
           "(LAMBDA (i : (R!1)) : IF i = zero THEN nZ(2) ELSE +[int,+](1,nZ(2)) ENDIF)")
          (("1" (expand "R_isomorphism?")
            (("1" (expand "R_monomorphism?")
              (("1" (expand "R_epimorphism?")
                (("1"
                  (case "R_homomorphism?[T,+,*,zero,coset(Z,nZ(2)),add(Z,nZ(2)),product(Z,nZ(2)),nZ(2)](R!1,
                                                   restrict
                                                       [setof[int],
                                                        coset
                                                            [int,
                                                             restrict
                                                                 [[numfield, numfield],
                                                                  [int, int],
                                                                  numfield]
                                                                 (+)](Z, nZ(2)),
                                                        boolean]
                                                       (Z(2)))
                                                  ((LAMBDA (i: (R!1)):
                                                      IF i = zero THEN nZ(2)
                                                      ELSE (+
                                                                [int,
                                                                 restrict
                                                                 [[numfield, numfield],
                                                                  [int, int],
                                                                  numfield]
                                                                 (+)])
                                                               (1, nZ(2))
                                                      ENDIF))")
                  (("1" (assert)
                    (("1" (split)
                      (("1" (expand "injective?")
                        (("1" (skosimp)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but -1)
                                    (("2"
                                      (lemma equal_cosets_div)
                                      (("2"
                                        (inst -1 "0" "1" "2")
                                        (("2"
                                          (rewrite "left_zero")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (lemma divides_lt)
                                                (("2"
                                                  (inst -1 "1" "2")
                                                  (("2"
                                                    (case "1 /= 0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "/=")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 1))
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (hide-all-but -2)
                                      (("1"
                                        (lemma equal_cosets_div)
                                        (("1"
                                          (inst -1 "0" "1" "2")
                                          (("1"
                                            (rewrite left_zero)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (expand "divides")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal (-2 1))
                                      (("2"
                                        (lemma
                                         bool_ring_int_domain_set)
                                        (("2"
                                          (inst -1 "R!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (decompose-equality)
                                              (("2"
                                                (copy -1)
                                                (("2"
                                                  (inst -1 "x1!1")
                                                  (("2"
                                                    (inst -2 "x2!1")
                                                    (("2"
                                                      (iff)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "surjective?")
                        (("2" (skosimp)
                          (("2"
                            (case "y!1 = +(1, nZ(2)) or y!1 = +(0, nZ(2))")
                            (("1" (hide -2)
                              (("1"
                                (split)
                                (("1"
                                  (inst 1 "one")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand
                                         "integral_domain_w_one?")
                                        (("1"
                                          (expand "monad?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide-all-but (-1 -5))
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (expand "remove")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "integral_domain_w_one?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (expand "remove")
                                            (("2"
                                              (expand "member")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replaces -1 1)
                                  (("2"
                                    (inst 1 "zero")
                                    (("1" (rewrite left_zero) nil nil)
                                     ("2"
                                      (expand "integral_domain_w_one?")
                                      (("2"
                                        (expand "integral_domain?")
                                        (("2"
                                          (expand "commutative_ring?")
                                          (("2"
                                            (expand "ring?")
                                            (("2"
                                              (expand "abelian_group?")
                                              (("2"
                                                (expand "group?")
                                                (("2"
                                                  (expand "monoid?")
                                                  (("2"
                                                    (expand "monad?")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (-1 2))
                              (("2"
                                (lemma Z2_charac)
                                (("2"
                                  (decompose-equality)
                                  (("2"
                                    (inst -1 "y!1")
                                    (("2"
                                      (iff)
                                      (("2"
                                        (typepred "y!1")
                                        (("2"
                                          (expand "restrict")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "R_homomorphism?")
                      (("2" (split)
                        (("1" (expand "star_closed?")
                          (("1" (skosimp)
                            (("1" (expand "member")
                              (("1"
                                (lemma "R_sum_star_closed[T,+,*,zero]")
                                (("1"
                                  (inst -1 "R!1" "x!1" "y!1")
                                  (("1"
                                    (typepred "x!1" "y!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma fullset_is_ring_w_one_T)
                                  (("2"
                                    (expand "ring_with_one?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "R_prod_star_closed[T,+,*,zero]")
                          (("1" (expand "star_closed?")
                            (("1" (skosimp)
                              (("1"
                                (inst -1 "R!1" "x!1" "y!1")
                                (("1"
                                  (typepred "x!1" "y!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma fullset_is_ring_w_one_T)
                            (("2" (expand "ring_with_one?")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (expand "star_closed?")
                          (("3" (skosimp)
                            (("3" (expand "member")
                              (("3"
                                (expand "restrict")
                                (("3"
                                  (expand "Z")
                                  (("3"
                                    (expand "/")
                                    (("3"
                                      (lemma coset_add)
                                      (("3"
                                        (inst
                                         -1
                                         "Z"
                                         "nZ(2)"
                                         "x!1"
                                         "y!1")
                                        (("1"
                                          (expand "Z")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (rewrite nZ_ideal :dir rl)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (expand "star_closed?")
                          (("4" (skosimp)
                            (("4" (expand "member")
                              (("4"
                                (expand "restrict")
                                (("4"
                                  (expand "Z")
                                  (("4"
                                    (expand "/")
                                    (("4"
                                      (lemma coset_product)
                                      (("4"
                                        (inst
                                         -1
                                         "Z"
                                         "nZ(2)"
                                         "x!1"
                                         "y!1")
                                        (("1"
                                          (expand "Z")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (rewrite nZ_ideal :dir rl)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (expand "homomorphism?")
                          (("5" (skosimp)
                            (("5" (lift-if)
                              (("5"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (lemma left_zero)
                                          (("1"
                                            (inst -1 "nZ(2)")
                                            (("1"
                                              (replace -1 1 rl)
                                              (("1"
                                                (lemma add_charac)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "Z"
                                                   "nZ(2)"
                                                   "0"
                                                   "0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     nZ_ideal
                                                     :dir
                                                     rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -1 -2)
                                          (("2"
                                            (lemma
                                             "zero_plus[T,+,*,zero]")
                                            (("1"
                                              (inst -1 "b!1")
                                              (("1"
                                                (replaces -1 -2)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               fullset_is_ring_w_one_T)
                                              (("2"
                                                (expand
                                                 "ring_with_one?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (replaces -1 -2)
                                          (("1"
                                            (lemma
                                             "plus_zero[T,+,*,zero]")
                                            (("1"
                                              (inst -1 "a!1")
                                              (("1"
                                                (replaces -1 -2)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               fullset_is_ring_w_one_T)
                                              (("2"
                                                (expand
                                                 "ring_with_one?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma add_charac)
                                          (("2"
                                            (inst
                                             -1
                                             "Z"
                                             "nZ(2)"
                                             "1"
                                             "1")
                                            (("1"
                                              (replaces -1 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   equal_cosets_div)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "0"
                                                     "2"
                                                     "2")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (expand
                                                           "divides")
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (lemma
                                                               left_zero)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "nZ(2)")
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   -2)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               1
                                                               "1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "Z")
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite
                                               nZ_ideal
                                               :dir
                                               rl)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (replaces -1 2)
                                          (("1"
                                            (replaces -1 2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma add_charac)
                                          (("2"
                                            (inst
                                             -1
                                             "Z"
                                             "nZ(2)"
                                             "0"
                                             "1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma left_zero)
                                                (("1"
                                                  (inst -1 "nZ(2)")
                                                  (("1"
                                                    (replaces -1 -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "Z")
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "Z")
                                              (("3"
                                                (expand "fullset")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (rewrite
                                               nZ_ideal
                                               :dir
                                               rl)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (lemma add_charac)
                                          (("1"
                                            (inst
                                             -1
                                             "Z"
                                             "nZ(2)"
                                             "1"
                                             "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma left_zero)
                                                (("1"
                                                  (inst -1 "nZ(2)")
                                                  (("1"
                                                    (replaces -1 -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "Z")
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "Z")
                                              (("3"
                                                (expand "fullset")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (rewrite
                                               nZ_ideal
                                               :dir
                                               rl)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           bool_ring_int_domain_set)
                                          (("2"
                                            (inst -1 "R!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (decompose-equality)
                                                (("2"
                                                  (inst-cp -1 "a!1")
                                                  (("2"
                                                    (inst -1 "b!1")
                                                    (("2"
                                                      (iff)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replaces
                                                           -1
                                                           4)
                                                          (("2"
                                                            (replaces
                                                             -1
                                                             4)
                                                            (("2"
                                                              (lemma
                                                               bool_ring_int_domain_set)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "R!1")
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (decompose-equality)
                                                                    (("2"
                                                                      (expand
                                                                       "integral_domain_w_one?")
                                                                      (("2"
                                                                        (expand
                                                                         "integral_domain?")
                                                                        (("2"
                                                                          (expand
                                                                           "commutative_ring?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               (-3
                                                                                1
                                                                                2
                                                                                3))
                                                                              (("2"
                                                                                (lemma
                                                                                 "inv_is_member_R[T,+,*,zero]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "R!1"
                                                                                   "one")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "monad?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "inv[T,+,zero](one)")
                                                                                        (("1"
                                                                                          (iff)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "negate_is_right_inv[T,+,*,zero]")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "one")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "plus_zero[T,+,*,zero]")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "one")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           fullset_is_ring_w_one_T)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ring_with_one?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "ring?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "abelian_group?")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   fullset_is_ring_w_one_T)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "ring_with_one?")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (expand "homomorphism?")
                          (("6" (skosimp)
                            (("6" (lift-if)
                              (("6"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (lemma left_zero)
                                          (("1"
                                            (inst -1 "nZ(2)")
                                            (("1"
                                              (replace -1 1 rl)
                                              (("1"
                                                (lemma product_charac)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "Z"
                                                   "nZ(2)"
                                                   "0"
                                                   "0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     nZ_ideal
                                                     :dir
                                                     rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma left_zero)
                                          (("2"
                                            (inst -1 "nZ(2)")
                                            (("2"
                                              (replace -1 2 rl)
                                              (("2"
                                                (lemma product_charac)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "Z"
                                                   "nZ(2)"
                                                   "0"
                                                   "1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "Z")
                                                    (("3"
                                                      (expand
                                                       "fullset")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (rewrite
                                                     nZ_ideal
                                                     :dir
                                                     rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (lemma left_zero)
                                          (("1"
                                            (inst -1 "nZ(2)")
                                            (("1"
                                              (replace -1 1 rl)
                                              (("1"
                                                (lemma product_charac)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "Z"
                                                   "nZ(2)"
                                                   "1"
                                                   "0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "Z")
                                                    (("3"
                                                      (expand
                                                       "fullset")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (rewrite
                                                     nZ_ideal
                                                     :dir
                                                     rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "a!1" "b!1")
                                          (("2"
                                            (expand
                                             "integral_domain_w_one?")
                                            (("2"
                                              (expand
                                               "integral_domain?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   "nz_times_is_zero[T,+,*,zero]")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "R!1"
                                                     "a!1"
                                                     "b!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     fullset_is_ring_w_one_T)
                                                    (("2"
                                                      (expand
                                                       "ring_with_one?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (replaces -1 2)
                                          (("1"
                                            (lemma
                                             "zero_times[T,+,*,zero]")
                                            (("1"
                                              (inst -1 "a!1")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               fullset_is_ring_w_one_T)
                                              (("2"
                                                (expand
                                                 "ring_with_one?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -1 3)
                                          (("2"
                                            (lemma
                                             "zero_times[T,+,*,zero]")
                                            (("1"
                                              (inst -1 "b!1")
                                              nil
                                              nil)
                                             ("2"
                                              (lemma
                                               fullset_is_ring_w_one_T)
                                              (("2"
                                                (expand
                                                 "ring_with_one?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (replaces -1 3)
                                          (("1"
                                            (lemma
                                             "times_zero[T,+,*,zero]")
                                            (("1"
                                              (inst -1 "a!1")
                                              nil
                                              nil)
                                             ("2"
                                              (lemma
                                               fullset_is_ring_w_one_T)
                                              (("2"
                                                (expand
                                                 "ring_with_one?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma product_charac)
                                          (("2"
                                            (inst
                                             -1
                                             "Z"
                                             "nZ(2)"
                                             "1"
                                             "1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "Z")
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite
                                               nZ_ideal
                                               :dir
                                               rl)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (rewrite lcoset_iff_coset :dir rl)
                      (("3" (expand "left_coset?")
                        (("3" (inst 1 "0")
                          (("1" (lemma "left_zero")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (expand "Z")
                            (("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (skosimp)
                      (("4" (lemma "coset_product")
                        (("4" (inst -1 "Z" "nZ(2)" "x1!1`1" "x1!1`2")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (rewrite "nZ_ideal") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (skosimp)
                      (("5" (lemma coset_product)
                        (("5" (inst -1 "Z" "nZ(2)" "x1!1`1" "x1!1`2")
                          (("1" (assert)
                            (("1" (lemma "coset_add")
                              (("1"
                                (hide -2 -3)
                                (("1"
                                  (inst
                                   -1
                                   "Z"
                                   "nZ(2)"
                                   "x1!1`1"
                                   "x1!1`2")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (rewrite "nZ_ideal")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite nZ_ideal :dir rl) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (hide 2)
                    (("6" (skosimp)
                      (("6" (expand "restrict")
                        (("6" (expand "Z")
                          (("6" (expand "/")
                            (("6"
                              (case "coset?[int, restrict[[numfield, numfield], [int, int], numfield](+)]
          (fullset[int], nZ(2))
          (((+[int,
               restrict[[numfield, numfield], [int, int], numfield](+)])
                (1, nZ(2))))")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (rewrite
                                     "lcoset_iff_coset"
                                     :dir
                                     rl)
                                    (("1"
                                      (expand "left_coset?")
                                      (("1"
                                        (inst 2 "1")
                                        (("1"
                                          (expand "Z")
                                          (("1"
                                            (expand "fullset")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 3)
                                (("2"
                                  (rewrite "lcoset_iff_coset" :dir rl)
                                  (("2"
                                    (expand "left_coset?")
                                    (("2"
                                      (inst 1 "1")
                                      (("2"
                                        (expand "fullset")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (hide 2)
                    (("7" (expand "restrict") (("7" (propax) nil nil))
                      nil))
                    nil)
                   ("8" (skosimp)
                    (("8" (hide-all-but (-2 1))
                      (("8" (expand "restrict")
                        (("8" (expand "Z")
                          (("8" (expand "/")
                            (("8"
                              (case " coset?[int, restrict[[numfield, numfield], [int, int], numfield](+)]
          (fullset[int], nZ(2))(nZ(2))")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (rewrite
                                     "lcoset_iff_coset"
                                     :dir
                                     rl)
                                    (("1"
                                      (expand "left_coset?")
                                      (("1"
                                        (inst 1 "0")
                                        (("1"
                                          (rewrite "left_zero")
                                          nil
                                          nil)
                                         ("2"
                                          (expand "Z")
                                          (("2"
                                            (expand "fullset")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (rewrite "lcoset_iff_coset" :dir rl)
                                  (("2"
                                    (expand "left_coset?")
                                    (("2"
                                      (inst 1 "0")
                                      (("1"
                                        (rewrite "left_zero")
                                        nil
                                        nil)
                                       ("2"
                                        (expand "fullset")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("9" (hide 2)
                    (("9" (skosimp)
                      (("9" (expand "restrict")
                        (("9" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (expand "restrict")
              (("2" (expand "Z")
                (("2" (expand "/")
                  (("2"
                    (case "coset?[int, restrict[[numfield, numfield], [int, int], numfield](+)]
                            (fullset[int], nZ(2))
                            ((+[int, restrict[[numfield, numfield], [int, int], numfield](+)])
                                 (1, nZ(2)))")
                    (("1" (hide (-2 1)) (("1" (grind) nil nil)) nil)
                     ("2" (hide-all-but 1)
                      (("2" (rewrite "lcoset_iff_coset" :dir rl)
                        (("2" (expand "left_coset?")
                          (("2" (inst 1 "1")
                            (("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp) (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3" (expand "restrict")
              (("3" (split)
                (("1" (rewrite "lcoset_iff_coset" :dir rl)
                  (("1" (expand "left_coset?")
                    (("1" (inst 1 "0")
                      (("1" (lemma left_zero)
                        (("1" (inst -1 "nZ(2)")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (expand "Z")
                        (("2" (expand "fullset")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "Z")
                  (("2" (expand "/")
                    (("2" (rewrite "lcoset_iff_coset" :dir rl)
                      (("2" (expand "left_coset?")
                        (("2" (inst 1 "0")
                          (("1" (lemma left_zero)
                            (("1" (inst -1 "nZ(2)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "Z")
                            (("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_isomorphic? const-decl "bool" ring_homomorphisms_def nil)
    (right_coset? const-decl "bool" cosets_def nil)
    (R_isomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_epimorphism? const-decl "bool" ring_homomorphisms_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (fullset const-decl "set" sets nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (fullset_is_ring_w_one_T formula-decl nil
     boolean_ring_w_one_homomorphisms nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (/ const-decl "setof[set[T]]" product_coset_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil)
    (nZ_ideal formula-decl nil ring_zn nil)
    (coset_add formula-decl nil quotient_rings nil)
    (coset_product formula-decl nil quotient_rings nil)
    (add_charac formula-decl nil quotient_rings nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (zero_plus formula-decl nil ring algebra)
    (plus_zero formula-decl nil ring algebra)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def algebra)
    (right_distributive? const-decl "bool" operator_defs_more algebra)
    (left_distributive? const-decl "bool" operator_defs_more algebra)
    (commutative? const-decl "bool" operator_defs nil)
    (inv_exists? const-decl "bool" group_def algebra)
    (associative? const-decl "bool" operator_defs nil)
    (identity? const-decl "bool" operator_defs nil)
    (lc_gen const-decl "T" cosets_def nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group algebra)
    (negate_is_right_inv formula-decl nil ring algebra)
    (homomorphism? const-decl "bool" homomorphisms_def nil)
    (product_charac formula-decl nil quotient_rings nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil)
    (zero_times formula-decl nil ring algebra)
    (times_zero formula-decl nil ring algebra)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (surjective? const-decl "bool" functions nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (monad? const-decl "bool" monad_def algebra)
    (integral_domain? const-decl "bool" integral_domain_def algebra)
    (group? const-decl "bool" group_def algebra)
    (monoid? const-decl "bool" monoid_def algebra)
    (abelian_group? const-decl "bool" group_def algebra)
    (commutative_ring? const-decl "bool" ring_def algebra)
    (TRUE const-decl "bool" booleans nil)
    (Z2_charac formula-decl nil ring_zn nil)
    (injective? const-decl "bool" functions nil)
    (divides const-decl "bool" divides nil)
    (bool_ring_int_domain_set formula-decl nil
     boolean_ring_w_one_homomorphisms nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (one formal-const-decl "T" boolean_ring_w_one_homomorphisms nil)
    (inv_one formula-decl nil group algebra)
    (divides_lt formula-decl nil divides_lems ints)
    (abs_nat_rew formula-decl nil abs_rews ints)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil)
    (equal_cosets_div formula-decl nil ring_zn nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (add const-decl "set[T]" product_coset_def nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (R_monomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "set[T]" cosets_def nil)
    (T formal-nonempty-type-decl nil boolean_ring_w_one_homomorphisms
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" boolean_ring_w_one_homomorphisms
       nil)
    (* formal-const-decl "[T, T -> T]" boolean_ring_w_one_homomorphisms
       nil)
    (zero formal-const-decl "T" boolean_ring_w_one_homomorphisms nil)
    (boolean_ring? const-decl "bool" boolean_ring_def nil)
    (boolean_ring type-eq-decl nil boolean_ring_def nil)
    (R!1 skolem-const-decl "boolean_ring[T, +, *, zero]"
     boolean_ring_w_one_homomorphisms nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra)
    (Z const-decl
     "ring[int, restrict[[numfield, numfield], [int, int], numfield](+),
     restrict[[numfield, numfield], [int, int], numfield](*), 0]"
     ring_zn nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nZ const-decl "set[int]" ring_zn nil)
    (setof type-eq-decl nil defined_types nil)
    (coset type-eq-decl nil cosets_def nil)
    (setofsets type-eq-decl nil sets nil)
    (Z const-decl "setofsets[int]" ring_zn nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil)
  (bool_ring_int_domain_is_Z2-1 nil 3794736188
   (""
    (stop-rewrite "right_identity" "left_identity" "one_left"
     "one_right" "zero_plus" "plus_zero")
    (("" (skosimp)
      (("" (expand "R_isomorphic?")
        ((""
          (inst 1
           "(LAMBDA (i : (R!1)) : IF i = zero THEN nZ(2) ELSE +[int,+](1,nZ(2)) ENDIF)")
          (("1" (expand "R_isomorphism?")
            (("1" (expand "R_monomorphism?")
              (("1" (expand "R_epimorphism?")
                (("1"
                  (case "R_homomorphism?[T,+,*,zero,coset(Z,nZ(2)),add(Z,nZ(2)),product(Z,nZ(2)),nZ(2)](R!1,
                                          restrict
                                              [setof[int],
                                               coset
                                                   [int,
                                                    restrict
                                                        [[numfield, numfield],
                                                         [int, int],
                                                         numfield]
                                                        (+)](Z, nZ(2)),
                                               boolean]
                                              (Z(2)))
                                         ((LAMBDA (i: (R!1)):
                                             IF i = zero THEN nZ(2)
                                             ELSE (+
                                                       [int,
                                                        restrict
                                                        [[numfield, numfield],
                                                         [int, int],
                                                         numfield]
                                                        (+)])
                                                      (1, nZ(2))
                                             ENDIF))")
                  (("1" (assert)
                    (("1" (split)
                      (("1" (expand "injective?")
                        (("1" (skosimp)
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (lift-if)
                                (("1"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but -1)
                                    (("2"
                                      (lemma equal_cosets_div)
                                      (("2"
                                        (inst -1 "0" "1" "2")
                                        (("2"
                                          (rewrite "left_zero")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (lemma divides_lt)
                                                (("2"
                                                  (inst -1 "1" "2")
                                                  (("2"
                                                    (case "1 /= 0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (expand "/=")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-1 1))
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (hide-all-but -2)
                                      (("1"
                                        (lemma equal_cosets_div)
                                        (("1"
                                          (inst -1 "0" "1" "2")
                                          (("1"
                                            (rewrite left_zero)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (expand "divides")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal (-2 1))
                                      (("2"
                                        (lemma
                                         bool_ring_int_domain_set)
                                        (("2"
                                          (inst -1 "R!1")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (decompose-equality)
                                              (("2"
                                                (copy -1)
                                                (("2"
                                                  (inst -1 "x1!1")
                                                  (("2"
                                                    (inst -2 "x2!1")
                                                    (("2"
                                                      (iff)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "surjective?")
                        (("2" (skosimp)
                          (("2"
                            (case "y!1 = +(1, nZ(2)) or y!1 = +(0, nZ(2))")
                            (("1" (hide -2)
                              (("1"
                                (split)
                                (("1"
                                  (inst 1 "one")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (expand
                                         "integral_domain_w_one?")
                                        (("1"
                                          (expand "monad?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide-all-but (-1 -5))
                                              (("1"
                                                (expand "member")
                                                (("1"
                                                  (expand "remove")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "integral_domain_w_one?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (expand "remove")
                                            (("2"
                                              (expand "member")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (replaces -1 1)
                                  (("2"
                                    (inst 1 "zero")
                                    (("1" (rewrite left_zero) nil nil)
                                     ("2"
                                      (expand "integral_domain_w_one?")
                                      (("2"
                                        (expand "integral_domain?")
                                        (("2"
                                          (expand "commutative_ring?")
                                          (("2"
                                            (expand "ring?")
                                            (("2"
                                              (expand "abelian_group?")
                                              (("2"
                                                (expand "group?")
                                                (("2"
                                                  (expand "monoid?")
                                                  (("2"
                                                    (expand "monad?")
                                                    (("2"
                                                      (expand "member")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (-1 2))
                              (("2"
                                (lemma z_two_is_zero_one)
                                (("2"
                                  (decompose-equality)
                                  (("2"
                                    (inst -1 "y!1")
                                    (("2"
                                      (iff)
                                      (("2"
                                        (typepred "y!1")
                                        (("2"
                                          (expand "restrict")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "R_homomorphism?")
                      (("2" (split)
                        (("1" (expand "star_closed?")
                          (("1" (skosimp)
                            (("1" (expand "member")
                              (("1"
                                (lemma "R_sum_star_closed[T,+,*,zero]")
                                (("1"
                                  (inst -1 "R!1" "x!1" "y!1")
                                  (("1"
                                    (typepred "x!1" "y!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma fullset_is_ring_w_one_T)
                                  (("2"
                                    (expand "ring_with_one?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "R_prod_star_closed[T,+,*,zero]")
                          (("1" (expand "star_closed?")
                            (("1" (skosimp)
                              (("1"
                                (inst -1 "R!1" "x!1" "y!1")
                                (("1"
                                  (typepred "x!1" "y!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma fullset_is_ring_w_one_T)
                            (("2" (expand "ring_with_one?")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (expand "star_closed?")
                          (("3" (skosimp)
                            (("3" (expand "member")
                              (("3"
                                (expand "restrict")
                                (("3"
                                  (expand "Z")
                                  (("3"
                                    (expand "/")
                                    (("3"
                                      (lemma coset_add)
                                      (("3"
                                        (inst
                                         -1
                                         "Z"
                                         "nZ(2)"
                                         "x!1"
                                         "y!1")
                                        (("1"
                                          (expand "Z")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (rewrite nZ_ideal :dir rl)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (expand "star_closed?")
                          (("4" (skosimp)
                            (("4" (expand "member")
                              (("4"
                                (expand "restrict")
                                (("4"
                                  (expand "Z")
                                  (("4"
                                    (expand "/")
                                    (("4"
                                      (lemma coset_product)
                                      (("4"
                                        (inst
                                         -1
                                         "Z"
                                         "nZ(2)"
                                         "x!1"
                                         "y!1")
                                        (("1"
                                          (expand "Z")
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (rewrite nZ_ideal :dir rl)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (expand "homomorphism?")
                          (("5" (skosimp)
                            (("5" (lift-if)
                              (("5"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (lemma left_zero)
                                          (("1"
                                            (inst -1 "nZ(2)")
                                            (("1"
                                              (replace -1 1 rl)
                                              (("1"
                                                (lemma add_charac)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "Z"
                                                   "nZ(2)"
                                                   "0"
                                                   "0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     nZ_ideal
                                                     :dir
                                                     rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -1 -2)
                                          (("2"
                                            (lemma
                                             "zero_plus[T,+,*,zero]")
                                            (("1"
                                              (inst -1 "b!1")
                                              (("1"
                                                (replaces -1 -2)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               fullset_is_ring_w_one_T)
                                              (("2"
                                                (expand
                                                 "ring_with_one?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (replaces -1 -2)
                                          (("1"
                                            (lemma
                                             "plus_zero[T,+,*,zero]")
                                            (("1"
                                              (inst -1 "a!1")
                                              (("1"
                                                (replaces -1 -2)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               fullset_is_ring_w_one_T)
                                              (("2"
                                                (expand
                                                 "ring_with_one?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma add_charac)
                                          (("2"
                                            (inst
                                             -1
                                             "Z"
                                             "nZ(2)"
                                             "1"
                                             "1")
                                            (("1"
                                              (replaces -1 2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   equal_cosets_div)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "0"
                                                     "2"
                                                     "2")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (expand
                                                           "divides")
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (lemma
                                                               left_zero)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "nZ(2)")
                                                                (("1"
                                                                  (replaces
                                                                   -1
                                                                   -2)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               1
                                                               "1")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "Z")
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite
                                               nZ_ideal
                                               :dir
                                               rl)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (replaces -1 2)
                                          (("1"
                                            (replaces -1 2)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma add_charac)
                                          (("2"
                                            (inst
                                             -1
                                             "Z"
                                             "nZ(2)"
                                             "0"
                                             "1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma left_zero)
                                                (("1"
                                                  (inst -1 "nZ(2)")
                                                  (("1"
                                                    (replaces -1 -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "Z")
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "Z")
                                              (("3"
                                                (expand "fullset")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (rewrite
                                               nZ_ideal
                                               :dir
                                               rl)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (lemma add_charac)
                                          (("1"
                                            (inst
                                             -1
                                             "Z"
                                             "nZ(2)"
                                             "1"
                                             "0")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma left_zero)
                                                (("1"
                                                  (inst -1 "nZ(2)")
                                                  (("1"
                                                    (replaces -1 -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "Z")
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "Z")
                                              (("3"
                                                (expand "fullset")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (rewrite
                                               nZ_ideal
                                               :dir
                                               rl)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           bool_ring_int_domain_set)
                                          (("2"
                                            (inst -1 "R!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (decompose-equality)
                                                (("2"
                                                  (inst-cp -1 "a!1")
                                                  (("2"
                                                    (inst -1 "b!1")
                                                    (("2"
                                                      (iff)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replaces
                                                           -1
                                                           4)
                                                          (("2"
                                                            (replaces
                                                             -1
                                                             4)
                                                            (("2"
                                                              (lemma
                                                               bool_ring_int_domain_set)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "R!1")
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (decompose-equality)
                                                                    (("2"
                                                                      (expand
                                                                       "integral_domain_w_one?")
                                                                      (("2"
                                                                        (expand
                                                                         "integral_domain?")
                                                                        (("2"
                                                                          (expand
                                                                           "commutative_ring?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (hide
                                                                               (-3
                                                                                1
                                                                                2
                                                                                3))
                                                                              (("2"
                                                                                (lemma
                                                                                 "inv_is_member_R[T,+,*,zero]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "R!1"
                                                                                   "one")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "monad?")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "member")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "inv[T,+,zero](one)")
                                                                                        (("1"
                                                                                          (iff)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "negate_is_right_inv[T,+,*,zero]")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "one")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "plus_zero[T,+,*,zero]")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "one")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           fullset_is_ring_w_one_T)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "ring_with_one?")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "ring?")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "abelian_group?")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   fullset_is_ring_w_one_T)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "ring_with_one?")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (expand "homomorphism?")
                          (("6" (skosimp)
                            (("6" (lift-if)
                              (("6"
                                (prop)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (lemma left_zero)
                                          (("1"
                                            (inst -1 "nZ(2)")
                                            (("1"
                                              (replace -1 1 rl)
                                              (("1"
                                                (lemma product_charac)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "Z"
                                                   "nZ(2)"
                                                   "0"
                                                   "0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (rewrite
                                                     nZ_ideal
                                                     :dir
                                                     rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma left_zero)
                                          (("2"
                                            (inst -1 "nZ(2)")
                                            (("2"
                                              (replace -1 2 rl)
                                              (("2"
                                                (lemma product_charac)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "Z"
                                                   "nZ(2)"
                                                   "0"
                                                   "1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "Z")
                                                    (("3"
                                                      (expand
                                                       "fullset")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (rewrite
                                                     nZ_ideal
                                                     :dir
                                                     rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (lemma left_zero)
                                          (("1"
                                            (inst -1 "nZ(2)")
                                            (("1"
                                              (replace -1 1 rl)
                                              (("1"
                                                (lemma product_charac)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "Z"
                                                   "nZ(2)"
                                                   "1"
                                                   "0")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand "Z")
                                                    (("2"
                                                      (expand
                                                       "fullset")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "Z")
                                                    (("3"
                                                      (expand
                                                       "fullset")
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (rewrite
                                                     nZ_ideal
                                                     :dir
                                                     rl)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "a!1" "b!1")
                                          (("2"
                                            (expand
                                             "integral_domain_w_one?")
                                            (("2"
                                              (expand
                                               "integral_domain?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   "nz_times_is_zero[T,+,*,zero]")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "R!1"
                                                     "a!1"
                                                     "b!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     fullset_is_ring_w_one_T)
                                                    (("2"
                                                      (expand
                                                       "ring_with_one?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (replaces -1 2)
                                          (("1"
                                            (lemma
                                             "zero_times[T,+,*,zero]")
                                            (("1"
                                              (inst -1 "a!1")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               fullset_is_ring_w_one_T)
                                              (("2"
                                                (expand
                                                 "ring_with_one?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replaces -1 3)
                                          (("2"
                                            (lemma
                                             "zero_times[T,+,*,zero]")
                                            (("1"
                                              (inst -1 "b!1")
                                              nil
                                              nil)
                                             ("2"
                                              (lemma
                                               fullset_is_ring_w_one_T)
                                              (("2"
                                                (expand
                                                 "ring_with_one?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lift-if)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (replaces -1 3)
                                          (("1"
                                            (lemma
                                             "times_zero[T,+,*,zero]")
                                            (("1"
                                              (inst -1 "a!1")
                                              nil
                                              nil)
                                             ("2"
                                              (lemma
                                               fullset_is_ring_w_one_T)
                                              (("2"
                                                (expand
                                                 "ring_with_one?")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma product_charac)
                                          (("2"
                                            (inst
                                             -1
                                             "Z"
                                             "nZ(2)"
                                             "1"
                                             "1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "Z")
                                              (("2"
                                                (expand "fullset")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (rewrite
                                               nZ_ideal
                                               :dir
                                               rl)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (rewrite lcoset_iff_coset :dir rl)
                      (("3" (expand "left_coset?")
                        (("3" (inst 1 "0")
                          (("1" (lemma "left_zero")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (expand "Z")
                            (("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (skosimp)
                      (("4" (lemma "coset_product")
                        (("4" (inst -1 "Z" "nZ(2)" "x1!1`1" "x1!1`2")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (rewrite "nZ_ideal") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (skosimp)
                      (("5" (lemma coset_product)
                        (("5" (inst -1 "Z" "nZ(2)" "x1!1`1" "x1!1`2")
                          (("1" (assert)
                            (("1" (lemma "coset_add")
                              (("1"
                                (hide -2 -3)
                                (("1"
                                  (inst
                                   -1
                                   "Z"
                                   "nZ(2)"
                                   "x1!1`1"
                                   "x1!1`2")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (rewrite "nZ_ideal")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite nZ_ideal :dir rl) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (hide 2)
                    (("6" (lemma coset_add)
                      (("6" (assert)
                        (("6" (hide -1 -2)
                          (("6" (inst 1 "+(0,nZ(2))")
                            (("6" (rewrite "lcoset_iff_coset" :dir rl)
                              (("6"
                                (expand "left_coset?")
                                (("6"
                                  (inst 1 "0")
                                  (("6"
                                    (expand "Z")
                                    (("6"
                                      (expand "fullset")
                                      (("6" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (hide 2)
                    (("7" (expand "restrict")
                      (("7" (skosimp)
                        (("7" (split)
                          (("1" (rewrite "lcoset_iff_coset" :dir rl)
                            (("1" (expand "left_coset?")
                              (("1"
                                (inst 1 "1")
                                (("1"
                                  (expand "Z")
                                  (("1"
                                    (expand "fullset")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skosimp)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "Z")
                            (("2" (expand "/")
                              (("2"
                                (rewrite "lcoset_iff_coset" :dir rl)
                                (("1"
                                  (expand "left_coset?")
                                  (("1"
                                    (inst 1 "1")
                                    (("1"
                                      (expand "Z")
                                      (("1"
                                        (expand "fullset")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skosimp)
                                  (("2"
                                    (hide-all-but 1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (skosimp)
                    (("8" (skosimp)
                      (("8" (hide (-1 1 3)) (("8" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("9" (hide 2)
                    (("9" (skosimp)
                      (("9" (expand "restrict")
                        (("9" (split)
                          (("1" (rewrite "lcoset_iff_coset" :dir rl)
                            (("1" (expand "left_coset?")
                              (("1"
                                (inst 1 "0")
                                (("1"
                                  (lemma left_zero)
                                  (("1"
                                    (inst -1 "nZ(2)")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "Z")
                                  (("2"
                                    (expand "fullset")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "Z")
                            (("2" (expand "/")
                              (("2"
                                (rewrite "lcoset_iff_coset" :dir rl)
                                (("2"
                                  (expand "left_coset?")
                                  (("2"
                                    (inst 1 "0")
                                    (("1"
                                      (lemma left_zero)
                                      (("1"
                                        (inst -1 "nZ(2)")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "Z")
                                      (("2"
                                        (expand "fullset")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("10" (skosimp)
                    (("10" (hide (-1 2)) (("10" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (expand "restrict")
              (("2" (expand "Z")
                (("2" (expand "/")
                  (("2"
                    (case "coset?[int, restrict[[numfield, numfield], [int, int], numfield](+)]
                   (fullset[int], nZ(2))
                   ((+[int, restrict[[numfield, numfield], [int, int], numfield](+)])
                        (1, nZ(2)))")
                    (("1" (hide (-2 1)) (("1" (grind) nil nil)) nil)
                     ("2" (hide-all-but 1)
                      (("2" (rewrite "lcoset_iff_coset" :dir rl)
                        (("2" (expand "left_coset?")
                          (("2" (inst 1 "1")
                            (("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skosimp) (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skosimp)
            (("3" (expand "restrict")
              (("3" (split)
                (("1" (rewrite "lcoset_iff_coset" :dir rl)
                  (("1" (expand "left_coset?")
                    (("1" (inst 1 "0")
                      (("1" (lemma left_zero)
                        (("1" (inst -1 "nZ(2)")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (expand "Z")
                        (("2" (expand "fullset")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "Z")
                  (("2" (expand "/")
                    (("2" (rewrite "lcoset_iff_coset" :dir rl)
                      (("2" (expand "left_coset?")
                        (("2" (inst 1 "0")
                          (("1" (lemma left_zero)
                            (("1" (inst -1 "nZ(2)")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "Z")
                            (("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_isomorphic? const-decl "bool" ring_homomorphisms_def nil)
    (right_coset? const-decl "bool" cosets_def nil)
    (R_isomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_epimorphism? const-decl "bool" ring_homomorphisms_def nil)
    (left_coset? const-decl "bool" cosets_def nil)
    (lcoset_iff_coset formula-decl nil ring_cosets_lemmas nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (fullset const-decl "set" sets nil)
    (ring_with_one? const-decl "bool" ring_with_one_def algebra)
    (fullset_is_ring_w_one_T formula-decl nil
     boolean_ring_w_one_homomorphisms nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (/ const-decl "setof[set[T]]" product_coset_def nil)
    (ideal? const-decl "bool" ring_ideal_def nil)
    (ideal type-eq-decl nil ring_ideal_def nil) nil
    (coset_add formula-decl nil quotient_rings nil)
    (coset_product formula-decl nil quotient_rings nil)
    (add_charac formula-decl nil quotient_rings nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (zero_plus formula-decl nil ring algebra)
    (plus_zero formula-decl nil ring algebra)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def algebra)
    (right_distributive? const-decl "bool" operator_defs_more algebra)
    (left_distributive? const-decl "bool" operator_defs_more algebra)
    (commutative? const-decl "bool" operator_defs nil)
    (inv_exists? const-decl "bool" group_def algebra)
    (associative? const-decl "bool" operator_defs nil)
    (identity? const-decl "bool" operator_defs nil)
    (lc_gen const-decl "T" cosets_def nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group algebra)
    (negate_is_right_inv formula-decl nil ring algebra)
    (homomorphism? const-decl "bool" homomorphisms_def nil)
    (product_charac formula-decl nil quotient_rings nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nz_times_is_zero formula-decl nil ring_nz_closed_aux nil)
    (zero_times formula-decl nil ring algebra)
    (times_zero formula-decl nil ring algebra)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (surjective? const-decl "bool" functions nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (monad? const-decl "bool" monad_def algebra)
    (integral_domain? const-decl "bool" integral_domain_def algebra)
    (group? const-decl "bool" group_def algebra)
    (monoid? const-decl "bool" monoid_def algebra)
    (abelian_group? const-decl "bool" group_def algebra)
    (commutative_ring? const-decl "bool" ring_def algebra)
    (injective? const-decl "bool" functions nil)
    (bool_ring_int_domain_set formula-decl nil
     boolean_ring_w_one_homomorphisms nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (one formal-const-decl "T" boolean_ring_w_one_homomorphisms nil)
    (inv_one formula-decl nil group algebra)
    (divides_lt formula-decl nil divides_lems ints)
    (abs_nat_rew formula-decl nil abs_rews ints)
    (/= const-decl "boolean" notequal nil)
    (nzint nonempty-type-eq-decl nil integers nil)
    (left_zero formula-decl nil ring_cosets_lemmas nil) nil
    (TRUE const-decl "bool" booleans nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (product const-decl "set[T]" product_coset_def nil)
    (add const-decl "set[T]" product_coset_def nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (R_monomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil boolean_ring_w_one_homomorphisms
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" boolean_ring_w_one_homomorphisms
       nil)
    (* formal-const-decl "[T, T -> T]" boolean_ring_w_one_homomorphisms
       nil)
    (zero formal-const-decl "T" boolean_ring_w_one_homomorphisms nil)
    (boolean_ring? const-decl "bool" boolean_ring_def nil)
    (boolean_ring type-eq-decl nil boolean_ring_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (coset? const-decl "bool" cosets_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ring? const-decl "bool" ring_def algebra)
    (ring nonempty-type-eq-decl nil ring algebra) nil
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil) nil
    (setof type-eq-decl nil defined_types nil)
    (coset type-eq-decl nil cosets_def nil)
    (setofsets type-eq-decl nil sets nil) nil
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak)))

