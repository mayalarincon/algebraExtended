(finite_integral_domain
 (IMP_integral_domain_TCC1 0
  (IMP_integral_domain_TCC1-1 nil 3793817342
   ("" (rewrite "fullset_is_integral_domain") nil nil)
   ((fullset_is_integral_domain formula-decl nil finite_integral_domain
     nil))
   nil))
 (IMP_ring_nz_closed_TCC1 0
  (IMP_ring_nz_closed_TCC1-1 nil 3793817342
   ("" (lemma "fullset_is_integral_domain")
    (("" (expand "integral_domain?")
      (("" (expand "commutative_ring?")
        (("" (expand "ring_nz_closed?") (("" (prop) nil nil)) nil))
        nil))
      nil))
    nil)
   ((integral_domain? const-decl "bool" integral_domain_def "algebra/")
    (ring_nz_closed? const-decl "bool" ring_nz_closed_def "algebra/")
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (fullset_is_integral_domain formula-decl nil finite_integral_domain
     nil))
   nil))
 (IMP_ring_with_one_basic_properties_TCC1 0
  (IMP_ring_with_one_basic_properties_TCC1-1 nil 3793817342
   ("" (lemma "fullset_is_ring_with_one") (("" (propax) nil nil)) nil)
   ((fullset_is_ring_with_one formula-decl nil finite_integral_domain
     nil))
   nil))
 (surj_equiv_inj_fin_sets 0
  (surj_equiv_inj_fin_sets-3 "" 3711291833
   ("" (skosimp)
    (("" (skosimp)
      (("" (lemma "bij_exists[T]")
        (("" (inst -1 "K!1")
          (("" (skosimp)
            ((""
              (lemma
               "bijective_inverse_exists[(K!1),below(card(K!1))]")
              (("" (inst -1 "f!2")
                (("" (expand "exists1")
                  (("" (flatten)
                    (("" (skosimp)
                      ((""
                        (lemma
                         "bij_inv_is_bij_alt[(K!1), below(card(K!1))]")
                        (("" (inst -1 "f!2" "x!1")
                          (("" (hide -3)
                            (("" (prop)
                              (("1"
                                (lemma
                                 "composition_injective[below(card(K!1)), (K!1), (K!1)]")
                                (("1"
                                  (inst -1 "x!1" "f!1")
                                  (("1"
                                    (lemma
                                     "composition_injective[below(card(K!1)), (K!1), below(card(K!1))]")
                                    (("1"
                                      (inst -1 "f!1 o x!1" "f!2")
                                      (("1"
                                        (lemma "surj_equiv_inj")
                                        (("1"
                                          (inst
                                           -1
                                           "card(K!1)"
                                           "f!2 o (f!1 o x!1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2 -3 -4)
                                              (("1"
                                                (lemma
                                                 "composition_surjective[(K!1), below(card(K!1)), below(card(K!1))]")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "f!2"
                                                   "f!2 o (f!1 o x!1)")
                                                  (("1"
                                                    (lemma
                                                     "composition_surjective[(K!1), below(card(K!1)), (K!1)]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f!2 o (f!1 o x!1) o f!2"
                                                       "x!1")
                                                      (("1"
                                                        (case
                                                         "f!1 = x!1 o (f!2 o (f!1 o x!1) o f!2)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3
                                                           2)
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (expand
                                                               "o")
                                                              (("2"
                                                                (lemma
                                                                 "comp_inverse_left_alt[(K!1), below(card(K!1))]")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!2"
                                                                   "f!2"
                                                                   "x!1")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "comp_inverse_left_alt[(K!1), below(card(K!1))]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "f!1(x!2)"
                                                                         "f!2"
                                                                         "x!1")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-3 1))
                                                        (("2"
                                                          (expand
                                                           "bijective?")
                                                          (("2"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-4 1))
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-5 1))
                                        (("2"
                                          (expand "bijective?")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-2 1))
                                    (("2"
                                      (expand "bijective?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "composition_surjective[below(card(K!1)), (K!1), (K!1)]")
                                (("2"
                                  (inst -1 "x!1" "f!1")
                                  (("1"
                                    (lemma
                                     "composition_surjective[below(card(K!1)), (K!1), below(card(K!1))]")
                                    (("1"
                                      (inst -1 "f!1 o x!1" "f!2")
                                      (("1"
                                        (lemma "surj_equiv_inj")
                                        (("1"
                                          (inst
                                           -1
                                           "card(K!1)"
                                           "f!2 o (f!1 o x!1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2 -3 -4)
                                              (("1"
                                                (lemma
                                                 "composition_injective[(K!1), below(card(K!1)), below(card(K!1))]")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "f!2"
                                                   "f!2 o (f!1 o x!1)")
                                                  (("1"
                                                    (lemma
                                                     "composition_injective[(K!1), below(card(K!1)), (K!1)]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f!2 o (f!1 o x!1) o f!2"
                                                       "x!1")
                                                      (("1"
                                                        (case
                                                         "f!1 = x!1 o (f!2 o (f!1 o x!1) o f!2)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3
                                                           2)
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (expand
                                                               "o")
                                                              (("2"
                                                                (lemma
                                                                 "comp_inverse_left_alt[(K!1), below(card(K!1))]")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!2"
                                                                   "f!2"
                                                                   "x!1")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "comp_inverse_left_alt[(K!1), below(card(K!1))]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "f!1(x!2)"
                                                                         "f!2"
                                                                         "x!1")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-3 1))
                                                        (("2"
                                                          (expand
                                                           "bijective?")
                                                          (("2"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-4 1))
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-5 1))
                                        (("2"
                                          (expand "bijective?")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-2 1))
                                    (("2"
                                      (expand "bijective?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((K!1 skolem-const-decl "set[T]" finite_integral_domain nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bijective_inverse_exists formula-decl nil function_inverse_def
     nil)
    (exists1 const-decl "bool" exists1 nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (x!1 skolem-const-decl "[below(card(K!1)) -> (K!1)]"
     finite_integral_domain nil)
    (injective? const-decl "bool" functions nil)
    (f!1 skolem-const-decl "[(K!1) -> (K!1)]" finite_integral_domain
     nil)
    (O const-decl "T3" function_props nil)
    (surjective? const-decl "bool" functions nil)
    (comp_inverse_left_alt formula-decl nil function_inverse_def nil)
    (composition_surjective judgement-tcc nil function_props nil)
    (surj_equiv_inj formula-decl nil nat_fun_props nil)
    (composition_injective judgement-tcc nil function_props nil)
    (bij_inv_is_bij_alt formula-decl nil function_inverse_def nil)
    (bijective? const-decl "bool" functions nil)
    (f!2 skolem-const-decl "[(K!1) -> below(card(K!1))]"
     finite_integral_domain nil)
    (bij_exists formula-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil))
   nil)
  (surj_equiv_inj_fin_sets-2 "" 3700408255
   ("" (skosimp)
    (("" (skosimp)
      (("" (lemma "bij_exists[T]")
        (("" (inst -1 "K!1")
          (("" (skosimp)
            ((""
              (lemma
               "bijective_inverse_exists[(K!1),below(card(K!1))]")
              (("" (inst -1 "f!2")
                (("" (expand "exists1")
                  (("" (flatten)
                    (("" (skosimp)
                      ((""
                        (lemma
                         "bij_inv_is_bij_alt[(K!1), below(card(K!1))]")
                        (("" (inst -1 "f!2" "x!1")
                          (("" (hide -3)
                            (("" (prop)
                              (("1"
                                (lemma
                                 "composition_injective[below(card(K!1)), (K!1), (K!1)]")
                                (("1"
                                  (inst -1 "x!1" "f!1")
                                  (("1"
                                    (lemma
                                     "composition_injective[below(card(K!1)), (K!1), below(card(K!1))]")
                                    (("1"
                                      (inst -1 "f!1 o x!1" "f!2")
                                      (("1"
                                        (lemma "surj_equiv_inj")
                                        (("1"
                                          (inst
                                           -1
                                           "card(K!1)"
                                           "f!2 o (f!1 o x!1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2 -3 -4)
                                              (("1"
                                                (lemma
                                                 "composition_surjective[(K!1), below(card(K!1)), below(card(K!1))]")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "f!2"
                                                   "f!2 o (f!1 o x!1)")
                                                  (("1"
                                                    (lemma
                                                     "composition_surjective[(K!1), below(card(K!1)), (K!1)]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f!2 o (f!1 o x!1) o f!2"
                                                       "x!1")
                                                      (("1"
                                                        (case
                                                         "f!1 = x!1 o (f!2 o (f!1 o x!1) o f!2)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3
                                                           2)
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (expand
                                                               "o")
                                                              (("2"
                                                                (lemma
                                                                 "comp_inverse_left_alt[(K!1), below(card(K!1))]")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!2"
                                                                   "f!2"
                                                                   "x!1")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "comp_inverse_left_alt[(K!1), below(card(K!1))]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "f!1(x!2)"
                                                                         "f!2"
                                                                         "x!1")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-3 1))
                                                        (("2"
                                                          (expand
                                                           "bijective?")
                                                          (("2"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-4 1))
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-5 1))
                                        (("2"
                                          (expand "bijective?")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-2 1))
                                    (("2"
                                      (expand "bijective?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma
                                 "composition_surjective[below(card(K!1)), (K!1), (K!1)]")
                                (("2"
                                  (inst -1 "x!1" "f!1")
                                  (("1"
                                    (lemma
                                     "composition_surjective[below(card(K!1)), (K!1), below(card(K!1))]")
                                    (("1"
                                      (inst -1 "f!1 o x!1" "f!2")
                                      (("1"
                                        (lemma "surj_equiv_inj")
                                        (("1"
                                          (inst
                                           -1
                                           "card(K!1)"
                                           "f!2 o (f!1 o x!1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -2 -3 -4)
                                              (("1"
                                                (lemma
                                                 "composition_injective[(K!1), below(card(K!1)), below(card(K!1))]")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "f!2"
                                                   "f!2 o (f!1 o x!1)")
                                                  (("1"
                                                    (lemma
                                                     "composition_injective[(K!1), below(card(K!1)), (K!1)]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f!2 o (f!1 o x!1) o f!2"
                                                       "x!1")
                                                      (("1"
                                                        (case
                                                         "f!1 = x!1 o (f!2 o (f!1 o x!1) o f!2)")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           -1
                                                           -2
                                                           -3
                                                           2)
                                                          (("2"
                                                            (decompose-equality)
                                                            (("2"
                                                              (expand
                                                               "o")
                                                              (("2"
                                                                (lemma
                                                                 "comp_inverse_left_alt[(K!1), below(card(K!1))]")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x!2"
                                                                   "f!2"
                                                                   "x!1")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (lemma
                                                                       "comp_inverse_left_alt[(K!1), below(card(K!1))]")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "f!1(x!2)"
                                                                         "f!2"
                                                                         "x!1")
                                                                        (("2"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-3 1))
                                                        (("2"
                                                          (expand
                                                           "bijective?")
                                                          (("2"
                                                            (flatten)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-4 1))
                                                    (("2"
                                                      (expand
                                                       "bijective?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-5 1))
                                        (("2"
                                          (expand "bijective?")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-2 1))
                                    (("2"
                                      (expand "bijective?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (bijective_inverse_exists formula-decl nil function_inverse_def
     nil)
    (exists1 const-decl "bool" exists1 nil)
    (inverse? const-decl "bool" function_inverse_def nil)
    (injective? const-decl "bool" functions nil)
    (O const-decl "T3" function_props nil)
    (surjective? const-decl "bool" functions nil)
    (comp_inverse_left_alt formula-decl nil function_inverse_def nil)
    (composition_surjective judgement-tcc nil function_props nil)
    (surj_equiv_inj formula-decl nil nat_fun_props nil)
    (composition_injective judgement-tcc nil function_props nil)
    (bij_inv_is_bij_alt formula-decl nil function_inverse_def nil)
    (bijective? const-decl "bool" functions nil)
    (bij_exists formula-decl nil finite_sets nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil))
   shostak)
  (surj_equiv_inj_fin_sets-1 nil 3700088537
   ("" (induct "n")
    (("1" (skosimp)
      (("1" (skosimp)
        (("1" (prop)
          (("1" (lemma "card_def[T]")
            (("1" (inst -1 "S!1")
              (("1" (replace -1 -4 rl)
                (("1" (hide -1)
                  (("1" (lemma "empty_card[T]")
                    (("1" (inst -1 "S!1")
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "card_def[T]")
            (("2" (inst -1 "S!1")
              (("2" (replace -1 -4 rl)
                (("2" (hide -1)
                  (("2" (lemma "empty_card[T]")
                    (("2" (inst - "S!1")
                      (("2" (assert) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (postpone) nil nil))
    nil)
   nil shostak))
 (zero_ring_is_fin_int_dom 0
  (zero_ring_is_fin_int_dom-1 nil 3717504059
   ("" (lemma "zero_ring")
    (("" (prop)
      (("1" (expand "finite_integral_domain?")
        (("1" (expand "integral_domain?")
          (("1" (expand "commutative_ring?")
            (("1" (assert)
              (("1" (expand "commutative?")
                (("1" (prop)
                  (("1" (skeep)
                    (("1" (expand "restrict")
                      (("1" (typepred "x")
                        (("1" (typepred "y")
                          (("1" (expand "singleton")
                            (("1" (replaces -1)
                              (("1" (replaces -1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nz_closed?")
                    (("2" (hide -)
                      (("2" (expand "star_closed?")
                        (("2" (skeep)
                          (("2" (expand "member")
                            (("2" (typepred "x")
                              (("2"
                                (hide +)
                                (("2"
                                  (expand "singleton")
                                  (("2"
                                    (expand "remove")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "ring?")
        (("2" (assert)
          (("2" (expand "star_closed?")
            (("2" (expand "finite_integral_domain?")
              (("2" (expand "integral_domain?")
                (("2" (expand "commutative_ring?")
                  (("2" (expand "ring?") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "finite_integral_domain?")
        (("3" (expand "integral_domain?")
          (("3" (expand "commutative_ring?")
            (("3" (expand "ring?" -1)
              (("3" (expand "abelian_group?")
                (("3" (expand "group?")
                  (("3" (expand "monoid?")
                    (("3" (expand "monad?") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (expand "finite_integral_domain?")
        (("4" (expand "integral_domain?")
          (("4" (expand "commutative_ring?")
            (("4" (expand "ring?") (("4" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (expand "finite_integral_domain?")
          (("5" (expand "integral_domain?")
            (("5" (expand "commutative_ring?")
              (("5" (expand "ring?")
                (("5" (expand "abelian_group?")
                  (("5" (expand "group?")
                    (("5" (expand "monoid?")
                      (("5" (expand "monad?") (("5" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral_domain? const-decl "bool" integral_domain_def "algebra/")
    (restrict const-decl "R" restrict nil)
    (TRUE const-decl "bool" booleans nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (nz_closed? const-decl "bool" ring_nz_closed_def "algebra/")
    (finite_remove application-judgement "finite_set" finite_sets nil)
    (commutative? const-decl "bool" operator_defs nil)
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (group? const-decl "bool" group_def "algebra/")
    (monad? const-decl "bool" monad_def "algebra/")
    (one_member formula-decl nil monad "algebra/")
    (one_is_monad formula-decl nil monad "algebra/")
    (monoid? const-decl "bool" monoid_def "algebra/")
    (abelian_group? const-decl "bool" group_def "algebra/")
    (zero_ring formula-decl nil zero_ring nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil)
    (+ formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (* formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (zero formal-const-decl "T" finite_integral_domain nil))
   shostak))
 (nzx_member_S_TCC1 0
  (nzx_member_S_TCC1-1 nil 3711982167
   ("" (skosimp)
    (("" (typepred "S!1")
      (("" (expand "finite_integral_domain?") (("" (assert) nil nil))
        nil))
      nil))
    nil)
   ((finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (nzx_member_S 0
  (nzx_member_S-1 nil 3711983422
   ("" (skeep)
    (("" (prop)
      (("1" (rewrite "card_def[T]" :dir rl)
        (("1" (lemma "card_2_has_2[T]")
          (("1" (inst?)
            (("1" (assert)
              (("1" (skeep)
                (("1" (case "x = zero")
                  (("1" (inst 2 "y") (("1" (assert) nil nil)) nil)
                   ("2" (inst 3 "x") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "member")
          (("2" (typepred "nzx")
            (("2" (typepred "S")
              (("2" (expand "finite_integral_domain?")
                (("2" (expand "integral_domain?")
                  (("2" (expand "commutative_ring?")
                    (("2" (expand "ring?")
                      (("2" (expand "abelian_group?")
                        (("2" (expand "group?")
                          (("2" (expand "monoid?")
                            (("2" (expand "monad?")
                              (("2"
                                (prop)
                                (("2"
                                  (hide-all-but (-2 -14 1 2))
                                  (("2"
                                    (expand "member")
                                    (("2"
                                      (rewrite "card_def[T]" :dir rl)
                                      (("2"
                                        (lemma "card_2_has_2[T]")
                                        (("2"
                                          (lemma "card_one[T]")
                                          (("2"
                                            (lemma "empty_card[T]")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 -4))
                                                    (("2"
                                                      (expand "empty?")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "zero")
                                                        (("2"
                                                          (expand
                                                           "member")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide -3)
                                                    (("3"
                                                      (expand
                                                       "singleton")
                                                      (("3"
                                                        (case
                                                         " subset?[T]({y : T | y = zero OR y = nzx} , S) ")
                                                        (("1"
                                                          (lemma
                                                           "card_subset[T]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "Card({y: T | y = zero OR y = nzx})  = 2")
                                                                (("1"
                                                                  (rewrite
                                                                   "card_def[T]"
                                                                   :dir
                                                                   rl)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -
                                                                   2
                                                                   3
                                                                   5)
                                                                  (("2"
                                                                    (lemma
                                                                     "Card_bijection[T]")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "LAMBDA(t: ({y: T | y = zero OR y = nzx})  ) : IF t = zero THEN 0 ELSE 1 ENDIF ")
                                                                          (("1"
                                                                            (hide
                                                                             2
                                                                             3)
                                                                            (("1"
                                                                              (expand
                                                                               "bijective?")
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (expand
                                                                                   "injective?")
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "x1")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "x2")
                                                                                        (("1"
                                                                                          (lift-if)
                                                                                          (("1"
                                                                                            (lift-if)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("5"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("6"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("7"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("8"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("9"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "surjective?")
                                                                                  (("2"
                                                                                    (skosimp*)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "y!1")
                                                                                      (("2"
                                                                                        (case
                                                                                         "y!1 = 0 OR y!1 = 1")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "zero")
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst
                                                                                               1
                                                                                               "nzx")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "is_finite")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           2
                                                                           "LAMBDA(t: ({y: T | y = zero OR y = nzx})  ) : IF t = zero THEN 0 ELSE 1 ENDIF ")
                                                                          (("2"
                                                                            (expand
                                                                             "injective?")
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (lift-if)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("4"
                                                                                        (typepred
                                                                                         "x1")
                                                                                        (("4"
                                                                                          (typepred
                                                                                           "x2")
                                                                                          (("4"
                                                                                            (prop)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide-all-but
                                                                   (1
                                                                    4))
                                                                  (("3"
                                                                    (expand
                                                                     "is_finite")
                                                                    (("3"
                                                                      (inst
                                                                       1
                                                                       2
                                                                       "LAMBDA(t: ({y: T | y = zero OR y = nzx})  ) : IF t = zero THEN 0 ELSE 1 ENDIF ")
                                                                      (("3"
                                                                        (expand
                                                                         "injective?")
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (lift-if)
                                                                            (("3"
                                                                              (lift-if)
                                                                              (("3"
                                                                                (lift-if)
                                                                                (("3"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("4"
                                                                                    (typepred
                                                                                     "x1")
                                                                                    (("4"
                                                                                      (typepred
                                                                                       "x2")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 4))
                                                              (("2"
                                                                (expand
                                                                 "is_finite")
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   2
                                                                   "LAMBDA(t: ({y: T | y = zero OR y = nzx})  ) : IF t = zero THEN 0 ELSE 1 ENDIF ")
                                                                  (("2"
                                                                    (expand
                                                                     "injective?")
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (prop)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("4"
                                                                                (typepred
                                                                                 "x1")
                                                                                (("4"
                                                                                  (typepred
                                                                                   "x2")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide-all-but
                                                           (-3 -4 1))
                                                          (("2"
                                                            (expand
                                                             "subset?")
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (expand
                                                                 "member")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((card_2_has_2 formula-decl nil finite_sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero formal-const-decl "T" finite_integral_domain nil)
    (y skolem-const-decl "T" finite_integral_domain nil)
    (/= const-decl "boolean" notequal nil)
    (+ formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (* formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (nz_T type-eq-decl nil ring_basic_properties nil)
    (x skolem-const-decl "T" finite_integral_domain nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil)
    (finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (card_def formula-decl nil finite_sets nil)
    (integral_domain? const-decl "bool" integral_domain_def "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (group? const-decl "bool" group_def "algebra/")
    (monad? const-decl "bool" monad_def "algebra/")
    (card_one formula-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (injective? const-decl "bool" functions nil)
    (Card_bijection formula-decl nil finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nzx skolem-const-decl "nz_T[T, +, *, zero]" finite_integral_domain
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (empty_card formula-decl nil finite_sets nil)
    (monoid? const-decl "bool" monoid_def "algebra/")
    (abelian_group? const-decl "bool" group_def "algebra/")
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (auxiliar_map_TCC1 0
  (auxiliar_map_TCC1-1 nil 3711983634
   ("" (skosimp)
    (("" (skosimp)
      (("" (expand "member")
        (("" (typepred "y!1")
          (("" (lemma "R_prod_star_closed")
            (("" (inst -1 "S!1" "nzx!1" "y!1")
              (("1" (assert) nil nil)
               ("2" (typepred "S!1")
                (("2" (expand "finite_integral_domain?")
                  (("2" (expand "integral_domain?")
                    (("2" (expand "commutative_ring?")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (S!1 skolem-const-decl "(finite_integral_domain?)"
     finite_integral_domain nil)
    (/= const-decl "boolean" notequal nil)
    (nz_T type-eq-decl nil ring_basic_properties nil)
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (integral_domain? const-decl "bool" integral_domain_def "algebra/")
    (zero formal-const-decl "T" finite_integral_domain nil)
    (* formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (+ formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (member const-decl "bool" sets nil))
   nil))
 (auxiliar_map 0
  (auxiliar_map-1 nil 3711983673
   ("" (skeep)
    (("" (name-replace "f" "LAMBDA (y: (S)): nzx * y" :hide? nil)
      (("" (typepred "nzx")
        (("" (expand "bijective?")
          (("" (lemma "surj_equiv_inj_fin_sets")
            (("" (inst -1 "S")
              (("" (typepred "S")
                (("" (expand "finite_integral_domain?")
                  (("" (flatten)
                    (("" (assert)
                      (("" (inst -3 "f")
                        (("1" (flatten -3)
                          (("1" (split -3)
                            (("1" (assert) nil nil)
                             ("2" (split -3)
                              (("1" (propax) nil nil)
                               ("2"
                                (hide 4)
                                (("2"
                                  (copy -3)
                                  (("2"
                                    (hide 1)
                                    (("2"
                                      (decompose-equality -1)
                                      (("2"
                                        (decompose-equality -4)
                                        (("2"
                                          (expand "injective?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst? -1)
                                              (("2"
                                                (inst -2 "x2")
                                                (("2"
                                                  (replace -1 -3 rl)
                                                  (("2"
                                                    (replace -2 -3 rl)
                                                    (("2"
                                                      (lemma
                                                       "nzd_cancel_left")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (prop)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "left_zd?")
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (typepred
                                                               "y")
                                                              (("2"
                                                                (lemma
                                                                 "times_is_zero")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 -3 -4 1))
                          (("2" (skeep)
                            (("2" (replace -2 1 rl)
                              (("2"
                                (beta)
                                (("2"
                                  (typepred "x1")
                                  (("2"
                                    (hide -3)
                                    (("2"
                                      (expand "integral_domain?")
                                      (("2"
                                        (expand "commutative_ring?")
                                        (("2"
                                          (expand "ring?")
                                          (("2"
                                            (expand "star_closed?")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst? -3)
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil finite_integral_domain nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (/= const-decl "boolean" notequal nil)
    (zero formal-const-decl "T" finite_integral_domain nil)
    (+ formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (nz_T type-eq-decl nil ring_basic_properties nil)
    (bijective? const-decl "bool" functions nil)
    (member const-decl "bool" sets nil)
    (integral_domain? const-decl "bool" integral_domain_def "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (injective? const-decl "bool" functions nil)
    (nzd_cancel_left formula-decl nil ring_basic_properties nil)
    (times_is_zero formula-decl nil ring_nz_closed "algebra/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nlzd type-eq-decl nil ring_basic_properties nil)
    (nzx skolem-const-decl "nz_T[T, +, *, zero]" finite_integral_domain
     nil)
    (left_zd? const-decl "bool" ring_basic_properties nil)
    (f skolem-const-decl "[(S) -> T]" finite_integral_domain nil)
    (S skolem-const-decl "(finite_integral_domain?)"
     finite_integral_domain nil)
    (surj_equiv_inj_fin_sets formula-decl nil finite_integral_domain
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (building_one 0
  (building_one-1 nil 3718913799
   ("" (skosimp)
    (("" (lemma "auxiliar_map")
      (("" (lemma "nzx_member_S")
        (("" (inst -1 "S!1")
          (("" (assert)
            (("" (skosimp -1)
              (("" (inst -2 "S!1" "nzx!1")
                (("" (assert)
                  (("" (copy -2)
                    (("" (expand "bijective?")
                      (("" (flatten)
                        (("" (hide -1 -4)
                          (("" (expand "surjective?" -1)
                            (("" (inst -1 "nzx!1")
                              ((""
                                (skosimp)
                                ((""
                                  (inst 1 "x!1")
                                  ((""
                                    (skosimp)
                                    ((""
                                      (expand "surjective?")
                                      ((""
                                        (inst -3 "z!1")
                                        ((""
                                          (skosimp)
                                          ((""
                                            (lemma "times_commutative")
                                            ((""
                                              (inst -1 "x!1" "z!1")
                                              ((""
                                                (replaces -1)
                                                ((""
                                                  (replace -3 1 rl)
                                                  ((""
                                                    (lemma
                                                     "times_commutative")
                                                    ((""
                                                      (inst
                                                       -1
                                                       "nzx!1"
                                                       "x!2")
                                                      ((""
                                                        (replace -1 1)
                                                        ((""
                                                          (hide -1)
                                                          ((""
                                                            (lemma
                                                             "times_associative[T,+,*,zero]")
                                                            ((""
                                                              (inst
                                                               -1
                                                               "x!2"
                                                               "nzx!1"
                                                               "x!1")
                                                              ((""
                                                                (replace
                                                                 -1
                                                                 1)
                                                                ((""
                                                                  (hide
                                                                   -1)
                                                                  ((""
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((auxiliar_map formula-decl nil finite_integral_domain nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (bijective? const-decl "bool" functions nil)
    (times_associative formula-decl nil ring "algebra/")
    (TRUE const-decl "bool" booleans nil)
    (times_commutative formula-decl nil commutative_ring "algebra/")
    (surjective? const-decl "bool" functions nil)
    (nz_T type-eq-decl nil ring_basic_properties nil)
    (* formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (+ formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (zero formal-const-decl "T" finite_integral_domain nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzx_member_S formula-decl nil finite_integral_domain nil))
   shostak))
 (one_is_member_S 0
  (one_is_member_S-2 nil 3720275791
   ("" (skosimp)
    (("" (lemma "building_one")
      (("" (inst -1 "S!1")
        (("" (assert)
          (("" (skosimp)
            (("" (lemma "times_one")
              (("" (lemma "nzx_member_S")
                (("" (inst -1 "S!1")
                  (("" (assert)
                    (("" (skosimp)
                      (("" (inst -2 "nzx!1")
                        (("" (inst -3 "nzx!1")
                          (("" (flatten)
                            (("" (replace -2 -3 rl)
                              ((""
                                (rewrite "times_associative" -3)
                                ((""
                                  (lemma "nzd_cancel_left")
                                  ((""
                                    (inst -1 "nzx!1" "y!1" "one")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "left_zd?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "nzx!1")
                                          (("2"
                                            (lemma "times_is_zero")
                                            (("2"
                                              (inst -1 "nzx!1" "y!2")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((building_one formula-decl nil finite_integral_domain nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (times_one formula-decl nil ring_with_one "algebra/")
    (+ formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (* formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (zero formal-const-decl "T" finite_integral_domain nil)
    (one formal-const-decl "T" finite_integral_domain nil)
    (S!1 skolem-const-decl "(finite_integral_domain?)"
     finite_integral_domain nil)
    (nzx!1 skolem-const-decl "nz_T[T, +, *, zero]"
     finite_integral_domain nil)
    (nzd_cancel_left formula-decl nil ring_basic_properties nil)
    (times_is_zero formula-decl nil ring_nz_closed "algebra/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nlzd type-eq-decl nil ring_basic_properties nil)
    (left_zd? const-decl "bool" ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (one_times formula-decl nil ring_with_one "algebra/")
    (times_associative formula-decl nil ring "algebra/")
    (/= const-decl "boolean" notequal nil)
    (nz_T type-eq-decl nil ring_basic_properties nil)
    (nzx_member_S formula-decl nil finite_integral_domain nil)
    (finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil))
   nil)
  (one_is_member_S-1 nil 3718915296
   ("" (skosimp)
    (("" (lemma "building_one")
      (("" (inst -1 "S!1")
        (("" (assert)
          (("" (skosimp)
            (("" (lemma "times_one")
              (("" (lemma "nzx_member_S")
                (("" (inst -1 "S!1")
                  (("" (assert)
                    (("" (skosimp)
                      (("" (inst -2 "nzx!1")
                        (("" (inst -3 "nzx!1")
                          (("" (flatten)
                            (("" (replace -2 -3 rl)
                              ((""
                                (rewrite "times_associative" -3)
                                ((""
                                  (lemma "nzd_cancel_left")
                                  ((""
                                    (inst -1 "nzx!1" "y!1" "one")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "zd_element?")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (typepred "nzx!1")
                                          (("2"
                                            (lemma "times_is_zero")
                                            (("2"
                                              (inst -1 "nzx!1" "y!2")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((building_one formula-decl nil finite_integral_domain nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (times_one formula-decl nil ring_with_one "algebra/")
    (+ formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (* formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (zero formal-const-decl "T" finite_integral_domain nil)
    (one formal-const-decl "T" finite_integral_domain nil)
    (nzd_cancel_left formula-decl nil ring_basic_properties nil)
    (times_is_zero formula-decl nil ring_nz_closed "algebra/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nzd type-eq-decl nil ring_basic_properties nil)
    (zd_element? const-decl "bool" ring_basic_properties nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (one_times formula-decl nil ring_with_one "algebra/")
    (times_associative formula-decl nil ring "algebra/")
    (/= const-decl "boolean" notequal nil)
    (nz_T type-eq-decl nil ring_basic_properties nil)
    (nzx_member_S formula-decl nil finite_integral_domain nil)
    (finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil))
   shostak))
 (fin_int_domain_is_ring_with_one 0
  (fin_int_domain_is_ring_with_one-1 nil 3719072311
   ("" (skosimp)
    (("" (typepred "S!1")
      (("" (expand "ring_with_one?")
        (("" (split)
          (("1" (expand "finite_integral_domain?")
            (("1" (expand "integral_domain?")
              (("1" (expand "commutative_ring?")
                (("1" (flatten) nil nil)) nil))
              nil))
            nil)
           ("2" (expand "monoid?")
            (("2" (split)
              (("1" (expand "monad?")
                (("1" (expand "finite_integral_domain?")
                  (("1" (expand "integral_domain?")
                    (("1" (expand "commutative_ring?")
                      (("1" (expand "ring?")
                        (("1" (flatten)
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (rewrite "one_is_member_S") nil nil)
                             ("3" (expand "identity?")
                              (("3"
                                (skosimp)
                                (("3"
                                  (expand "restrict")
                                  (("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (rewrite "times_one")
                                      (("3"
                                        (rewrite "one_times")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "finite_integral_domain?")
                (("2" (expand "integral_domain?")
                  (("2" (expand "commutative_ring?")
                    (("2" (expand "ring?") (("2" (flatten) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (integral_domain? const-decl "bool" integral_domain_def "algebra/")
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (identity? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (one formal-const-decl "T" finite_integral_domain nil)
    (zero formal-const-decl "T" finite_integral_domain nil)
    (* formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (+ formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (times_one formula-decl nil ring_with_one "algebra/")
    (one_times formula-decl nil ring_with_one "algebra/")
    (one_is_member_S formula-decl nil finite_integral_domain nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (monad? const-decl "bool" monad_def "algebra/")
    (monoid? const-decl "bool" monoid_def "algebra/")
    (ring_with_one? const-decl "bool" ring_with_one_def "algebra/"))
   shostak))
 (fin_int_domain_is_mult_group 0
  (fin_int_domain_is_mult_group-1 nil 3719073377
   ("" (skosimp)
    (("" (expand "group?")
      (("" (expand "monoid?")
        (("" (expand "monad?")
          (("" (split)
            (("1" (typepred "S!1")
              (("1" (expand "finite_integral_domain?")
                (("1" (expand "integral_domain?")
                  (("1" (expand "commutative_ring?")
                    (("1" (expand "ring?")
                      (("1" (flatten)
                        (("1" (hide-all-but (-2 1))
                          (("1" (expand "star_closed?")
                            (("1" (skosimp)
                              (("1"
                                (inst -1 "x!1" "y!1")
                                (("1"
                                  (expand "member")
                                  (("1"
                                    (expand "remove")
                                    (("1"
                                      (expand "member")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "x!1" "y!1")
                                          (("1"
                                            (expand "remove")
                                            (("1"
                                              (lemma "times_is_zero")
                                              (("1"
                                                (inst -1 "x!1" "y!1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (typepred "y!1")
                                    (("2"
                                      (expand "remove")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "x!1")
                                  (("3"
                                    (expand "remove")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "member")
              (("2" (expand "remove")
                (("2" (split)
                  (("1" (flatten)
                    (("1" (lemma "nzx_member_S")
                      (("1" (inst -1 "S!1")
                        (("1" (assert)
                          (("1" (skosimp)
                            (("1" (typepred "nzx!1")
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma "one_times")
                                  (("1"
                                    (inst -1 "nzx!1")
                                    (("1"
                                      (replace -3 -1 rl)
                                      (("1"
                                        (rewrite "zero_times")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (rewrite "one_is_member_S") nil nil))
                  nil))
                nil))
              nil)
             ("3" (expand "identity?")
              (("3" (skosimp)
                (("3" (expand "restrict")
                  (("3" (rewrite "times_one")
                    (("3" (rewrite "one_times") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("4" (typepred "S!1")
              (("4" (expand "finite_integral_domain?")
                (("4" (expand "integral_domain?")
                  (("4" (expand "commutative_ring?")
                    (("4" (expand "ring?")
                      (("4" (flatten)
                        (("4" (hide-all-but (-3 1))
                          (("4" (expand "associative?")
                            (("4" (skosimp)
                              (("4"
                                (expand "restrict")
                                (("4"
                                  (inst -1 "x!1" "y!1" "z!1")
                                  (("1"
                                    (typepred "z!1")
                                    (("1"
                                      (expand "remove")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "y!1")
                                    (("2"
                                      (expand "remove")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred "x!1")
                                    (("3"
                                      (expand "remove")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("5" (expand "inv_exists?")
              (("5" (skosimp)
                (("5" (lemma "auxiliar_map")
                  (("5" (inst -1 "S!1" "x!1")
                    (("1" (typepred "x!1")
                      (("1" (expand "remove")
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (expand "bijective?")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "surjective?")
                                  (("1"
                                    (inst -3 "one")
                                    (("1"
                                      (skosimp)
                                      (("1"
                                        (inst 2 "x!2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (rewrite
                                             "times_commutative")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "remove")
                                          (("2"
                                            (typepred "x!2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (replace -2 -5 rl)
                                                  (("2"
                                                    (rewrite
                                                     "times_zero")
                                                    (("2"
                                                      (hide-all-but
                                                       (-5 1))
                                                      (("2"
                                                        (lemma
                                                         "one_times")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x!1")
                                                          (("2"
                                                            (replace
                                                             -2
                                                             -1
                                                             rl)
                                                            (("2"
                                                              (rewrite
                                                               "zero_times")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "one_is_member_S")
                                      (("2"
                                        (inst -1 "S!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "x!1")
                      (("2" (expand "remove") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((group? const-decl "bool" group_def "algebra/")
    (monad? const-decl "bool" monad_def "algebra/")
    (inv_exists? const-decl "bool" group_def "algebra/")
    (auxiliar_map formula-decl nil finite_integral_domain nil)
    (bijective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (times_zero formula-decl nil ring "algebra/")
    (times_commutative formula-decl nil commutative_ring "algebra/")
    (x!2 skolem-const-decl "(S!1)" finite_integral_domain nil)
    (x!1 skolem-const-decl "(remove(zero, S!1))" finite_integral_domain
     nil)
    (x!1 skolem-const-decl "(remove(zero, S!1))" finite_integral_domain
     nil)
    (y!1 skolem-const-decl "(remove(zero, S!1))" finite_integral_domain
     nil)
    (z!1 skolem-const-decl "(remove(zero, S!1))" finite_integral_domain
     nil)
    (associative? const-decl "bool" operator_defs nil)
    (identity? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (times_one formula-decl nil ring_with_one "algebra/")
    (nzx_member_S formula-decl nil finite_integral_domain nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nz_T type-eq-decl nil ring_basic_properties nil)
    (one_times formula-decl nil ring_with_one "algebra/")
    (one formal-const-decl "T" finite_integral_domain nil)
    (zero_times formula-decl nil ring "algebra/")
    (one_is_member_S formula-decl nil finite_integral_domain nil)
    (finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (integral_domain? const-decl "bool" integral_domain_def "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (member const-decl "bool" sets nil)
    (times_is_zero formula-decl nil ring_nz_closed "algebra/")
    (+ formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (* formal-const-decl "[T, T -> T]" finite_integral_domain nil)
    (y!1 skolem-const-decl "(remove(zero, S!1))" finite_integral_domain
     nil)
    (x!1 skolem-const-decl "(remove(zero, S!1))" finite_integral_domain
     nil)
    (zero formal-const-decl "T" finite_integral_domain nil)
    (remove const-decl "set" sets nil)
    (S!1 skolem-const-decl "(finite_integral_domain?)"
     finite_integral_domain nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (monoid? const-decl "bool" monoid_def "algebra/"))
   shostak))
 (fin_int_domain_is_field 0
  (fin_int_domain_is_field-1 nil 3719338787
   ("" (skosimp)
    (("" (expand "field?")
      (("" (expand "division_ring?")
        (("" (split)
          (("1" (rewrite "fin_int_domain_is_ring_with_one") nil nil)
           ("2" (rewrite "fin_int_domain_is_mult_group") nil nil)
           ("3" (typepred "S!1")
            (("3" (expand "finite_integral_domain?")
              (("3" (expand "integral_domain?")
                (("3" (expand "commutative_ring?")
                  (("3" (flatten) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((field? const-decl "bool" field_def "algebra/")
    (finite_integral_domain? const-decl "bool" finite_integral_domain
     nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil finite_integral_domain nil)
    (fin_int_domain_is_ring_with_one formula-decl nil
     finite_integral_domain nil)
    (fin_int_domain_is_mult_group formula-decl nil
     finite_integral_domain nil)
    (commutative_ring? const-decl "bool" ring_def "algebra/")
    (integral_domain? const-decl "bool" integral_domain_def "algebra/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (division_ring? const-decl "bool" division_ring_def "algebra/"))
   shostak)))

