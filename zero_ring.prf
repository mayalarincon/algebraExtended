(zero_ring
 (groupoid_plus_equiv 0
  (groupoid_plus_equiv-2 nil 3714501152
   ("" (prop)
    (("1" (skosimp)
      (("1" (expand "member")
        (("1" (split)
          (("1" (expand "singleton")
            (("1" (expand "star_closed?")
              (("1" (inst -1 "zero" "zero")
                (("1" (expand "member") (("1" (replaces -2) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "singleton")
            (("2" (expand "star_closed?")
              (("2" (inst -1 "zero" "zero")
                (("2" (expand "member") (("2" (replaces -2) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (inst -1 "zero")
      (("2" (expand "member")
        (("2" (expand "singleton")
          (("2" (expand "star_closed?")
            (("2" (skosimp)
              (("2" (expand "member")
                (("2" (hide -1)
                  (("2" (typepred "x!1" "y!1")
                    (("2" (replaces -1) (("2" (replaces -1) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (zero formal-const-decl "T" zero_ring nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil zero_ring nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil))
   nil)
  (groupoid_plus_equiv-1 nil 3714501131 ("" (postpone) nil nil) nil
   shostak))
 (groupoid_times_equiv 0
  (groupoid_times_equiv-1 nil 3714501266
   ("" (prop)
    (("1" (skosimp)
      (("1" (split)
        (("1" (expand "star_closed?")
          (("1" (inst -1 "zero" "zero")
            (("1" (expand "member")
              (("1" (expand "singleton") (("1" (replaces -2) nil nil))
                nil))
              nil)
             ("2" (expand "singleton") (("2" (propax) nil nil)) nil))
            nil))
          nil)
         ("2" (expand "star_closed?")
          (("2" (inst -1 "zero" "zero")
            (("1" (expand "member")
              (("1" (expand "singleton") (("1" (replaces -2) nil nil))
                nil))
              nil)
             ("2" (expand "singleton") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "star_closed?")
      (("2" (skosimp)
        (("2" (inst -1 "zero")
          (("2" (expand "member")
            (("2" (expand "singleton")
              (("2" (typepred "x!1" "y!1")
                (("2" (expand "singleton")
                  (("2" (replaces -1)
                    (("2" (replaces -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (member const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil zero_ring nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (zero formal-const-decl "T" zero_ring nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil))
   shostak))
 (zero_ring 0
  (zero_ring-1 nil 3713873543
   ("" (prop)
    (("1" (expand "ring?")
      (("1" (split)
        (("1" (expand "abelian_group?")
          (("1" (expand "group?")
            (("1" (expand "monoid?")
              (("1" (expand "monad?")
                (("1" (split)
                  (("1" (propax) nil nil)
                   ("2" (expand "member")
                    (("2" (expand "singleton") (("2" (propax) nil nil))
                      nil))
                    nil)
                   ("3" (expand "identity?")
                    (("3" (skosimp)
                      (("3" (split)
                        (("1" (expand "restrict")
                          (("1" (expand "star_closed?")
                            (("1" (inst -1 "x!1" "zero")
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "singleton")
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (expand "singleton")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "singleton")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "restrict")
                          (("2" (expand "star_closed?")
                            (("2" (inst -1 "zero" "x!1")
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "singleton")
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (typepred "x!1")
                                      (("1"
                                        (expand "singleton")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "singleton")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (expand "associative?")
                    (("4" (skosimp)
                      (("4" (expand "restrict")
                        (("4" (typepred "x!1" "y!1" "z!1")
                          (("4" (expand "singleton")
                            (("4" (replaces -1)
                              (("4"
                                (replaces -1)
                                (("4"
                                  (replaces -1)
                                  (("4"
                                    (expand "star_closed?")
                                    (("4"
                                      (inst -1 "zero" "zero")
                                      (("4"
                                        (expand "member")
                                        (("4"
                                          (replace -1)
                                          (("4" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (expand "inv_exists?")
                    (("5" (skosimp)
                      (("5" (inst 1 "zero")
                        (("1" (split)
                          (("1" (expand "star_closed?")
                            (("1" (inst -1 "x!1" "zero")
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "singleton")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "singleton")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "star_closed?")
                            (("2" (inst -1 "zero" "x!1")
                              (("1"
                                (expand "member")
                                (("1"
                                  (expand "singleton")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "singleton")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "singleton")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("6" (expand "commutative?")
                    (("6" (skosimp)
                      (("6" (expand "restrict")
                        (("6" (typepred "x!1" "y!1")
                          (("6" (expand "singleton")
                            (("6" (replaces -1)
                              (("6" (replaces -1) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (propax) nil nil)
         ("3" (expand "associative?")
          (("3" (skosimp)
            (("3" (expand "restrict")
              (("3" (typepred "x!1" "y!1" "z!1")
                (("3" (expand "singleton")
                  (("3" (replaces -1)
                    (("3" (replaces -1)
                      (("3" (replaces -1)
                        (("3" (expand "star_closed?")
                          (("3" (inst -2 "zero" "zero")
                            (("3" (expand "member")
                              (("3"
                                (replaces -1)
                                (("3" (replaces -2) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (expand "left_distributive?")
          (("4" (skosimp)
            (("4" (expand "restrict")
              (("4" (typepred "x!1" "y!1" "z!1")
                (("4" (expand "singleton")
                  (("4" (replaces -1)
                    (("4" (replaces -1)
                      (("4" (replaces -1)
                        (("4" (expand "star_closed?")
                          (("4" (inst -1 "zero" "zero")
                            (("4" (expand "member")
                              (("4"
                                (replace -1 1)
                                (("4"
                                  (inst -2 "zero" "zero")
                                  (("4"
                                    (replaces -2)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("5" (expand "right_distributive?")
          (("5" (skosimp)
            (("5" (expand "restrict")
              (("5" (typepred "x!1" "y!1" "z!1")
                (("5" (expand "singleton")
                  (("5" (replaces -1)
                    (("5" (replaces -1)
                      (("5" (replaces -1)
                        (("5" (expand "star_closed?")
                          (("5" (inst -1 "zero" "zero")
                            (("5" (expand "member")
                              (("5"
                                (replace -1 1)
                                (("5"
                                  (inst -2 "zero" "zero")
                                  (("5"
                                    (replaces -2)
                                    (("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "star_closed?")
      (("2" (expand "ring?")
        (("2" (expand "abelian_group?")
          (("2" (expand "group?")
            (("2" (expand "monoid?")
              (("2" (expand "monad?")
                (("2" (flatten)
                  (("2" (hide-all-but (-1 1))
                    (("2" (expand "star_closed?")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (expand "star_closed?")
      (("3" (expand "ring?")
        (("3" (flatten)
          (("3" (hide-all-but (-2 1))
            (("3" (expand "star_closed?") (("3" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (right_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (left_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (abelian_group? const-decl "bool" group_def "algebra/")
    (monoid? const-decl "bool" monoid_def "algebra/")
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (restrict const-decl "R" restrict nil)
    (T formal-nonempty-type-decl nil zero_ring nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (singleton? const-decl "bool" sets nil)
    (zero formal-const-decl "T" zero_ring nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (identity? const-decl "bool" operator_defs nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (associative? const-decl "bool" operator_defs nil)
    (inv_exists? const-decl "bool" group_def "algebra/")
    (commutative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def "algebra/")
    (group? const-decl "bool" group_def "algebra/"))
   shostak))
 (zero_ring_with_one 0
  (zero_ring_with_one-1 nil 3714475714
   ("" (prop)
    (("1" (expand "ring_with_one?")
      (("1" (split)
        (("1" (lemma "zero_ring") (("1" (assert) nil nil)) nil)
         ("2" (expand "monoid?")
          (("2" (expand "monad?")
            (("2" (split)
              (("1" (propax) nil nil)
               ("2" (expand "member")
                (("2" (expand "singleton") (("2" (propax) nil nil))
                  nil))
                nil)
               ("3" (expand "identity?")
                (("3" (skosimp)
                  (("3" (expand "restrict")
                    (("3" (split)
                      (("1" (expand "star_closed?")
                        (("1" (inst -2 "x!1" "zero")
                          (("1" (expand "member")
                            (("1" (expand "singleton")
                              (("1"
                                (replaces -2)
                                (("1"
                                  (typepred "x!1")
                                  (("1"
                                    (expand "singleton")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "singleton")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "star_closed?")
                        (("2" (inst -2 "zero" "x!1")
                          (("1" (expand "member")
                            (("1" (expand "singleton")
                              (("1"
                                (replaces -2)
                                (("1"
                                  (typepred "x!1")
                                  (("1"
                                    (expand "singleton")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "singleton")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (lemma "zero_ring")
                (("4" (assert)
                  (("4" (expand "ring?") (("4" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "star_closed?")
      (("2" (expand "ring_with_one?")
        (("2" (expand "ring?")
          (("2" (expand "abelian_group?")
            (("2" (expand "group?")
              (("2" (expand "monoid?")
                (("2" (expand "monad?")
                  (("2" (flatten)
                    (("2" (hide-all-but (-1 1))
                      (("2" (expand "star_closed?")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (expand "ring_with_one?")
      (("3" (expand "ring?") (("3" (flatten) nil nil)) nil)) nil))
    nil)
   ((group? const-decl "bool" group_def "algebra/")
    (abelian_group? const-decl "bool" group_def "algebra/")
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (monoid? const-decl "bool" monoid_def "algebra/")
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (zero formal-const-decl "T" zero_ring nil)
    (singleton? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-nonempty-type-decl nil zero_ring nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (monad? const-decl "bool" monad_def "algebra/")
    (zero_ring formula-decl nil zero_ring nil))
   shostak)))

