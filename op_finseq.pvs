%%----------------------------------------------------------------------------
%%
%% Authors:	
%% 	Thaynara Arielly de Lima
%% 	Universidade Federal de Goiás - Brasil
%%
%%  	Andréia Borges Avelar da Silva
%%		Universidade de Brasília - Brasil
%%			
%%		André Luiz Galdino
%%		Universidade Federal de Catalão - Brasil
%%
%%		Mauricio Ayala-Rincón
%%		Universidade de Brasília - Brasil
%%----------------------------------------------------------------------------
%%
%%
%%	Last version: May 17, 2022
%%
%%----------------------------------------------------------------------------


op_finseq [T:Type+,*:[T,T->T],one:T]: THEORY

  BEGIN

   ASSUMING IMPORTING monoid_def[T,*,one]

       fullset_is_monoid: ASSUMPTION monoid?(fullset[T])

   ENDASSUMING


  IMPORTING op_finseq_def[T,*,one],
  	    monoid[T,*,one],
	    structures@seq_extras[T],
	    structures@seq2set[T]

   fs1,fs2: VAR finseq[T]
   S:       VAR set[T]
   x: 	    VAR T
 
 
   op_fseq_singleton: LEMMA
       op_fseq( #(x) ) = x
   
   op_fseq_composition: LEMMA
      op_fseq(fs1 o fs2) =  op_fseq(fs1) *  op_fseq(fs2)


  op_subfseq_closed : LEMMA 
      FORALL (S : (monad?), fs : finseq[(S)], i,j:below[length(fs)]) :  S(op_fseq(fs^(i,j)))
      
   op_fseq_closed: COROLLARY
      FORALL (S : (monad?), fs : finseq[(S)]):  S(op_fseq(fs))

   % @QED op_fseq_split proved by galdino on Wed, 02 Mar 2022 01:00:48 GMT
   op_fseq_split: LEMMA
      FORALL (S: (monoid?), fs: finseq[(S)], i: below[length(fs)] | i /= 0):
         op_fseq(fs) = op_fseq(fs^(0,i-1)) * fs(i) * op_fseq(fs^(i+1,length(fs)-1))

   % @QED op_fseq_split_commute proved by galdino on Wed, 02 Mar 2022 01:26:07 GMT
   op_fseq_split_commute: LEMMA
      FORALL (S: (commutative_monoid?), fs: finseq[(S)], i: below[length(fs)] | i /= 0):
         op_fseq(fs) = fs(i) * op_fseq(fs^(0,i-1) o fs^(i+1,length(fs)-1))
	 
   % @QED op_fseq_split_delete proved by galdino on Mon, 07 Mar 2022 17:38:43 GMT
   op_fseq_split_delete: LEMMA
      FORALL (S: (commutative_monoid?), fs: finseq[(S)], i: below[length(fs)]):
         op_fseq(fs) = op_fseq(delete(fs,i)) * fs(i)

   % @QED op_fseq_same_replace proved by galdino on Thu, 03 Mar 2022 00:22:33 GMT
   op_fseq_same_replace_first: LEMMA
      FORALL (S: (monoid?), x:(S), fs: finseq[(S)] | length(fs) /= 0):
        x * op_fseq(fs) = op_fseq(replace(x * fs(0), fs, 0))

   % @QED op_fseq_same_replace_last proved by galdino on Sat, 05 Mar 2022 23:37:29 GMT
   op_fseq_same_replace_last: LEMMA
      FORALL (S: (monoid?), x:(S), fs: finseq[(S)] | length(fs) /= 0):
        op_fseq(fs) * x = op_fseq(replace(fs(length(fs)-1) * x, fs, length(fs)-1))

heading_fseq(fs : finseq[T], n : nat) : finseq[T] =
   IF n >= length(fs) then fs
   ELSE (# length := length(fs), 
      seq := LAMBDA(i:below[length(fs)]) :
               IF i > n THEN fs`seq(i)
               ELSIF i > 0 THEN fs`seq(i-1)
               ELSE fs`seq(n)
               ENDIF                 #) 
   ENDIF

% @QED times_heading_fseq proved by ayala on Thu, 02 Feb 2023 19:35:29 GMT
times_heading_fseq  : LEMMA FORALL (S: (commutative_monoid?), fs: finseq[(S)], n: nat) :
            op_fseq(fs) = op_fseq( heading_fseq(fs, n) )

  END op_finseq
