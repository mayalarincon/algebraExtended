%% TCCs associated with theory field
%% This file was automatically generated by PVS, please **do not modify** by hand.
field_TCCS: THEORY BEGIN

	% Assuming TCC generated (at line 27, column 13) for
	% division_ring[T, +, *, zero, one]
	% generated from assumption division_ring.fullset_is_division_ring
	  % proved
	IMP_division_ring_TCC1: OBLIGATION
	division_ring?[T, +, *, zero, one](fullset[T])
	
	% Assuming TCC generated (at line 28, column 13) for
	% integral_domain[T, +, *, zero]
	% generated from assumption integral_domain.fullset_is_integral_domain
	  % proved
	IMP_integral_domain_TCC1: OBLIGATION
	integral_domain?[T, +, *, zero](fullset[T])
	
	% Subtype TCC generated (at line 30, column 46) for  fullset[T]
	% expected type  field
	  % proved
	field_TCC1: OBLIGATION
	field?[T, +, *, zero, one](fullset[T])
	
	% Subtype TCC generated (at line 33, column 23) for
	% restrict[[T, T], [nz_T[T, +, *, zero], nz_T[T, +, *, zero]], T](*)
	% expected type  [[nz_T[T, +, *, zero], nz_T[T, +, *, zero]] ->
	%    nz_T[T, +, *, zero]]
	  % proved
	nz_star_TCC1: OBLIGATION
	FORALL (x1: [nz_T[T, +, *, zero], nz_T[T, +, *, zero]]):
	    restrict[[T, T], [nz_T[T, +, *, zero], nz_T[T, +, *, zero]], T](*)(x1) /=
	     zero
	
	% Subtype TCC generated (at line 40, column 39) for  field
	% expected type  division_ring
	  % proved
	field_is_division_ring: OBLIGATION
	FORALL (x: field): division_ring?(x)
	
	% Judgement subtype TCC generated (at line 41, column 39) for  x
	% expected type  integral_domain[T, +, *, zero]
	  % proved
	field_is_integral_domain: OBLIGATION
	FORALL (x: field): integral_domain?[T, +, *, zero](x)
	
	% Existence TCC generated (at line 43, column 31) for
	% abelian_group?[nz_T[T, +, *, zero], nz_star, one]
	  % proved
	field_is_abelian_group_TCC1: OBLIGATION
	EXISTS (x: nz_T[T, +, *, zero]): TRUE
	
	% Subtype TCC generated (at line 43, column 31) for
	% abelian_group?[nz_T[T, +, *, zero], nz_star, one]
	% expected type  nz_T[T, +, *, zero]
	  % proved
	field_is_abelian_group_TCC2: OBLIGATION
	one /= zero
	
	% Subtype TCC generated (at line 33, column 31) for
	% inv[nz_T[T, +, *, zero],
	%     restrict[[T, T], [nz_T[T, +, *, zero], nz_T[T, +, *, zero]], T]
	%         (*),
	%     one]
	% expected type  [[nz_T[T, +, *, zero], nz_T[T, +, *, zero]] ->
	%    nz_T[T, +, *, zero]]
	  % proved
	mult_div_TCC1: OBLIGATION
	FORALL (x1: [nz_T[T, +, *, zero], nz_T[T, +, *, zero]]): *(x1) /= zero
	
	% The subtype TCC (at line 33, column 31) in decl nil for
	% term generated from mult_div
	%  inv[nz_T[T, +, *, zero],
	%     restrict[[T, T], [nz_T[T, +, *, zero], nz_T[T, +, *, zero]], T]
	%         (*),
	%     one]
	% expected type  nz_T[T, +, *, zero]
	% Subtype TCC generated (at line 47, column 53) for  (n0x * n0y)
	% expected type  nz_T[T, +, *, zero]
	  % proved
	div_times_TCC1: OBLIGATION
	FORALL (n0x, n0y: nz_T[T, +, *, zero]): (n0x * n0y) /= zero
	
	% The subtype TCC (at line 33, column 31) in decl nil for
	 % term generated from mult_div
	    %  inv[nz_T[T, +, *, zero],
	    %     restrict[[T, T], [nz_T[T, +, *, zero], nz_T[T, +, *, zero]], T]
	    %         (*),
	    %     one]
	    % expected type  nz_T[T, +, *, zero]
	  % is subsumed by field_is_abelian_group_TCC2
	
	% The subtype TCC (at line 49, column 67) in decl nil for
	 % term generated from add_div  (n0x * n0y)
	    % expected type  nz_T[T, +, *, zero]
	  % is subsumed by div_times_TCC1

END field_TCCS