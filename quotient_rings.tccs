%% TCCs associated with theory quotient_rings
%% This file was automatically generated by PVS, please **do not modify** by hand.
quotient_rings_TCCS: THEORY BEGIN

	% Assuming TCC generated (at line 33, column 14) for
	% ring_cosets_lemmas[T, +, *, zero]
	% generated from assumption ring_cosets_lemmas.fullset_is_ring
	  % proved
	IMP_ring_cosets_lemmas_TCC1: OBLIGATION
	ring?[T, +, *, zero](fullset[T])
	
	% Subtype TCC generated (at line 51, column 17) for  a + I
	% expected type  coset[T, +](R, I)
	  % proved
	add_charac_TCC1: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R), a, b: (R)):
	    coset?[T, +](R, I)((+[T, +])(a, I))
	
	% Subtype TCC generated (at line 51, column 21) for  b + I
	% expected type  coset[T, +](R, I)
	  % proved
	add_charac_TCC2: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R), a, b: (R)):
	    coset?[T, +](R, I)((+[T, +])(b, I))
	
	% The subtype TCC (at line 63, column 21) in decl nil for
	% term generated from product_charac  a + I
	% expected type  coset[T, +](R, I)
	% The subtype TCC (at line 63, column 25) in decl nil for
	% term generated from product_charac  b + I
	% expected type  coset[T, +](R, I)
	% Subtype TCC generated (at line 67, column 22) for  A
	% expected type  left_coset[T, +](R, I)
	  % proved
	lprod_equal_rprod_TCC1: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R),
	          A, B: coset[T, +](R, I)):
	    left_coset?[T, +](R, I)(A)
	
	% The subtype TCC (at line 63, column 21) in decl nil for
	 % term generated from product_charac  a + I
	    % expected type  coset[T, +](R, I)
	  % is subsumed by add_charac_TCC1
	% The subtype TCC (at line 63, column 25) in decl nil for
	 % term generated from product_charac  b + I
	    % expected type  coset[T, +](R, I)
	  % is subsumed by add_charac_TCC2
	
	% Subtype TCC generated (at line 67, column 24) for  B
	% expected type  left_coset[T, +](R, I)
	  % proved
	lprod_equal_rprod_TCC2: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R),
	          A, B: coset[T, +](R, I)):
	    left_coset?[T, +](R, I)(B)
	
	% Subtype TCC generated (at line 67, column 43) for  A
	% expected type  right_coset[T, +](R, I)
	  % proved
	lprod_equal_rprod_TCC3: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R),
	          A, B: coset[T, +](R, I)):
	    right_coset?[T, +](R, I)(A)
	
	% Subtype TCC generated (at line 67, column 45) for  B
	% expected type  right_coset[T, +](R, I)
	  % proved
	lprod_equal_rprod_TCC4: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R),
	          A, B: coset[T, +](R, I)):
	    right_coset?[T, +](R, I)(B)
	
	% Existence TCC generated (at line 79, column 9) for
	% abelian_group?[coset[T, +](R, I), add(R, I), I]
	  % proved
	quotient_group_is_abelian_group_TCC1: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R)):
	    EXISTS (x: coset[T, +](R, I)): TRUE
	
	% Subtype TCC generated (at line 79, column 9) for
	% abelian_group?[coset[T, +](R, I), add(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	  % proved
	quotient_group_is_abelian_group_TCC2: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R)):
	    FORALL (x1: [coset[T, +](R, I), coset[T, +](R, I)]):
	      coset?[T, +](R, I)(add[T, +](R, I)(x1))
	
	% Subtype TCC generated (at line 79, column 9) for
	% abelian_group?[coset[T, +](R, I), add(R, I), I]
	% expected type  coset[T, +](R, I)
	  % proved
	quotient_group_is_abelian_group_TCC3: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R)):
	    coset?[T, +](R, I)(I)
	
	% Subtype TCC generated (at line 83, column 8) for
	% ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	  % proved
	quotient_group_is_ring_TCC1: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R)):
	    FORALL (x1: [coset[T, +](R, I), coset[T, +](R, I)]):
	      coset?[T, +](R, I)(product[T, +, *](R, I)(x1))
	
	% The existence TCC (at line 83, column 8) in decl nil for
	% term generated from quotient_group_is_ring
	%  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% The subtype TCC (at line 83, column 8) in decl nil for
	% term generated from quotient_group_is_ring
	%  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	% The subtype TCC (at line 83, column 8) in decl nil for
	% term generated from quotient_group_is_ring
	%  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  coset[T, +](R, I)
	% The existence TCC (at line 87, column 8) in decl nil for
	% term generated from fullset_quot_group_is_ring
	%  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% The subtype TCC (at line 87, column 8) in decl nil for
	% term generated from fullset_quot_group_is_ring
	%  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	% The subtype TCC (at line 87, column 8) in decl nil for
	% term generated from fullset_quot_group_is_ring
	%  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	% The subtype TCC (at line 87, column 8) in decl nil for
	% term generated from fullset_quot_group_is_ring
	%  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  coset[T, +](R, I)
	% Subtype TCC generated (at line 91, column 35) for  a + I
	% expected type  coset[T, +](R, I)
	  % proved
	inv_charac_TCC1: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R), a: (R)):
	    coset?[T, +](R, I)((+[T, +])(a, I))
	
	% The subtype TCC (at line 83, column 8) in decl nil for
	 % term generated from quotient_group_is_ring
	    %  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	    % expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	                   %    coset[T, +](R, I)]
	  % is subsumed by quotient_group_is_abelian_group_TCC2
	% The subtype TCC (at line 83, column 8) in decl nil for
	 % term generated from quotient_group_is_ring
	    %  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	    % expected type  coset[T, +](R, I)
	  % is subsumed by quotient_group_is_abelian_group_TCC3
	% The existence TCC (at line 87, column 8) in decl nil for
	 % term generated from fullset_quot_group_is_ring
	    %  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	  % is subsumed by quotient_group_is_abelian_group_TCC1
	% The subtype TCC (at line 87, column 8) in decl nil for
	 % term generated from fullset_quot_group_is_ring
	    %  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	    % expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	                   %    coset[T, +](R, I)]
	  % is subsumed by quotient_group_is_abelian_group_TCC2
	% The subtype TCC (at line 87, column 8) in decl nil for
	 % term generated from fullset_quot_group_is_ring
	    %  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	    % expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	                   %    coset[T, +](R, I)]
	  % is subsumed by quotient_group_is_ring_TCC1
	% The subtype TCC (at line 87, column 8) in decl nil for
	 % term generated from fullset_quot_group_is_ring
	    %  ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	    % expected type  coset[T, +](R, I)
	  % is subsumed by quotient_group_is_abelian_group_TCC3
	
	% Assuming TCC generated (at line 91, column 8) for
	% inv[coset[T, +](R, I), add(R, I), I]
	% generated from assumption group.fullset_is_group
	  % proved
	inv_charac_TCC2: OBLIGATION
	FORALL (R: ring[T, +, *, zero], I: ideal[T, +, *, zero](R), a: (R)):
	    group?[coset[T, +](R, I), add(R, I), I](fullset[coset[T, +](R, I)])
	
	% The existence TCC (at line 91, column 8) in decl nil for
	% term generated from inv_charac
	%  inv[coset[T, +](R, I), add(R, I), I]
	% The subtype TCC (at line 91, column 8) in decl nil for
	% term generated from inv_charac
	%  inv[coset[T, +](R, I), add(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	% The subtype TCC (at line 91, column 8) in decl nil for
	% term generated from inv_charac
	%  inv[coset[T, +](R, I), add(R, I), I]
	% expected type  coset[T, +](R, I)
	% Subtype TCC generated (at line 95, column 56) for
	% restrict[set[T], coset[T, +](R, I), bool](R / I)
	% expected type  (ring?)
	  % proved
	coset_subring_TCC1: OBLIGATION
	FORALL (I: set[T], R: ring[T, +, *, zero], S: set[T]):
	    ideal?(I, R) AND subring?(S, R) IMPLIES
	     ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	         (restrict[set[T], coset[T, +](R, I), bool](/[T, +](R, I)))
	
	% The subtype TCC (at line 91, column 8) in decl nil for
	 % term generated from inv_charac
	    %  inv[coset[T, +](R, I), add(R, I), I]
	    % expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	                   %    coset[T, +](R, I)]
	  % is subsumed by quotient_group_is_abelian_group_TCC2
	% The subtype TCC (at line 91, column 8) in decl nil for
	 % term generated from inv_charac
	    %  inv[coset[T, +](R, I), add(R, I), I]
	    % expected type  coset[T, +](R, I)
	  % is subsumed by quotient_group_is_abelian_group_TCC3
	
	% Existence TCC generated (at line 95, column 7) for
	% subring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	  % proved
	coset_subring_TCC2: OBLIGATION
	FORALL (I: set[T], R: ring[T, +, *, zero], S: set[T]):
	    ideal?(I, R) AND subring?(S, R) IMPLIES EXISTS (x: coset[T, +](R, I)): TRUE
	
	% Subtype TCC generated (at line 95, column 7) for
	% subring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	  % proved
	coset_subring_TCC3: OBLIGATION
	FORALL (I: set[T], R: ring[T, +, *, zero], S: set[T]):
	    ideal?(I, R) AND subring?(S, R) IMPLIES
	     FORALL (x1: [coset[T, +](R, I), coset[T, +](R, I)]):
	       coset?[T, +](R, I)(add[T, +](R, I)(x1))
	
	% Subtype TCC generated (at line 95, column 7) for
	% subring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	  % proved
	coset_subring_TCC4: OBLIGATION
	FORALL (I: set[T], R: ring[T, +, *, zero], S: set[T]):
	    ideal?(I, R) AND subring?(S, R) IMPLIES
	     FORALL (x1: [coset[T, +](R, I), coset[T, +](R, I)]):
	       coset?[T, +](R, I)(product[T, +, *](R, I)(x1))
	
	% Subtype TCC generated (at line 95, column 7) for
	% subring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  coset[T, +](R, I)
	  % proved
	coset_subring_TCC5: OBLIGATION
	FORALL (I: set[T], R: ring[T, +, *, zero], S: set[T]):
	    ideal?(I, R) AND subring?(S, R) IMPLIES coset?[T, +](R, I)(I)
	
	% Subtype TCC generated (at line 99, column 54) for
	% restrict[set[T], coset[T, +](R, I), bool](R / I)
	% expected type  (ring?)
	  % proved
	coset_ideal_TCC1: OBLIGATION
	FORALL (I: set[T], R: ring[T, +, *, zero], S: set[T]):
	    ideal?(I, R) AND ideal?(S, R) IMPLIES
	     ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	         (restrict[set[T], coset[T, +](R, I), bool](/[T, +](R, I)))
	
	% Subtype TCC generated (at line 99, column 7) for
	% ideal?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	  % proved
	coset_ideal_TCC2: OBLIGATION
	FORALL (I: set[T], R: ring[T, +, *, zero], S: set[T]):
	    ideal?(I, R) AND ideal?(S, R) IMPLIES
	     FORALL (x1: [coset[T, +](R, I), coset[T, +](R, I)]):
	       coset?[T, +](R, I)(add[T, +](R, I)(x1))
	
	% Subtype TCC generated (at line 99, column 7) for
	% ideal?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	  % proved
	coset_ideal_TCC3: OBLIGATION
	FORALL (I: set[T], R: ring[T, +, *, zero], S: set[T]):
	    ideal?(I, R) AND ideal?(S, R) IMPLIES
	     FORALL (x1: [coset[T, +](R, I), coset[T, +](R, I)]):
	       coset?[T, +](R, I)(product[T, +, *](R, I)(x1))
	
	% Subtype TCC generated (at line 99, column 7) for
	% ideal?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  coset[T, +](R, I)
	  % proved
	coset_ideal_TCC4: OBLIGATION
	FORALL (I: set[T], R: ring[T, +, *, zero], S: set[T]):
	    ideal?(I, R) AND ideal?(S, R) IMPLIES coset?[T, +](R, I)(I)
	
	% Existence TCC generated (at line 103, column 8) for
	% commutative_ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	  % proved
	commutative_quotient_ring_TCC1: OBLIGATION
	FORALL (R: (commutative_ring?[T, +, *, zero]), I: ideal[T, +, *, zero](R)):
	    EXISTS (x: coset[T, +](R, I)): TRUE
	
	% Subtype TCC generated (at line 103, column 8) for
	% commutative_ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	  % proved
	commutative_quotient_ring_TCC2: OBLIGATION
	FORALL (R: (commutative_ring?[T, +, *, zero]), I: ideal[T, +, *, zero](R)):
	    FORALL (x1: [coset[T, +](R, I), coset[T, +](R, I)]):
	      coset?[T, +](R, I)(add[T, +](R, I)(x1))
	
	% Subtype TCC generated (at line 103, column 8) for
	% commutative_ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	%    coset[T, +](R, I)]
	  % proved
	commutative_quotient_ring_TCC3: OBLIGATION
	FORALL (R: (commutative_ring?[T, +, *, zero]), I: ideal[T, +, *, zero](R)):
	    FORALL (x1: [coset[T, +](R, I), coset[T, +](R, I)]):
	      coset?[T, +](R, I)(product[T, +, *](R, I)(x1))
	
	% Subtype TCC generated (at line 103, column 8) for
	% commutative_ring?[coset[T, +](R, I), add(R, I), product(R, I), I]
	% expected type  coset[T, +](R, I)
	  % proved
	commutative_quotient_ring_TCC4: OBLIGATION
	FORALL (R: (commutative_ring?[T, +, *, zero]), I: ideal[T, +, *, zero](R)):
	    coset?[T, +](R, I)(I)
	
	% The subtype TCC (at line 107, column 40) in decl nil for
	 % term generated from lcoset_power_nat  a + I
	    % expected type  coset[T, +](R, I)
	  % is subsumed by inv_charac_TCC1
	% The existence TCC (at line 107, column 13) in decl nil for
	 % term generated from lcoset_power_nat
	    %  ^[coset[T, +](R, I), add(R, I), I]
	  % is subsumed by quotient_group_is_abelian_group_TCC1
	% The subtype TCC (at line 107, column 13) in decl nil for
	 % term generated from lcoset_power_nat
	    %  ^[coset[T, +](R, I), add(R, I), I]
	    % expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	                   %    coset[T, +](R, I)]
	  % is subsumed by quotient_group_is_abelian_group_TCC2
	% The subtype TCC (at line 107, column 13) in decl nil for
	 % term generated from lcoset_power_nat
	    %  ^[coset[T, +](R, I), add(R, I), I]
	    % expected type  coset[T, +](R, I)
	  % is subsumed by quotient_group_is_abelian_group_TCC3
	% The subtype TCC (at line 111, column 40) in decl nil for
	 % term generated from lcoset_power_int  a + I
	    % expected type  coset[T, +](R, I)
	  % is subsumed by inv_charac_TCC1
	% The existence TCC (at line 111, column 13) in decl nil for
	 % term generated from lcoset_power_int
	    %  ^[coset[T, +](R, I), add(R, I), I]
	  % is subsumed by quotient_group_is_abelian_group_TCC1
	% The subtype TCC (at line 111, column 13) in decl nil for
	 % term generated from lcoset_power_int
	    %  ^[coset[T, +](R, I), add(R, I), I]
	    % expected type  [[coset[T, +](R, I), coset[T, +](R, I)] ->
	                   %    coset[T, +](R, I)]
	  % is subsumed by quotient_group_is_abelian_group_TCC2

END quotient_rings_TCCS