(products_subgroups
 (IMP_normal_subgroups_TCC1 0
  (IMP_normal_subgroups_TCC1-1 nil 3529777527
   ("" (rewrite "fullset_is_group") nil nil)
   ((fullset_is_group formula-decl nil products_subgroups nil)) nil
   (IMP_normal_subgroups assuming
    "algebra@normal_subgroups[products_subgroups.T, products_subgroups.*, products_subgroups.one].normal_subgroups"
    "fullset_is_group: ASSUMPTION group_def[normal_subgroups.T, normal_subgroups.*, normal_subgroups.one].group?(sets[normal_subgroups.T].fullset)")))
 (HK_subgroup 0
  (HK_subgroup-1 nil 3524766271
   ("" (skosimp*)
    (("" (lemma "subgroup_def")
      (("" (inst?)
        (("" (prop)
          (("1" (hide (-1 2 3))
            (("1" (expand "nonempty?")
              (("1" (expand "empty?")
                (("1" (expand "member")
                  (("1" (inst -1 "one")
                    (("1" (expand "prod")
                      (("1" (inst 1 "one" "one")
                        (("1" (rewrite "one_left") nil nil)
                         ("2" (typepred "N!1")
                          (("2" (expand* "group?" "monoid?" "monad?")
                            (("2" (flatten)
                              (("2" (expand "member") (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (typepred "H!1")
                          (("3" (expand* "group?" "monoid?" "monad?")
                            (("3" (flatten)
                              (("3" (expand "member") (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide (-1 2 3))
            (("2" (expand* "subset?" "member")
              (("2" (skosimp)
                (("2" (expand "prod")
                  (("2" (skosimp*)
                    (("2" (typepred "h!1" "k!1" "H!1" "N!1")
                      (("2" (expand* "subgroup?" "subset?" "member")
                        (("2" (hide (-3 -5))
                          (("2" (inst -3 "h!1")
                            (("2" (inst -4 "k!1")
                              (("2" (assert)
                                (("2" (replaces -5)
                                  (("2" (rewrite "product_in") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide (2 3))
            (("3" (expand "star_closed?")
              (("3" (skosimp)
                (("3" (expand* "member" "prod")
                  (("3" (typepred "x!1" "y!1")
                    (("3" (expand "prod")
                      (("3" (skosimp*)
                        (("3"
                          (inst 1 "h!1 * h!2" "inv(h!2) * k!1 * h!2 * k!2")
                          (("1" (rewrite "assoc")
                            (("1" (rewrite "assoc")
                              (("1" (rewrite "assoc")
                                (("1" (lemma "assoc")
                                  (("1" (inst?)
                                    (("1" (replace -1 1 rl)
                                      (("1"
                                        (rewrite "inv_right")
                                        (("1"
                                          (rewrite "one_right")
                                          (("1"
                                            (replaces -2)
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (rewrite "assoc")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (-1 -2))
                            (("2" (lemma "nsg_prop2")
                              (("2" (inst -1 "h!2" "k!1" "G!1" "N!1")
                                (("2" (typepred "k!1" "k!2")
                                  (("2" (prop)
                                    (("1" (lemma "product_in")
                                      (("1"
                                        (inst
                                         -1
                                         "N!1"
                                         "inv(h!2) * k!1 * h!2"
                                         "k!2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (hide-all-but 1)
                                      (("2"
                                        (typepred "h!2" "H!1")
                                        (("2"
                                          (expand*
                                           "subgroup?"
                                           "subset?"
                                           "member")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide -)
                            (("3" (typepred "h!1" "h!2")
                              (("3" (rewrite "product_in") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (hide (2 3))
            (("4" (expand "inv_closed?")
              (("4" (skosimp)
                (("4" (expand "member")
                  (("4" (expand "prod")
                    (("4" (typepred "x!1")
                      (("4" (expand "prod")
                        (("4" (skosimp)
                          (("4"
                            (inst 1 "inv(h!1)" "h!1 * inv(k!1) * inv(h!1)")
                            (("1" (replaces -1)
                              (("1" (rewrite "inv_star")
                                (("1" (rewrite "assoc")
                                  (("1" (rewrite "assoc") nil nil)) nil))
                                nil))
                              nil)
                             ("2" (lemma "nsg_prop")
                              (("2" (inst -1 "h!1" "inv(k!1)" "G!1" "N!1")
                                (("2" (prop)
                                  (("1" (hide-all-but 1)
                                    (("1" (typepred "h!1" "H!1")
                                      (("1"
                                        (expand*
                                         "subgroup?"
                                         "subset?"
                                         "member")
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (hide-all-but 1)
                                    (("2" (typepred "k!1")
                                      (("2" (rewrite "inv_in") nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide -)
                              (("3" (typepred "h!1")
                                (("3" (rewrite "inv_in") nil nil)) nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" products_subgroups nil)
    (* formal-const-decl "[T, T -> T]" products_subgroups nil)
    (T formal-type-decl nil products_subgroups nil)
    (subgroup_def formula-decl nil group algebra)
    (nsg_prop formula-decl nil normal_subgroups algebra)
    (inv_in formula-decl nil group algebra)
    (inv_left formula-decl nil group algebra)
    (left_identity formula-decl nil monad algebra)
    (inv_star formula-decl nil group algebra)
    (k!1 skolem-const-decl "(N!1)" products_subgroups nil)
    (h!1 skolem-const-decl "(H!1)" products_subgroups nil)
    (inv_closed? const-decl "bool" group algebra)
    (h!1 skolem-const-decl "(H!1)" products_subgroups nil)
    (h!2 skolem-const-decl "(H!1)" products_subgroups nil)
    (k!2 skolem-const-decl "(N!1)" products_subgroups nil)
    (k!1 skolem-const-decl "(N!1)" products_subgroups nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group algebra)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (one_right formula-decl nil group algebra)
    (inv_right formula-decl nil group algebra)
    (assoc formula-decl nil group algebra)
    (nsg_prop2 formula-decl nil normal_subgroups algebra)
    (normal_subgroup type-eq-decl nil normal_subgroups algebra)
    (normal_subgroup? const-decl "boolean" normal_subgroups algebra)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (product_in formula-decl nil group algebra)
    (TRUE const-decl "bool" booleans nil) (subset? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (monad? const-decl "bool" monad_def algebra)
    (monoid? const-decl "bool" monoid_def algebra)
    (one_left formula-decl nil group algebra)
    (N!1 skolem-const-decl "subgroup[T, *, one](G!1)" products_subgroups nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" products_subgroups nil)
    (G!1 skolem-const-decl "group[T, *, one]" products_subgroups nil)
    (member const-decl "bool" sets nil) (nonempty? const-decl "bool" sets nil)
    (subgroup type-eq-decl nil group algebra)
    (subgroup? const-decl "bool" group_def algebra)
    (prod const-decl "set[T]" products_subgroups nil)
    (group nonempty-type-eq-decl nil group algebra)
    (group? const-decl "bool" group_def algebra)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (HK_subgroup_permute 0
  (HK_subgroup_permute-1 nil 3524767805
   ("" (skosimp)
    (("" (prop)
      (("1" (decompose-equality 1)
        (("1" (iff)
          (("1" (prop)
            (("1" (expand "subgroup?")
              (("1" (flatten)
                (("1" (lemma "inv_in")
                  (("1" (inst -1 "prod(H!1, K!1)" "x!1")
                    (("1" (expand "prod" (-1 1))
                      (("1" (skosimp)
                        (("1" (typepred "h!1" "k!1")
                          (("1" (lemma "inv_in")
                            (("1" (copy -1)
                              (("1" (inst -1 "H!1" "h!1")
                                (("1" (inst -2 "K!1" "k!1")
                                  (("1" (inst 1 "inv(k!1)" "inv(h!1)")
                                    (("1" (lemma "inv_star")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (replace -6 1 rl)
                                            (("1"
                                              (rewrite "inv_inv")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "prod" -1)
              (("2" (skosimp*)
                (("2" (typepred "h!1" "k!1")
                  (("2" (lemma "inv_in")
                    (("2" (copy -1)
                      (("2" (inst -1 "H!1" "k!1")
                        (("2" (inst -2 "K!1" "h!1")
                          (("2" (case "prod(H!1, K!1)(inv(h!1 * k!1))")
                            (("1" (expand "subgroup?")
                              (("1" (flatten)
                                (("1" (lemma "inv_in")
                                  (("1"
                                    (inst -1 "prod(H!1, K!1)"
                                     "inv(h!1 * k!1)")
                                    (("1" (rewrite "inv_inv")
                                      (("1" (assert) nil nil)) nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (-6 2))
                              (("2" (expand "prod")
                                (("2" (inst 1 "inv(k!1)" "inv(h!1)")
                                  (("2" (rewrite "inv_star") nil nil)) nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "subgroup_def")
        (("2" (inst?)
          (("2" (prop)
            (("1" (hide (-1 2 3))
              (("1" (expand "nonempty?")
                (("1" (expand "empty?")
                  (("1" (inst -1 "one")
                    (("1" (expand "member")
                      (("1" (expand "prod")
                        (("1" (inst 1 "one" "one")
                          (("1" (rewrite "one_left") nil nil)
                           ("2" (typepred "K!1")
                            (("2" (expand* "group?" "monoid?" "monad?")
                              (("2" (flatten)
                                (("2" (hide-all-but (-2 1))
                                  (("2" (expand "member")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "H!1")
                            (("3" (expand* "group?" "monoid?" "monad?")
                              (("3" (flatten)
                                (("3" (hide-all-but (-2 1))
                                  (("3" (expand "member")
                                    (("3" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide (-1 2 3))
              (("2" (expand* "subset?" "member")
                (("2" (skosimp)
                  (("2" (expand "prod")
                    (("2" (skosimp*)
                      (("2" (typepred "h!1" "k!1")
                        (("2" (typepred "H!1" "K!1")
                          (("2" (expand* "subgroup?" "subset?" "member")
                            (("2" (hide (-1 -3))
                              (("2" (inst -1 "h!1")
                                (("2" (inst -2 "k!1")
                                  (("2" (assert)
                                    (("2" (replaces -5)
                                      (("2" (rewrite "product_in") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide (2 3))
              (("3" (expand "star_closed?")
                (("3" (skosimp)
                  (("3" (expand "member")
                    (("3" (typepred "x!1" "y!1")
                      (("3" (expand "prod" (-1 -2))
                        (("3" (skosimp*)
                          (("3" (replaces -1)
                            (("3" (replaces -1)
                              (("3" (rewrite "assoc")
                                (("3" (lemma "assoc")
                                  (("3" (inst?)
                                    (("3" (replace -1 1 rl)
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (decompose-equality -1)
                                          (("3"
                                            (inst -1 "k!1 * h!2")
                                            (("3"
                                              (iff)
                                              (("3"
                                                (prop)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (expand "prod" -1)
                                                    (("1"
                                                      (skosimp*)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (expand "prod")
                                                          (("1"
                                                            (inst
                                                             1
                                                             "h!1 * h!3"
                                                             "k!3 * k!2")
                                                            (("1"
                                                              (rewrite
                                                               "assoc")
                                                              (("1"
                                                                (rewrite
                                                                 "assoc")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "k!3"
                                                               "k!2")
                                                              (("2"
                                                                (rewrite
                                                                 "product_in")
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "h!3"
                                                               "h!1")
                                                              (("3"
                                                                (rewrite
                                                                 "product_in")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide (2 3))
                                                  (("2"
                                                    (expand "prod")
                                                    (("2" (inst?) nil nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide (2 3))
              (("4" (expand* "inv_closed?" "member")
                (("4" (skosimp*)
                  (("4" (typepred "x!1")
                    (("4" (expand "prod" -1)
                      (("4" (skosimp*)
                        (("4" (replaces -1)
                          (("4" (rewrite "inv_star")
                            (("4" (decompose-equality -1)
                              (("4" (inst -1 "inv(k!1) * inv(h!1)")
                                (("4" (iff)
                                  (("4" (prop)
                                    (("4" (hide (2 3))
                                      (("4"
                                        (expand "prod")
                                        (("4"
                                          (inst 1 "inv(k!1)" "inv(h!1)")
                                          (("1"
                                            (typepred "h!1")
                                            (("1" (rewrite "inv_in") nil nil))
                                            nil)
                                           ("2"
                                            (typepred "k!1")
                                            (("2" (rewrite "inv_in") nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subgroup_def formula-decl nil group algebra)
    (h!1 skolem-const-decl "(H!1)" products_subgroups nil)
    (k!1 skolem-const-decl "(K!1)" products_subgroups nil)
    (inv_closed? const-decl "bool" group algebra)
    (k!2 skolem-const-decl "(K!1)" products_subgroups nil)
    (k!3 skolem-const-decl "(K!1)" products_subgroups nil)
    (h!3 skolem-const-decl "(H!1)" products_subgroups nil)
    (h!1 skolem-const-decl "(H!1)" products_subgroups nil)
    (assoc formula-decl nil group algebra)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (TRUE const-decl "bool" booleans nil)
    (product_in formula-decl nil group algebra)
    (subset? const-decl "bool" sets nil) (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (monad? const-decl "bool" monad_def algebra)
    (monoid? const-decl "bool" monoid_def algebra)
    (one_left formula-decl nil group algebra)
    (nonempty? const-decl "bool" sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (prod const-decl "set[T]" products_subgroups nil)
    (* formal-const-decl "[T, T -> T]" products_subgroups nil)
    (one formal-const-decl "T" products_subgroups nil)
    (group? const-decl "bool" group_def algebra)
    (group nonempty-type-eq-decl nil group algebra)
    (subgroup? const-decl "bool" group_def algebra)
    (subgroup type-eq-decl nil group algebra)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil products_subgroups nil)
    (k!1 skolem-const-decl "(H!1)" products_subgroups nil)
    (h!1 skolem-const-decl "(K!1)" products_subgroups nil)
    (inv_in formula-decl nil group algebra)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inv_star formula-decl nil group algebra)
    (inv_inv formula-decl nil group algebra)
    (h!1 skolem-const-decl "(H!1)" products_subgroups nil)
    (k!1 skolem-const-decl "(K!1)" products_subgroups nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group algebra)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "T" products_subgroups nil)
    (G!1 skolem-const-decl "group[T, *, one]" products_subgroups nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" products_subgroups nil)
    (K!1 skolem-const-decl "subgroup[T, *, one](G!1)" products_subgroups nil))
   shostak))
 (H_K_are_subgroups 0
  (H_K_are_subgroups-1 nil 3524768409
   ("" (skosimp)
    (("" (prop)
      (("1" (lemma "subgroup_def")
        (("1" (inst?)
          (("1" (assert)
            (("1" (hide (-1 2))
              (("1" (prop)
                (("1" (typepred "H!1")
                  (("1" (hide -1)
                    (("1" (lemma "subgroup_def")
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (expand* "subset?" "member")
                  (("2" (skosimp)
                    (("2" (expand "prod")
                      (("2" (inst 1 "x!1" "one")
                        (("1" (rewrite "one_right") nil nil)
                         ("2" (typepred "K!1")
                          (("2" (expand* "group?" "monoid?" "monad?" "member")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "H!1")
                  (("3" (hide -1)
                    (("3" (lemma "subgroup_def")
                      (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("4" (typepred "H!1")
                  (("4" (hide -1)
                    (("4" (lemma "subgroup_def")
                      (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "subgroup_def")
        (("2" (inst?)
          (("2" (assert)
            (("2" (hide (-1 2))
              (("2" (prop)
                (("1" (typepred "K!1")
                  (("1" (hide -1)
                    (("1" (lemma "subgroup_def")
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (expand* "subset?" "member")
                  (("2" (skosimp)
                    (("2" (expand "prod")
                      (("2" (inst 1 "one" "x!1")
                        (("1" (rewrite "one_left") nil nil)
                         ("2" (typepred "H!1")
                          (("2" (expand* "group?" "monoid?" "monad?" "member")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "K!1")
                  (("3" (hide -1)
                    (("3" (lemma "subgroup_def")
                      (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("4" (typepred "K!1")
                  (("4" (hide -1)
                    (("4" (lemma "subgroup_def")
                      (("4" (inst?) (("4" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x!1 skolem-const-decl "T" products_subgroups nil)
    (one_left formula-decl nil group algebra)
    (one formal-const-decl "T" products_subgroups nil)
    (* formal-const-decl "[T, T -> T]" products_subgroups nil)
    (T formal-type-decl nil products_subgroups nil)
    (subgroup_def formula-decl nil group algebra)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil) (subset? const-decl "bool" sets nil)
    (G!1 skolem-const-decl "group[T, *, one]" products_subgroups nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" products_subgroups nil)
    (x!1 skolem-const-decl "T" products_subgroups nil)
    (K!1 skolem-const-decl "subgroup[T, *, one](G!1)" products_subgroups nil)
    (one_right formula-decl nil group algebra)
    (monoid? const-decl "bool" monoid_def algebra)
    (monad? const-decl "bool" monad_def algebra)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subgroup type-eq-decl nil group algebra)
    (subgroup? const-decl "bool" group_def algebra)
    (prod const-decl "set[T]" products_subgroups nil)
    (group nonempty-type-eq-decl nil group algebra)
    (group? const-decl "bool" group_def algebra)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)))

