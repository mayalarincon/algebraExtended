(ring_greatest_common_divisor_def
 (IMP_commutative_ring_TCC1 0
  (IMP_commutative_ring_TCC1-1 nil 3858190327
   ("" (rewrite "fullset_is_commutative_ring") nil nil)
   ((fullset_is_commutative_ring formula-decl nil
     ring_greatest_common_divisor_def nil))
   nil
   (IMP_commutative_ring assuming
    "commutative_ring[ring_greatest_common_divisor_def.T, ring_greatest_common_divisor_def.+, ring_greatest_common_divisor_def.*, ring_greatest_common_divisor_def.zero].commutative_ring"
    "fullset_is_commutative_ring: ASSUMPTION ring_def[commutative_ring.T, commutative_ring.+, commutative_ring.*, commutative_ring.zero].commutative_ring?(sets[commutative_ring.T].fullset)")))
 (gcd_TCC1 0
  (gcd_TCC1-1 nil 3858190327
   ("" (skosimp)
    (("" (expand "member")
      (("" (typepred "X!1")
        (("" (expand "subset?")
          (("" (inst?)
            (("" (expand "member") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (T formal-nonempty-type-decl nil ring_greatest_common_divisor_def
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_greatest_common_divisor_def
       nil)
    (* formal-const-decl "[T, T -> T]" ring_greatest_common_divisor_def
       nil)
    (zero formal-const-decl "T" ring_greatest_common_divisor_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (commutative_ring nonempty-type-eq-decl nil commutative_ring nil))
   nil
   (gcd subtype "ring_greatest_common_divisor_def.a"
        "(ring_greatest_common_divisor_def.R)")))
 (gcd_TCC2 0
  (gcd_TCC2-1 nil 3858190327 ("" (subtype-tcc) nil nil) nil nil
   (gcd subtype "ring_greatest_common_divisor_def.d"
        "(ring_greatest_common_divisor_def.R)"))))

