(cyclic_monoid
 (IMP_monoid_TCC1 0
  (IMP_monoid_TCC1-1 nil 3294400674
   ("" (lemma "fullset_is_cyclic_monoid")
    (("" (expand "cyclic_monoid?") (("" (flatten) nil nil)) nil)) nil)
   ((cyclic_monoid? const-decl "bool" cyclic_monoid_def nil)
    (fullset_is_cyclic_monoid formula-decl nil cyclic_monoid nil))
   shostak
   (IMP_monoid assuming
    "monoid[cyclic_monoid.T, cyclic_monoid.*, cyclic_monoid.one].monoid"
    "fullset_is_monoid: ASSUMPTION monoid_def[monoid.T, monoid.*, monoid.one].monoid?(sets[monoid.T].fullset)")))
 (cyclic_monoid_TCC1 0
  (cyclic_monoid_TCC1-1 nil 3294400675
   ("" (lemma "fullset_is_cyclic_monoid") (("" (propax) nil nil)) nil)
   ((fullset_is_cyclic_monoid formula-decl nil cyclic_monoid nil)) shostak
   (cyclic_monoid subtype "sets[cyclic_monoid.T].fullset" "cyclic_monoid")))
 (cyclic_monoid_is 0
  (cyclic_monoid_is-1 nil 3294401795
   ("" (skosimp) (("" (typepred "M!1") (("" (propax) nil nil)) nil)) nil)
   ((cyclic_monoid nonempty-type-eq-decl nil cyclic_monoid nil)
    (cyclic_monoid? const-decl "bool" cyclic_monoid_def nil)
    (one formal-const-decl "T" cyclic_monoid nil)
    (* formal-const-decl "[T, T -> T]" cyclic_monoid nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil cyclic_monoid nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (cyclic_monoid_is_commutative_monoid 0
  (cyclic_monoid_is_commutative_monoid-1 nil 3294400677
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (expand "cyclic_monoid?")
        (("" (expand "commutative_monoid?")
          (("" (flatten)
            (("" (assert)
              (("" (skosimp)
                (("" (lemma "fullset_is_cyclic_monoid")
                  (("" (expand "cyclic_monoid?")
                    (("" (flatten)
                      (("" (skosimp)
                        (("" (hide -3 -4 -1)
                          (("" (expand "commutative?")
                            (("" (skosimp)
                              (("" (case "generated_set(a!2)(x!2)")
                                (("1" (case "generated_set(a!2)(y!1)")
                                  (("1" (expand "generated_set")
                                    (("1" (skosimp*)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (expand "restrict")
                                            (("1"
                                              (rewrite "power_mult")
                                              (("1"
                                                (rewrite "power_mult")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (replace -2 * rl)
                                    (("2" (expand "fullset")
                                      (("2" (propax) nil nil)) nil))
                                    nil))
                                  nil)
                                 ("2" (replace -1 * rl)
                                  (("2" (expand "fullset")
                                    (("2" (propax) nil nil)) nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cyclic_monoid nonempty-type-eq-decl nil cyclic_monoid nil)
    (cyclic_monoid? const-decl "bool" cyclic_monoid_def nil)
    (one formal-const-decl "T" cyclic_monoid nil)
    (* formal-const-decl "[T, T -> T]" cyclic_monoid nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil cyclic_monoid nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (commutative_monoid? const-decl "bool" monoid_def nil)
    (fullset_is_cyclic_monoid formula-decl nil cyclic_monoid nil)
    (power_mult formula-decl nil monoid nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (restrict const-decl "R" restrict nil) (fullset const-decl "set" sets nil)
    (generated_set const-decl "set[T]" monoid_def nil)
    (commutative? const-decl "bool" operator_defs nil))
   shostak
   (cyclic_monoid_is_commutative_monoid subtype "cyclic_monoid.x"
    "commutative_monoid[T, *, one]"))))

