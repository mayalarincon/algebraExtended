(zp_group
 (Zn_group_TCC1 0
  (q
   "(pvs::lisp (progn (pvs::pvs-ilisp-save) (pvs::lisp (pvs::pvs-errors (typecheck-file \"zp_group\" nil nil nil)))"
   3770511554 ("" (inst 1 "0") (("" (assert) nil nil)) nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "posnat" zp_group nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (Zn_group existence "" "naturalnumbers.below(zp_group.n)"))
  (Zn_group_TCC1-1 nil 3529937823 ("" (subtype-tcc) nil nil) nil nil
   (Zn_group existence "" "naturalnumbers.below(zp_group.n)")))
 (Zn_group_TCC2 0
  (Zn_group_TCC2-2 "" 3790334764 ("" (assert) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak (Zn_group subtype "0" "naturalnumbers.below(zp_group.n)"))
  (Zn_group_TCC2-1 nil 3529937823
   ("" (inst 1 "0") (("" (assert) nil nil)) nil) nil nil
   (Zn_group subtype "0" "naturalnumbers.below(zp_group.n)")))
 (Zn_group 0
  (Zn_group-1 nil 3529937987
   ("" (expand "group?")
    (("" (prop)
      (("1" (expand "monoid?")
        (("1" (prop)
          (("1" (expand "monad?")
            (("1" (prop)
              (("1" (expand "star_closed?")
                (("1" (skosimp)
                  (("1" (expand* "member" "++" "Zn")
                    (("1" (expand "restrict")
                      (("1" (typepred "rem(n)(x!1 + y!1)")
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand* "member" "Zn")
                (("2" (expand "restrict") (("2" (assert) nil nil)) nil)) nil)
               ("3" (expand "identity?")
                (("3" (skosimp)
                  (("3" (prop)
                    (("1" (expand "restrict")
                      (("1" (expand "++")
                        (("1" (typepred "x!1")
                          (("1" (hide -2) (("1" (rewrite "rem_mod") nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "restrict")
                      (("2" (expand "++") (("2" (rewrite "rem_mod") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "associative?")
            (("2" (skosimp*)
              (("2" (expand "restrict")
                (("2" (expand "++")
                  (("2" (rewrite "rem_sum1")
                    (("2" (rewrite "rem_sum1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "inv_exists?")
        (("2" (skosimp)
          (("2" (case-replace "x!1 = 0" :hide? T)
            (("1" (inst 1 "0")
              (("1" (expand "++") (("1" (rewrite "rem_zero") nil nil)) nil)
               ("2" (expand "Zn")
                (("2" (expand "restrict") (("2" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (inst 2 "rem(n)(n - x!1)")
              (("1" (expand "++")
                (("1" (rewrite "rem_mod")
                  (("1" (assert) (("1" (rewrite "rem_self") nil nil)) nil))
                  nil))
                nil)
               ("2" (expand "Zn")
                (("2" (expand "restrict") (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inv_exists? const-decl "bool" group_def algebra)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rem_self formula-decl nil modulo_arithmetic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "(Zn)" zp_group nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rem_zero formula-decl nil modulo_arithmetic nil)
    (monoid? const-decl "bool" monoid_def algebra)
    (identity? const-decl "bool" operator_defs nil)
    (rem_mod formula-decl nil modulo_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (star_closed? const-decl "bool" groupoid_def algebra)
    (++ const-decl "below(n)" zp_group nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Zn const-decl "set[below(n)]" zp_group nil)
    (member const-decl "bool" sets nil) (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "posnat" zp_group nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}" modulo_arithmetic
         nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers
     nil)
    (restrict const-decl "R" restrict nil)
    (monad? const-decl "bool" monad_def algebra)
    (rem_sum1 formula-decl nil modulo_arithmetic nil)
    (associative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def algebra))
   shostak))
 (Zn_finite 0
  (Zn_finite-1 nil 3529938145
   ("" (expand "is_finite")
    (("" (inst 1 "n" "(LAMBDA (x:(Zn)): x)")
      (("" (expand "injective?") (("" (skosimp*) nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" zp_group nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (Zn const-decl "set[below(n)]" zp_group nil)
    (below type-eq-decl nil nat_types nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   shostak))
 (Zn_card_TCC1 0
  (Zn_card_TCC1-1 nil 3529937823 ("" (rewrite "Zn_finite") nil nil)
   ((Zn_finite formula-decl nil zp_group nil)) nil
   (Zn_card subtype "zp_group.Zn" "finite_set[below(n)]")))
 (Zn_card 0
  (Zn_card-1 nil 3529938190
   ("" (lemma "card_bij[below(n)]")
    (("" (inst?)
      (("" (assert)
        (("" (hide 2)
          (("" (inst 1 "(LAMBDA (x:(Zn)): x)")
            (("" (expand "bijective?")
              (("" (prop)
                (("1" (expand "injective?") (("1" (skosimp*) nil nil)) nil)
                 ("2" (expand "surjective?")
                  (("2" (skosimp)
                    (("2" (inst?)
                      (("2" (expand "Zn")
                        (("2" (expand "restrict")
                          (("2" (typepred "y!1") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (Zn const-decl "set[below(n)]" zp_group nil)
    (bijective? const-decl "bool" functions nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (y!1 skolem-const-decl "below[n]" zp_group nil)
    (surjective? const-decl "bool" functions nil)
    (below type-eq-decl nil nat_types nil)
    (card_bij formula-decl nil finite_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" zp_group nil)
    (below type-eq-decl nil naturalnumbers nil))
   shostak)))

