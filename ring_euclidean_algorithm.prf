(ring_euclidean_algorithm
 (IMP_euclidean_domain_TCC1 0
  (IMP_euclidean_domain_TCC1-1 nil 3859538045
   ("" (lemma "fullset_is_ring_with_one") (("" (propax) nil nil)) nil)
   ((fullset_is_ring_with_one formula-decl nil ring_euclidean_algorithm
     nil))
   nil
   (IMP_euclidean_domain assuming
    "euclidean_domain[ring_euclidean_algorithm.T, ring_euclidean_algorithm.+, ring_euclidean_algorithm.*, ring_euclidean_algorithm.zero, ring_euclidean_algorithm.one].euclidean_domain"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[euclidean_domain.T, euclidean_domain.+, euclidean_domain.*, euclidean_domain.zero, euclidean_domain.one].ring_with_one?(sets[euclidean_domain.T].fullset)")))
 (euclidean_gcd_algorithm_TCC1 0
  (euclidean_gcd_algorithm_TCC1-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (singleton? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.b"
    "(sets[ring_euclidean_algorithm.T].difference(ring_euclidean_algorithm.R, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC2 0
  (euclidean_gcd_algorithm_TCC2-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (singleton? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.a"
    "(sets[ring_euclidean_algorithm.T].difference(ring_euclidean_algorithm.R, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC3 0
  (euclidean_gcd_algorithm_TCC3-1 nil 3859538045
   ("" (skeep)
    (("" (typepred "z`2")
      (("" (expand "difference")
        (("" (expand "remove")
          (("" (expand "member")
            (("" (expand "singleton") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.z`2"
    "(sets[ring_euclidean_algorithm.T].difference(d1`1, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC4 0
  (euclidean_gcd_algorithm_TCC4-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.z`1"
    "(sets[ring_euclidean_algorithm.T].difference(d1`1, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC5 0
  (euclidean_gcd_algorithm_TCC5-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (remove const-decl "set" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.b"
    "(sets[ring_euclidean_algorithm.T].difference(ring_euclidean_algorithm.R, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC6 0
  (euclidean_gcd_algorithm_TCC6-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (member const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (difference const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.a"
    "(sets[ring_euclidean_algorithm.T].difference(ring_euclidean_algorithm.R, sets[ring_euclidean_algorithm.T].singleton(ring_euclidean_algorithm.zero)))")))
 (euclidean_gcd_algorithm_TCC7 0
  (euclidean_gcd_algorithm_TCC7-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.b"
    "(ring_euclidean_algorithm.R)")))
 (euclidean_gcd_algorithm_TCC8 0
  (euclidean_gcd_algorithm_TCC8-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.rem"
    "(sets[ring_euclidean_algorithm.T].remove(ring_euclidean_algorithm.zero, ring_euclidean_algorithm.R))")))
 (euclidean_gcd_algorithm_TCC9 0
  (euclidean_gcd_algorithm_TCC9-1 nil 3859538045
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (plus_zero formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (right_identity formula-decl nil monad nil)
    (left_identity formula-decl nil monad nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (< def-decl "bool" ordinals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (euclidean_gcd_algorithm termination
    "ring_euclidean_algorithm.euclidean_gcd_algorithm(ring_euclidean_algorithm.R, ring_euclidean_algorithm.phi, ring_euclidean_algorithm.f_phi)(ring_euclidean_algorithm.b, ring_euclidean_algorithm.rem)"
    "nil")))
 (euclidean_gcd_algorithm_TCC10 0
  (euclidean_gcd_algorithm_TCC10-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.b"
    "(ring_euclidean_algorithm.R)")))
 (euclidean_gcd_algorithm_TCC11 0
  (euclidean_gcd_algorithm_TCC11-1 nil 3859538045
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (euclidean_gcd_algorithm subtype "ring_euclidean_algorithm.a"
    "(sets[ring_euclidean_algorithm.T].remove(ring_euclidean_algorithm.zero, ring_euclidean_algorithm.R))")))
 (euclidean_gcd_algorithm_TCC12 0
  (euclidean_gcd_algorithm_TCC12-1 nil 3859538045
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< def-decl "bool" ordinals nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (left_identity formula-decl nil monad nil)
    (right_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (zero_plus formula-decl nil ring nil)
    (restrict const-decl "R" restrict nil)
    (plus_zero formula-decl nil ring nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (member const-decl "bool" sets nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil
   (euclidean_gcd_algorithm termination
    "ring_euclidean_algorithm.euclidean_gcd_algorithm(ring_euclidean_algorithm.R, ring_euclidean_algorithm.phi, ring_euclidean_algorithm.f_phi)(ring_euclidean_algorithm.b, ring_euclidean_algorithm.a)"
    "nil")))
 (Euclid_theorem_TCC1 0
  (Euclid_theorem_TCC1-1 nil 3859538045
   ("" (skeep)
    (("" (prop)
      (("1" (expand "empty?")
        (("1" (inst -1 "a")
          (("1" (expand "member")
            (("1" (expand "extend") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset?")
        (("2" (skeep)
          (("2" (expand "member")
            (("2" (expand "extend") (("2" (prop) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (extend const-decl "R" extend nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil
   (Euclid_theorem subtype
    "extend[ring_euclidean_algorithm.T, (ring_euclidean_algorithm.R), booleans.bool, booleans.FALSE].extend({x: (ring_euclidean_algorithm.R) | booleans.OR(x = ring_euclidean_algorithm.a, x = ring_euclidean_algorithm.b)})"
    "{X | booleans.AND((booleans.NOT)(sets[ring_euclidean_algorithm.T].empty?(X)), sets[ring_euclidean_algorithm.T].subset?(X, ring_euclidean_algorithm.R))}")))
 (Euclid_theorem_TCC2 0
  (Euclid_theorem_TCC2-1 nil 3859538045
   ("" (skeep)
    (("" (prop)
      (("1" (expand "empty?")
        (("1" (inst -1 "b")
          (("1" (expand "member")
            (("1" (expand "extend")
              (("1" (prop)
                (("1" (typepred "b")
                  (("1" (expand "remove")
                    (("1" (expand "member") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset?")
        (("2" (skeep)
          (("2" (expand "member")
            (("2" (expand "extend") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (extend const-decl "R" extend nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil
   (Euclid_theorem subtype
    "extend[ring_euclidean_algorithm.T, (ring_euclidean_algorithm.R), booleans.bool, booleans.FALSE].extend({x: (ring_euclidean_algorithm.R) | booleans.OR(x = (ring_euclidean_algorithm.f_phi(ring_euclidean_algorithm.a, ring_euclidean_algorithm.b))`2, x = ring_euclidean_algorithm.b)})"
    "{X | booleans.AND((booleans.NOT)(sets[ring_euclidean_algorithm.T].empty?(X)), sets[ring_euclidean_algorithm.T].subset?(X, ring_euclidean_algorithm.R))}")))
 (Euclid_theorem 0
  (Euclid_theorem-1 nil 3859538055
   ("" (skeep)
    (("" (prop)
      (("1" (expand "gcd?" 1)
        (("1" (prop)
          (("1" (skeep)
            (("1" (expand "member")
              (("1" (expand "extend")
                (("1" (prop)
                  (("1" (replaces -1)
                    (("1" (expand "divides?")
                      (("1" (typepred "f_phi")
                        (("1" (expand "euclidean_f_phi?")
                          (("1" (inst -1 "a" "b")
                            (("1" (prop)
                              (("1"
                                (inst 1 "zero")
                                (("1"
                                  (hide-all-but (-2 1))
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (lemma
                                   "zero_is_member_R[T,+,*,zero]")
                                  (("2"
                                    (typepred "R")
                                    (("2"
                                      (expand "euclidean_domain?")
                                      (("2"
                                        (expand "euclidean_ring?")
                                        (("2"
                                          (expand "commutative_ring?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst -5 "R")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replaces -1)
                                (("2"
                                  (inst 2 "zero")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "gcd?")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (inst-cp -4 "a")
                                    (("3"
                                      (expand "member")
                                      (("3"
                                        (inst -4 "b")
                                        (("3"
                                          (prop)
                                          (("1"
                                            (expand "divides?")
                                            (("1"
                                              (skeep*)
                                              (("1"
                                                (inst
                                                 3
                                                 "x!1+inv(f_phi(a, b)`1*x)")
                                                (("1"
                                                  (replace -1 -3 rl)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (replace
                                                       -4
                                                       -2
                                                       rl)
                                                      (("1"
                                                        (hide -4)
                                                        (("1"
                                                          (rewrite
                                                           "times_associative"
                                                           :dir
                                                           rl)
                                                          (("1"
                                                            (hide -4)
                                                            (("1"
                                                              (typepred
                                                               "R")
                                                              (("1"
                                                                (expand
                                                                 "euclidean_domain?")
                                                                (("1"
                                                                  (expand
                                                                   "euclidean_ring?")
                                                                  (("1"
                                                                    (expand
                                                                     "commutative_ring?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (hide
                                                                         -3
                                                                         -4)
                                                                        (("1"
                                                                          (expand
                                                                           "commutative?")
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "f_phi(g * x!1, g * x)`1"
                                                                             "g")
                                                                            (("1"
                                                                              (expand
                                                                               "restrict")
                                                                              (("1"
                                                                                (replaces
                                                                                 -2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "cancel_right_plus[T,+,*,zero]")
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "right_distributive")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "g * x!1"
                                                                                       "(g * f_phi(g * x!1, g * x)`1) * x + f_phi(g * x!1, g * x)`2"
                                                                                       "inv((g * f_phi(g * x!1, g * x)`1) * x)")
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "plus_commutative[T,+,*,zero]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "(g * f_phi(g * x!1, g * x)`1) * x + f_phi(g * x!1, g * x)`2"
                                                                                             "inv((g * f_phi(g * x!1, g * x)`1) * x)")
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "plus_associative"
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (reveal
                                                                                                   (-9
                                                                                                    -10))
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "inv((g * f_phi(g * x!1, g * x)`1) * x) = (g * inv(f_phi(a, b)`1 * x))")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -3
                                                                                                       -4
                                                                                                       -6
                                                                                                       -7
                                                                                                       2
                                                                                                       3
                                                                                                       4)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "times_associative")
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "times_negative"
                                                                                                           :dir
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "g")
                                                                              (("2"
                                                                                (expand
                                                                                 "remove")
                                                                                (("2"
                                                                                  (expand
                                                                                   "member")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "R")
                                                  (("2"
                                                    (expand
                                                     "euclidean_domain?")
                                                    (("2"
                                                      (expand
                                                       "euclidean_ring?")
                                                      (("2"
                                                        (expand
                                                         "commutative_ring?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4)
                                                            (("2"
                                                              (lemma
                                                               "R_sum_star_closed[T,+,*,zero]")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "R")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "inv_is_member_R[T,+,*,zero]")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "R")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "R_prod_star_closed[T,+,*,zero]")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "R")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "b")
                                            (("2"
                                              (expand "remove")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replaces -1)
                    (("2" (expand "gcd?")
                      (("2" (prop)
                        (("2" (hide -3)
                          (("2" (inst -2 "b")
                            (("2" (prop)
                              (("2"
                                (hide-all-but 1)
                                (("2"
                                  (grind)
                                  (("2"
                                    (typepred "b")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "gcd?")
            (("2" (prop)
              (("2" (hide -1)
                (("2" (skeep)
                  (("2" (inst -2 "c")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (hide 1)
                          (("2" (expand "extend")
                            (("2" (prop)
                              (("1"
                                (replaces -1)
                                (("1"
                                  (copy -2)
                                  (("1"
                                    (inst -1 "(f_phi(a, b))`2 ")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (inst -3 "b")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (expand "divides?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (typepred "f_phi")
                                                  (("1"
                                                    (expand
                                                     "euclidean_f_phi?")
                                                    (("1"
                                                      (typepred "R")
                                                      (("1"
                                                        (expand
                                                         "euclidean_domain?")
                                                        (("1"
                                                          (expand
                                                           "euclidean_ring?")
                                                          (("1"
                                                            (expand
                                                             "commutative_ring?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (hide
                                                                 -3
                                                                 -4)
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "a"
                                                                   "b")
                                                                  (("1"
                                                                    (case
                                                                     "a = zero")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "zero")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "zero_is_member_R[T,+,*,zero]")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (hide
                                                                           -4)
                                                                          (("2"
                                                                            (replace
                                                                             -5
                                                                             -3
                                                                             rl)
                                                                            (("2"
                                                                              (hide
                                                                               -5)
                                                                              (("2"
                                                                                (replace
                                                                                 -4
                                                                                 -3
                                                                                 rl)
                                                                                (("2"
                                                                                  (hide
                                                                                   -4)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "commutative?")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -2
                                                                                       "f_phi(a, c * x)`1"
                                                                                       "(c * x)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "restrict")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -2)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "times_associative")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "right_distributive"
                                                                                               :dir
                                                                                               rl)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 2
                                                                                                 "((x * f_phi(a, c * x)`1) + x!1)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (lemma
                                                                                                   "R_sum_star_closed[T,+,*,zero]")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "R")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "R_prod_star_closed[T,+,*,zero]")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "R"
                                                                                                             "x"
                                                                                                             "f_phi(a, c * x)`1")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "R_prod_star_closed[T,+,*,zero]")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "R")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "c")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "remove")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "member")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "b")
                                            (("2"
                                              (expand "remove")
                                              (("2"
                                                (expand "member")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "(f_phi(a, b))`2")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -3 "b")
                                (("2"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (typepred "b")
                                    (("2"
                                      (expand "remove")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "gcd?")
        (("2" (flatten)
          (("2" (typepred "R")
            (("2" (expand "euclidean_domain?")
              (("2" (expand "euclidean_ring?")
                (("2" (expand "commutative_ring?")
                  (("2" (flatten)
                    (("2" (hide -3 -4)
                      (("2" (split)
                        (("1" (skeep)
                          (("1" (expand "member")
                            (("1" (expand "extend")
                              (("1"
                                (prop)
                                (("1"
                                  (hide -6)
                                  (("1"
                                    (expand "divides?")
                                    (("1"
                                      (inst-cp -5 "(f_phi(a, b))`2")
                                      (("1"
                                        (inst -5 "b")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (skeep*)
                                              (("1"
                                                (typepred "f_phi")
                                                (("1"
                                                  (expand
                                                   "euclidean_f_phi?")
                                                  (("1"
                                                    (inst -1 "a" "b")
                                                    (("1"
                                                      (case "a = zero")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "zero")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (replace
                                                               -7
                                                               -1
                                                               rl)
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 -1
                                                                 rl)
                                                                (("2"
                                                                  (rewrite
                                                                   "times_associative"
                                                                   :dir
                                                                   rl)
                                                                  (("2"
                                                                    (expand
                                                                     "commutative?")
                                                                    (("2"
                                                                      (inst
                                                                       -6
                                                                       "f_phi(a, g * x)`1"
                                                                       "g")
                                                                      (("1"
                                                                        (expand
                                                                         "restrict")
                                                                        (("1"
                                                                          (replaces
                                                                           -6)
                                                                          (("1"
                                                                            (rewrite
                                                                             "times_associative")
                                                                            (("1"
                                                                              (rewrite
                                                                               "right_distributive"
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (inst
                                                                                 2
                                                                                 "((f_phi(a, g * x)`1 * x) + x!1)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "R_sum_star_closed[T,+,*,zero]")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "R")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "R_prod_star_closed[T,+,*,zero]")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "R"
                                                                                             "f_phi(a, g * x)`1"
                                                                                             "x")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "g")
                                                                        (("2"
                                                                          (expand
                                                                           "remove")
                                                                          (("2"
                                                                            (expand
                                                                             "member")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "b")
                                              (("2"
                                                (expand "remove")
                                                (("2"
                                                  (expand "member")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -6)
                                  (("2"
                                    (inst -5 "b")
                                    (("2"
                                      (prop)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "b")
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst -5 "c")
                            (("2" (prop)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "member")
                                  (("2"
                                    (expand "extend" -1)
                                    (("2"
                                      (hide-all-but (-1 -2 -3 1))
                                      (("2"
                                        (prop)
                                        (("1"
                                          (typepred "f_phi")
                                          (("1"
                                            (expand "euclidean_f_phi?")
                                            (("1"
                                              (inst -1 "a" "b")
                                              (("1"
                                                (case "a = zero")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "divides?")
                                                    (("1"
                                                      (inst 1 "zero")
                                                      (("1"
                                                        (hide-all-but
                                                         (-2 -3 1))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (inst-cp
                                                         -4
                                                         "a")
                                                        (("2"
                                                          (expand
                                                           "extend")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -4
                                                               "b")
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (expand
                                                                   "divides?")
                                                                  (("1"
                                                                    (skeep*)
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       -2
                                                                       rl)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         -2
                                                                         rl)
                                                                        (("1"
                                                                          (reveal
                                                                           -4)
                                                                          (("1"
                                                                            (expand
                                                                             "commutative?")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "f_phi(c * x!1, c * x)`1"
                                                                               "(c * x)")
                                                                              (("1"
                                                                                (expand
                                                                                 "restrict")
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "cancel_right_plus[T,+,*,zero]")
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "times_associative")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "c * x!1"
                                                                                         "c * (x * f_phi(c * x!1, c * x)`1) + f_phi(c * x!1, c * x)`2"
                                                                                         "inv(c * (x * f_phi(c * x!1, c * x)`1))")
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "plus_commutative[T,+,*,zero]")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "c * (x * f_phi(c * x!1, c * x)`1) + f_phi(c * x!1, c * x)`2"
                                                                                                 "inv(c * (x * f_phi(c * x!1, c * x)`1))")
                                                                                                (("1"
                                                                                                  (replaces
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "plus_associative"
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "times_negative"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "right_distributive"
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           2
                                                                                                           "(x!1 + (inv((x * f_phi(c * x!1, c * x)`1))))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide-all-but
                                                                                                             (-7
                                                                                                              1))
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "R_sum_star_closed[T,+,*,zero]")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "R")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "inv_is_member_R[T,+,*,zero]")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "R")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "R_prod_star_closed[T,+,*,zero]")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "R"
                                                                                                                                     "x"
                                                                                                                                     "f_phi(a, c * x)`1")
                                                                                                                                    (("2"
                                                                                                                                      (reveal
                                                                                                                                       (-7
                                                                                                                                        -10))
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-6
                                                                                  1))
                                                                                (("2"
                                                                                  (lemma
                                                                                   "R_prod_star_closed[T,+,*,zero]")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "R")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "c")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "remove")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "member")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "b")
                                                                  (("2"
                                                                    (expand
                                                                     "remove")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -3 "b")
                                          (("2"
                                            (expand "extend")
                                            (("2"
                                              (prop)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred "b")
                                                (("2"
                                                  (expand "remove")
                                                  (("2"
                                                    (expand "member")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (zero_is_member_R formula-decl nil ring_basic_properties nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (ring? const-decl "bool" ring_def nil)
    (times_zero formula-decl nil ring nil)
    (plus_zero formula-decl nil ring nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil)
    (inv_is_member_R formula-decl nil ring_basic_properties nil)
    (R_prod_star_closed formula-decl nil ring_basic_properties nil)
    (times_associative formula-decl nil ring nil)
    (commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (cancel_right_plus formula-decl nil ring nil)
    (plus_commutative formula-decl nil ring nil)
    (times_negative formula-decl nil ring nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero_plus formula-decl nil ring nil)
    (negate_is_left_inv formula-decl nil ring nil)
    (plus_associative formula-decl nil ring nil)
    (right_distributive formula-decl nil ring nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (extend const-decl "R" extend nil)
    (gcd? const-decl "bool" ring_gcd_def nil))
   shostak))
 (euclidean_gcd_alg_correctness_TCC1 0
  (euclidean_gcd_alg_correctness_TCC1-1 nil 3859538045
   ("" (skeep)
    (("" (prop)
      (("1" (expand "empty?")
        (("1" (inst -1 "a")
          (("1" (expand "member")
            (("1" (expand "extend") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (expand "subset?")
        (("2" (skeep)
          (("2" (expand "member")
            (("2" (expand "extend") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (extend const-decl "R" extend nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil
   (euclidean_gcd_alg_correctness subtype
    "extend[ring_euclidean_algorithm.T, (ring_euclidean_algorithm.R), booleans.bool, booleans.FALSE].extend({x: (ring_euclidean_algorithm.R) | booleans.OR(x = ring_euclidean_algorithm.a, x = ring_euclidean_algorithm.b)})"
    "{X | booleans.AND((booleans.NOT)(sets[ring_euclidean_algorithm.T].empty?(X)), sets[ring_euclidean_algorithm.T].subset?(X, ring_euclidean_algorithm.R))}")))
 (euclidean_gcd_alg_correctness 0
  (euclidean_gcd_alg_correctness-1 nil 3859538057
   ("" (skolem * ("R" "phi" "f_phi" "_" "_"))
    ((""
      (measure-induct+
       "lex2(phi(b), IF a = zero THEN 0 ELSE phi(a) ENDIF)" ("a" "b"))
      (("1" (expand "euclidean_gcd_algorithm" 1)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (hide -2)
              (("1" (replaces -1)
                (("1" (expand "gcd?")
                  (("1" (prop)
                    (("1" (skeep)
                      (("1" (expand "member")
                        (("1" (expand "extend")
                          (("1" (prop)
                            (("1" (expand "divides?")
                              (("1"
                                (inst 1 "zero")
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "divides?")
                              (("2"
                                (inst 1 "one")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (typepred "R")
                                  (("2"
                                    (expand "euclidean_domain?")
                                    (("2"
                                      (expand "integral_domain_w_one?")
                                      (("2"
                                        (expand "monad?")
                                        (("2"
                                          (expand "member")
                                          (("2"
                                            (expand "remove")
                                            (("2"
                                              (expand "member")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst -1 "x!2")
                        (("2" (expand "member")
                          (("2" (expand "extend")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (prop)
                                  (("2"
                                    (typepred "x!2")
                                    (("2"
                                      (expand "remove")
                                      (("2"
                                        (expand "member")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide -3)
              (("2" (expand "gcd?")
                (("2" (prop)
                  (("1" (skeep)
                    (("1" (expand "member")
                      (("1" (expand "extend")
                        (("1" (prop)
                          (("1" (replaces -1)
                            (("1" (expand "divides?")
                              (("1"
                                (inst 1 "(f_phi(x!1, x!2))`1")
                                (("1"
                                  (typepred "f_phi")
                                  (("1"
                                    (expand "euclidean_f_phi?")
                                    (("1"
                                      (inst -1 "x!1" "x!2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (grind)
                                          (("1"
                                            (typepred "R")
                                            (("1"
                                              (expand
                                               "euclidean_domain?")
                                              (("1"
                                                (expand
                                                 "euclidean_ring?")
                                                (("1"
                                                  (expand
                                                   "commutative_ring?")
                                                  (("1"
                                                    (expand
                                                     "commutative?")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "x!2"
                                                         "(f_phi(x!1, x!2))`1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "x!2")
                                                          (("2"
                                                            (expand
                                                             "remove")
                                                            (("2"
                                                              (expand
                                                               "member")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "divides?")
                            (("2" (inst 1 "one")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "R")
                                (("2"
                                  (expand "euclidean_domain?")
                                  (("2"
                                    (expand "integral_domain_w_one?")
                                    (("2"
                                      (expand "monad?")
                                      (("2"
                                        (expand "member")
                                        (("2"
                                          (expand "remove")
                                          (("2"
                                            (expand "member")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst -1 "x!2")
                      (("2" (expand "member")
                        (("2" (expand "extend")
                          (("2" (prop)
                            (("2" (hide-all-but 1)
                              (("2"
                                (typepred "x!2")
                                (("2"
                                  (expand "remove")
                                  (("2"
                                    (expand "member")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (inst -2 "x!2" "(f_phi(x!1, x!2))`2")
              (("3" (prop)
                (("1" (lemma "Euclid_theorem")
                  (("1" (inst?)
                    (("1"
                      (inst -1
                       "euclidean_gcd_algorithm(R, phi, f_phi)(x!2, (f_phi(x!1, x!2))`2)")
                      (("1"
                        (case "extend[T, (R), bool, FALSE] ({x: (R) | x = (f_phi(x!1, x!2))`2 OR x = x!2}) = extend[T, (R), bool, FALSE] ({x: (R) | x = x!2 OR x = (f_phi(x!1, x!2))`2})")
                        (("1" (assert) nil nil)
                         ("2" (hide-all-but 1)
                          (("2" (decompose-equality)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 3)
                  (("2" (typepred "f_phi")
                    (("2" (expand "euclidean_f_phi?")
                      (("2" (inst -1 "x!1" "x!2")
                        (("2" (assert)
                          (("2" (prop) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (inst -1 "x!2" "x!1")
              (("4" (prop)
                (("1"
                  (case "extend[T, (R), bool, FALSE]({x: (R) | x = x!2 OR x = x!1}) = extend[T, (R), bool, FALSE]({x: (R) | x = x!1 OR x = x!2})")
                  (("1" (assert) nil nil)
                   ("2" (hide-all-but 1)
                    (("2" (decompose-equality) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (1 2)) (("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (prop)
          (("1" (expand "empty?")
            (("1" (inst -1 "y!1") (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil)
       ("3" (hide 3)
        (("3" (expand "difference") (("3" (grind) nil nil)) nil)) nil)
       ("4" (hide 2)
        (("4" (typepred "x!2") (("4" (grind) nil nil)) nil)) nil)
       ("5" (hide 3) (("5" (grind) nil nil)) nil)
       ("6" (hide 2)
        (("6" (typepred "y!2") (("6" (grind) nil nil)) nil)) nil)
       ("7" (hide-all-but 1)
        (("7" (prop)
          (("1" (expand "empty?")
            (("1" (inst -1 "x!1`1") (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil)
       ("8" (hide -1 2)
        (("8" (prop) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil)
       ("9" (hide 3) (("9" (grind) nil nil)) nil)
       ("10" (hide 2)
        (("10" (typepred "x!1`2") (("10" (grind) nil nil)) nil)) nil)
       ("11" (hide 3) (("11" (grind) nil nil)) nil)
       ("12" (hide 2)
        (("12" (typepred "y!1`2") (("12" (grind) nil nil)) nil)) nil)
       ("13" (hide 2)
        (("13" (prop)
          (("1" (expand "empty?")
            (("1" (inst -1 "a!1") (("1" (grind) nil nil)) nil)) nil)
           ("2" (grind) nil nil))
          nil))
        nil)
       ("14" (hide 3) (("14" (grind) nil nil)) nil)
       ("15" (hide 2)
        (("15" (typepred "b!1") (("15" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-nonempty-type-decl nil ring_euclidean_algorithm nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (* formal-const-decl "[T, T -> T]" ring_euclidean_algorithm nil)
    (zero formal-const-decl "T" ring_euclidean_algorithm nil)
    (one formal-const-decl "T" ring_euclidean_algorithm nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (remove const-decl "set" sets nil)
    (ordstruct type-decl nil ordstruct_adt nil)
    (ordinal? def-decl "bool" ordinals nil)
    (ordinal nonempty-type-eq-decl nil ordinals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (lex2 const-decl "ordinal" lex2 nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< def-decl "bool" ordinals nil)
    (well_founded_le formula-decl nil ordinals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (gcd? const-decl "bool" ring_gcd_def nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (euclidean_gcd_algorithm def-decl "(remove(zero, R))"
     ring_euclidean_algorithm nil)
    (Euclid_theorem formula-decl nil ring_euclidean_algorithm nil)
    (plus_zero formula-decl nil ring nil)
    (left_identity formula-decl nil monad nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (/= const-decl "boolean" notequal nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring nil)
    (identity? const-decl "bool" operator_defs nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (monad? const-decl "bool" monad_def nil)
    (right_identity formula-decl nil monad nil)
    (divides? const-decl "bool" ring_divides_def nil)
    (times_zero formula-decl nil ring nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak)))
(ring_euclidean_gcd_algorithm_Z
 (Z_TCC1 0
  (Z_TCC1-1 nil 3860852971
   ("" (lemma "integers_is_euclidean_domain") (("" (propax) nil nil))
    nil)
   ((integers_is_euclidean_domain formula-decl nil euclidean_domain
     nil))
   nil
   (Z subtype "sets[int].fullset"
    "(euclidean_domain_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].euclidean_domain?)")))
 (f_phi_Z_TCC1 0
  (f_phi_Z_TCC1-1 nil 3860852971 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil (f_phi_Z subtype "ring_euclidean_gcd_algorithm_Z.j" "posnat")))
 (f_phi_Z_TCC2 0
  (f_phi_Z_TCC2-1 nil 3860852971 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (f_phi_Z subtype
    "(number_fields.-)(ring_euclidean_gcd_algorithm_Z.j)" "posnat")))
 (phi_Z_and_f_phi_Z_ok_TCC1 0
  (phi_Z_and_f_phi_Z_ok_TCC1-1 nil 3860852971
   ("" (subtype-tcc) nil nil)
   ((remove const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (fullset const-decl "set" sets nil)
    (f_phi_Z const-decl "[int, below[abs(j)]]"
     ring_euclidean_gcd_algorithm_Z nil)
    (Z const-decl "(euclidean_domain?
     [int, restrict[[numfield, numfield], [int, int], numfield](+),
      restrict[[numfield, numfield], [int, int], numfield](*), 0, 1])"
     ring_euclidean_gcd_algorithm_Z nil))
   nil
   (phi_Z_and_f_phi_Z_ok subtype
    "ring_euclidean_gcd_algorithm_Z.f_phi_Z"
    "[[(ring_euclidean_gcd_algorithm_Z.Z), (sets[int].remove(0, ring_euclidean_gcd_algorithm_Z.Z))] -> [(ring_euclidean_gcd_algorithm_Z.Z), (ring_euclidean_gcd_algorithm_Z.Z)]]")))
 (phi_Z_and_f_phi_Z_ok_TCC2 0
  (phi_Z_and_f_phi_Z_ok_TCC2-1 nil 3860852971
   ("" (prop)
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (expand "euclidean_pair?")
      (("2" (skeep)
        (("2" (prop)
          (("1" (expand "phi_Z")
            (("1" (use "abs_mult")
              (("1" (replaces)
                (("1" (case "abs(a) >= 1 AND abs(b) >= 1")
                  (("1" (prop)
                    (("1" (lemma "both_sides_times_pos_le2")
                      (("1" (inst -1 "abs(a)" "1" "abs(b)")
                        (("1" (assert) nil nil) ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (inst 2 "f_phi_Z(a,b)`1" "f_phi_Z(a,b)`2")
            (("1" (expand "f_phi_Z")
              (("1" (case "rem(abs(b))(a) = 0")
                (("1" (replace -1 2)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (typepred "ndiv(a, b)")
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil))
                          nil)
                         ("2" (typepred "ndiv(a, -b)")
                          (("1" (expand "abs") (("1" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lift-if)
                  (("2" (prop)
                    (("1" (expand "abs")
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (assert) nil nil)
                           ("2" (typepred "ndiv(a,b)")
                            (("1" (use "commutative_mult")
                              (("1" (replaces -1) nil nil)
                               ("2"
                                (hide-all-but (-2 1))
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 3 4)
                      (("2" (expand "abs")
                        (("2" (assert)
                          (("2" (typepred "rem(b)(a)")
                            (("2" (expand "phi_Z")
                              (("2"
                                (expand "abs")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (expand "abs")
                      (("3" (lift-if)
                        (("3" (prop)
                          (("1" (typepred "ndiv(a, -b)")
                            (("1" (use "neg_mult")
                              (("1" (replaces -1) nil nil)
                               ("2" (assert) nil nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide 4)
                      (("4" (expand "abs")
                        (("4" (lift-if)
                          (("4" (prop)
                            (("1" (hide -2)
                              (("1"
                                (typepred "rem(-b)(a)")
                                (("1"
                                  (expand "phi_Z")
                                  (("1"
                                    (expand "abs")
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (prop)
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lift-if)
                                          (("2" (prop) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 3) (("3" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (grind) nil nil) ("3" (grind) nil nil)
             ("4" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (abs_mult formula-decl nil real_props nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (abs_nat_rew formula-decl nil abs_rews ints)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (phi_Z const-decl "posnat" ring_euclidean_gcd_algorithm_Z nil)
    (neg_mult formula-decl nil extra_tegies nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (commutative_mult formula-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (f_phi_Z const-decl "[int, below[abs(j)]]"
     ring_euclidean_gcd_algorithm_Z nil)
    (difference const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (Z const-decl "(euclidean_domain?
     [int, restrict[[numfield, numfield], [int, int], numfield](+),
      restrict[[numfield, numfield], [int, int], numfield](*), 0, 1])"
     ring_euclidean_gcd_algorithm_Z nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (phi_Z_and_f_phi_Z_ok subtype "ring_euclidean_gcd_algorithm_Z.phi_Z"
    "{phi: [(sets[int].difference(ring_euclidean_gcd_algorithm_Z.Z, sets[int].singleton(0))) -> naturalnumbers.nat] | euclidean_ring_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0].euclidean_pair?(ring_euclidean_gcd_algorithm_Z.Z, phi)}")))
 (phi_Z_and_f_phi_Z_ok 0
  (phi_Z_and_f_phi_Z_ok-1 nil 3860852985
   ("" (expand "euclidean_f_phi?")
    (("" (skeep)
      (("" (prop)
        (("1" (replaces)
          (("1" (expand "f_phi_Z")
            (("1" (prop)
              (("1" (lift-if)
                (("1" (prop)
                  (("1" (lemma "modulo_arithmetic.rem_zero")
                    (("1" (inst?)
                      (("1" (typepred "ndiv(0, b)")
                        (("1" (replaces -3) (("1" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (typepred "ndiv(0, -b)")
                    (("1" (lemma "modulo_arithmetic.rem_zero")
                      (("1" (inst?)
                        (("1" (replaces -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "modulo_arithmetic.rem_zero")
                (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "f_phi_Z")
          (("2" (lift-if)
            (("2" (prop)
              (("1" (expand "abs")
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (assert) nil nil)
                     ("2" (typepred "ndiv(a,b)")
                      (("1" (use "commutative_add")
                        (("1" (replaces -1) nil nil)
                         ("2" (hide-all-but (-2 1))
                          (("2" (assert) nil nil)) nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "abs")
                (("2" (assert)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (typepred "ndiv(a, -b)")
                        (("1" (use "commutative_add")
                          (("1" (replaces -1) nil nil)) nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (typepred "b")
                          (("2" (expand "remove")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "phi_Z")
          (("3" (expand "f_phi_Z")
            (("3" (typepred "rem(abs(b))(a)")
              (("3" (expand "abs")
                (("3" (lift-if)
                  (("3" (lift-if)
                    (("3" (lift-if)
                      (("3" (prop)
                        (("1" (hide-all-but -2) (("1" (grind) nil nil))
                          nil)
                         ("2" (hide-all-but -1) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((phi_Z const-decl "posnat" ring_euclidean_gcd_algorithm_Z nil)
    (commutative_add formula-decl nil number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (member const-decl "bool" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (b skolem-const-decl "(remove(0, Z))"
     ring_euclidean_gcd_algorithm_Z nil)
    (Z const-decl "(euclidean_domain?
     [int, restrict[[numfield, numfield], [int, int], numfield](+),
      restrict[[numfield, numfield], [int, int], numfield](*), 0, 1])"
     ring_euclidean_gcd_algorithm_Z nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (rem_zero formula-decl nil modulo_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (f_phi_Z const-decl "[int, below[abs(j)]]"
     ring_euclidean_gcd_algorithm_Z nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   shostak))
 (euclidean_gcd_alg_correctness_in_Z_TCC1 0
  (euclidean_gcd_alg_correctness_in_Z_TCC1-1 nil 3860852971
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (Z const-decl "(euclidean_domain?
     [int, restrict[[numfield, numfield], [int, int], numfield](+),
      restrict[[numfield, numfield], [int, int], numfield](*), 0, 1])"
     ring_euclidean_gcd_algorithm_Z nil)
    (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil
   (euclidean_gcd_alg_correctness_in_Z subtype
    "extend[int, (ring_euclidean_gcd_algorithm_Z.Z), booleans.bool, booleans.FALSE].extend({x: (ring_euclidean_gcd_algorithm_Z.Z) | booleans.OR(x = ring_euclidean_gcd_algorithm_Z.i, x = ring_euclidean_gcd_algorithm_Z.j)})"
    "{X | booleans.AND((booleans.NOT)(sets[int].empty?(X)), sets[int].subset?(X, ring_euclidean_gcd_algorithm_Z.Z))}")))
 (euclidean_gcd_alg_correctness_in_Z_TCC2 0
  (euclidean_gcd_alg_correctness_in_Z_TCC2-1 nil 3860852971
   ("" (subtype-tcc) nil nil)
   ((Z const-decl "(euclidean_domain?
     [int, restrict[[numfield, numfield], [int, int], numfield](+),
      restrict[[numfield, numfield], [int, int], numfield](*), 0, 1])"
     ring_euclidean_gcd_algorithm_Z nil)
    (fullset const-decl "set" sets nil))
   nil
   (euclidean_gcd_alg_correctness_in_Z subtype
    "ring_euclidean_gcd_algorithm_Z.i"
    "(ring_euclidean_gcd_algorithm_Z.Z)")))
 (euclidean_gcd_alg_correctness_in_Z_TCC3 0
  (euclidean_gcd_alg_correctness_in_Z_TCC3-1 nil 3860852971
   ("" (subtype-tcc) nil nil)
   ((Z const-decl "(euclidean_domain?
     [int, restrict[[numfield, numfield], [int, int], numfield](+),
      restrict[[numfield, numfield], [int, int], numfield](*), 0, 1])"
     ring_euclidean_gcd_algorithm_Z nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (euclidean_gcd_alg_correctness_in_Z subtype
    "ring_euclidean_gcd_algorithm_Z.j"
    "(sets[int].remove(0, ring_euclidean_gcd_algorithm_Z.Z))")))
 (euclidean_gcd_alg_correctness_in_Z_TCC4 0
  (euclidean_gcd_alg_correctness_in_Z_TCC4-1 nil 3860852971
   ("" (lemma "phi_Z_and_f_phi_Z_ok")
    (("" (skeep)
      (("" (prop)
        (("1" (hide -) (("1" (grind) nil nil)) nil)
         ("2" (hide -) (("2" (grind) nil nil)) nil)
         ("3" (hide -) (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (f_phi_Z const-decl "[int, below[abs(j)]]"
     ring_euclidean_gcd_algorithm_Z nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (Z const-decl "(euclidean_domain?
     [int, restrict[[numfield, numfield], [int, int], numfield](+),
      restrict[[numfield, numfield], [int, int], numfield](*), 0, 1])"
     ring_euclidean_gcd_algorithm_Z nil)
    (fullset const-decl "set" sets nil)
    (phi_Z_and_f_phi_Z_ok formula-decl nil
     ring_euclidean_gcd_algorithm_Z nil))
   nil
   (euclidean_gcd_alg_correctness_in_Z subtype
    "ring_euclidean_gcd_algorithm_Z.f_phi_Z"
    "{f_phi: [(ring_euclidean_gcd_algorithm_Z.Z), (sets[int].remove(0, ring_euclidean_gcd_algorithm_Z.Z)) -> [(ring_euclidean_gcd_algorithm_Z.Z), (ring_euclidean_gcd_algorithm_Z.Z)]] | euclidean_ring_def[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0].euclidean_f_phi?(ring_euclidean_gcd_algorithm_Z.Z, ring_euclidean_gcd_algorithm_Z.phi_Z)(f_phi)}")))
 (euclidean_gcd_alg_correctness_in_Z_TCC5 0
  (euclidean_gcd_alg_correctness_in_Z_TCC5-1 nil 3860852971
   ("" (skeep)
    (("" (expand "ring_with_one?")
      (("" (lemma "integers_is_euclidean_domain")
        (("" (expand "euclidean_domain?")
          (("" (expand "euclidean_ring?")
            (("" (flatten)
              (("" (hide -2 -3)
                (("" (expand "commutative_ring?")
                  (("" (flatten)
                    (("" (prop)
                      (("" (hide -)
                        (("" (expand "monoid?")
                          (("" (expand "monad?")
                            (("" (split)
                              (("1"
                                (expand "star_closed?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (expand "fullset")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "member")
                                (("2"
                                  (expand "fullset")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "identity?")
                                (("3"
                                  (skeep)
                                  (("3"
                                    (expand "restrict")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (expand "associative?")
                                (("4"
                                  (skeep)
                                  (("4"
                                    (expand "restrict")
                                    (("4"
                                      (lemma "associative[int,*]")
                                      (("4" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (monoid? const-decl "bool" monoid_def nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (associative formula-decl nil semigroup nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (integers_is_euclidean_domain formula-decl nil euclidean_domain
     nil))
   nil
   (euclidean_gcd_alg_correctness_in_Z assuming
    "ring_euclidean_algorithm[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.*), 0, 1].ring_euclidean_algorithm"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_euclidean_algorithm.T, ring_euclidean_algorithm.+, ring_euclidean_algorithm.*, ring_euclidean_algorithm.zero, ring_euclidean_algorithm.one].ring_with_one?(sets[ring_euclidean_algorithm.T].fullset)")))
 (euclidean_gcd_alg_correctness_in_Z 0
  (euclidean_gcd_alg_correctness_in_Z-1 nil 3860853095
   ("" (skeep)
    (("" (lemma "euclidean_gcd_alg_correctness[int,+,*,0,1]")
      (("" (inst?) nil nil)) nil))
    nil)
   ((* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (euclidean_gcd_alg_correctness formula-decl nil
     ring_euclidean_algorithm nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (Z const-decl "(euclidean_domain?
     [int, restrict[[numfield, numfield], [int, int], numfield](+),
      restrict[[numfield, numfield], [int, int], numfield](*), 0, 1])"
     ring_euclidean_gcd_algorithm_Z nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (phi_Z const-decl "posnat" ring_euclidean_gcd_algorithm_Z nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (below type-eq-decl nil nat_types nil)
    (f_phi_Z const-decl "[int, below[abs(j)]]"
     ring_euclidean_gcd_algorithm_Z nil))
   shostak)))
(ring_euclidean_gcd_algorithm_Zi
 (Zi_is_ring 0
  (Zi_is_ring-1 nil 3860353648
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (expand "ring?")
      (("" (split)
        (("1" (expand "abelian_group?")
          (("1" (split)
            (("1" (expand "group?")
              (("1" (split)
                (("1" (expand "monoid?")
                  (("1" (split)
                    (("1" (expand "monad?")
                      (("1" (split)
                        (("1" (expand "star_closed?")
                          (("1" (skeep)
                            (("1" (expand "member")
                              (("1"
                                (typepred "x" "y")
                                (("1"
                                  (hide (-1 -2 -4 -5))
                                  (("1"
                                    (expand "Zi")
                                    (("1"
                                      (skosimp*)
                                      (("1"
                                        (lemma "Re_plus")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (lemma "Im_plus")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (replace -1 * rl)
                                                    (("1"
                                                      (replace -2 * rl)
                                                      (("1"
                                                        (replace
                                                         -3
                                                         *
                                                         rl)
                                                        (("1"
                                                          (replace
                                                           -4
                                                           *
                                                           rl)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "a!1 + a!2"
                                                             "b!1 + b!2")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "member")
                          (("2" (expand "Zi")
                            (("2" (inst 1 "0" "0")
                              (("2"
                                (lemma "complex_is_0_Re_Im")
                                (("2"
                                  (inst -1 "0")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "identity?")
                          (("3" (skosimp)
                            (("3" (expand "restrict")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "associative?")
                      (("2" (skosimp)
                        (("2" (expand "restrict")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "inv_exists?")
                  (("2" (skosimp)
                    (("2" (inst 1 "-x!1")
                      (("1" (lemma "complex_diff_eq_0")
                        (("1" (inst -1 "x!1" "x!1")
                          (("1" (lemma "inverse_add")
                            (("1" (inst?) (("1" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "x!1")
                        (("2" (hide (-1 -2))
                          (("2" (expand "Zi")
                            (("2" (skosimp)
                              (("2"
                                (lemma "Re_neg")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (lemma "Im_neg")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (replace -1 * rl)
                                            (("2"
                                              (replace -2 * rl)
                                              (("2"
                                                (inst 1 "-a!1" "-b!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "commutative?")
              (("2" (skosimp)
                (("2" (expand "restrict") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "star_closed?")
          (("2" (skosimp)
            (("2" (expand "member")
              (("2" (typepred "x!1" "y!1")
                (("2" (hide-all-but (-3 -6 1))
                  (("2" (expand "Zi")
                    (("2" (skosimp*)
                      (("2" (lemma "Re_times")
                        (("2" (inst?)
                          (("2" (lemma "Im_times")
                            (("2" (inst?)
                              (("2"
                                (replace -3 * rl)
                                (("2"
                                  (replace -4 * rl)
                                  (("2"
                                    (replace -5 * rl)
                                    (("2"
                                      (replace -6 * rl)
                                      (("2"
                                        (replaces -1)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (inst
                                             1
                                             "a!1 * a!2 - b!1 * b!2"
                                             "b!1 * a!2 + a!1 * b!2")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "associative?")
          (("3" (skosimp)
            (("3" (expand "restrict")
              (("3" (lemma "associative_mult")
                (("3" (inst?) (("3" (replaces -1) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("4" (expand "left_distributive?")
          (("4" (skosimp)
            (("4" (expand "restrict") (("4" (propax) nil nil)) nil))
            nil))
          nil)
         ("5" (expand "right_distributive?")
          (("5" (skosimp)
            (("5" (expand "restrict") (("5" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring? const-decl "bool" ring_def nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (associative_mult formula-decl nil number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Im_times formula-decl nil arithmetic complex)
    (Re_times formula-decl nil arithmetic complex)
    (abelian_group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (group? const-decl "bool" group_def nil)
    (inv_exists? const-decl "bool" group_def nil)
    (minus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (inverse_add formula-decl nil number_fields nil)
    (complex_diff_eq_0 formula-decl nil arithmetic complex)
    (minus_int_is_int application-judgement "int" integers nil)
    (Im_neg formula-decl nil arithmetic complex)
    (Re_neg formula-decl nil arithmetic complex)
    (monoid? const-decl "bool" monoid_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (complex_is_0_Re_Im formula-decl nil arithmetic complex)
    (star_closed? const-decl "bool" groupoid_def nil)
    (complex_plus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (member const-decl "bool" sets nil)
    (Im_is_real application-judgement "real" complex_types complex)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (Re_is_real application-judgement "real" complex_types complex)
    (Im_plus formula-decl nil arithmetic complex)
    (Re_plus formula-decl nil arithmetic complex)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (complex nonempty-type-from-decl nil complex_types complex)
    (set type-eq-decl nil sets nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil))
   shostak))
 (Zi_is_integral_domain_w_one 0
  (Zi_is_integral_domain_w_one-1 nil 3860675193
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (expand "integral_domain_w_one?")
      (("" (split)
        (("1" (expand "integral_domain?")
          (("1" (split)
            (("1" (expand "commutative_ring?")
              (("1" (split)
                (("1" (lemma "Zi_is_ring") (("1" (propax) nil nil))
                  nil)
                 ("2" (expand "commutative?")
                  (("2" (skosimp)
                    (("2" (expand "restrict")
                      (("2" (lemma "commutative_mult")
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "nz_closed?")
              (("2" (expand "star_closed?")
                (("2" (skosimp)
                  (("2" (typepred "x!1" "y!1")
                    (("2" (hide (-1 -2 -4 -5))
                      (("2" (expand "remove")
                        (("2" (expand "member")
                          (("2" (expand "Zi")
                            (("2" (skosimp*)
                              (("2"
                                (prop)
                                (("1"
                                  (lemma "zero_times3")
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "Re_times")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (lemma "Im_times")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (replace -3 * rl)
                                          (("2"
                                            (replace -4 * rl)
                                            (("2"
                                              (replace -5 * rl)
                                              (("2"
                                                (replace -6 * rl)
                                                (("2"
                                                  (inst
                                                   1
                                                   "a!1 * a!2 - b!1 * b!2"
                                                   "b!1 * a!2 + a!1 * b!2")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (replaces -1)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "monad?")
          (("2" (split)
            (("1" (expand "star_closed?")
              (("1" (skosimp)
                (("1" (typepred "x!1" "y!1")
                  (("1" (hide (-1 -2 -4 -5))
                    (("1" (expand "remove")
                      (("1" (expand "member")
                        (("1" (expand "Zi")
                          (("1" (skosimp*)
                            (("1" (prop)
                              (("1"
                                (lemma "zero_times3")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "Re_times")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (lemma "Im_times")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (replace -3 * rl)
                                        (("2"
                                          (replace -4 * rl)
                                          (("2"
                                            (replace -5 * rl)
                                            (("2"
                                              (replace -6 * rl)
                                              (("2"
                                                (inst
                                                 1
                                                 "a!1 * a!2 - b!1 * b!2"
                                                 "b!1 * a!2 + a!1 * b!2")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (replaces -1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "member")
              (("2" (expand "remove")
                (("2" (expand "member")
                  (("2" (expand "Zi")
                    (("2" (inst 1 "1" "0")
                      (("2" (lemma "Re_real")
                        (("2" (inst?)
                          (("2" (lemma "Im_real")
                            (("2" (inst?)
                              (("2"
                                (replaces -1)
                                (("2" (replaces -1) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "identity?")
              (("3" (skosimp)
                (("3" (expand "restrict")
                  (("3" (rewrite "identity_mult") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (monad? const-decl "bool" monad_def nil)
    (identity? const-decl "bool" operator_defs nil)
    (identity_mult formula-decl nil number_fields nil)
    (Im_real formula-decl nil arithmetic complex)
    (Re_real formula-decl nil arithmetic complex)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (nz_closed? const-decl "bool" ring_nz_closed_def nil)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (member const-decl "bool" sets nil)
    (Re_times formula-decl nil arithmetic complex)
    (Im_times formula-decl nil arithmetic complex)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (zero_times3 formula-decl nil number_fields_bis complex)
    (Im_is_real application-judgement "real" complex_types complex)
    (Re_is_real application-judgement "real" complex_types complex)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (remove const-decl "set" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (complex nonempty-type-from-decl nil complex_types complex)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (commutative_mult formula-decl nil number_fields nil)
    (Zi_is_ring formula-decl nil ring_euclidean_gcd_algorithm_Zi nil))
   shostak))
 (sq_abs_Re_Im_integer_rational_pred_TCC1 0
  (sq_abs_Re_Im_integer_rational_pred_TCC1-1 nil 3860677007
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep) (("" (rewrite "sq_abs_realpred") nil nil)) nil)) nil)
   ((complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (complex nonempty-type-from-decl nil complex_types complex)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sq_abs_realpred formula-decl nil arithmetic complex))
   nil
   (sq_abs_Re_Im_integer_rational_pred subtype
    "number_fields.*(ring_euclidean_gcd_algorithm_Zi.x, arithmetic.conjugate(ring_euclidean_gcd_algorithm_Zi.x))"
    "real")))
 (sq_abs_Re_Im_integer_rational_pred 0
  (sq_abs_Re_Im_integer_rational_pred-1 nil 3860677010
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (typepred "x")
        (("" (hide (-1 -2))
          (("" (expand "Zi")
            (("" (skeep)
              (("" (lemma "sq_abs_def")
                (("" (inst?)
                  (("" (replaces -1)
                    (("" (replace -1 1 rl)
                      (("" (replace -2 1 rl)
                        (("" (hide -)
                          (("" (name-replace "A!1" "a * a + b * b")
                            (("" (typepred "a" "b")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (Re_is_real application-judgement "real" complex_types complex)
    (Im_is_real application-judgement "real" complex_types complex)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (sq_abs_def formula-decl nil arithmetic complex)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (complex nonempty-type-from-decl nil complex_types complex)
    (set type-eq-decl nil sets nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil))
   shostak))
 (times_conjugate_is_Zi 0
  (times_conjugate_is_Zi-1 nil 3860677982
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (case-replace "x = 0")
        (("1" (lemma "zero_times1")
          (("1" (inst?)
            (("1" (replaces -1)
              (("1" (expand "Zi")
                (("1" (inst 1 "0" "0")
                  (("1" (rewrite "Re_real")
                    (("1" (rewrite "Im_real") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case-replace "y = 0")
          (("1" (expand "conjugate")
            (("1" (rewrite "Re_real")
              (("1" (rewrite "Im_real")
                (("1" (lemma "zero_times1")
                  (("1" (inst-cp -1 "i")
                    (("1" (replaces -2)
                      (("1" (inst?)
                        (("1" (replaces -1)
                          (("1" (expand "Zi")
                            (("1" (inst 2 "0" "0")
                              (("1"
                                (rewrite "Re_real")
                                (("1" (rewrite "Im_real") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "Zi_is_integral_domain_w_one")
            (("2" (expand "integral_domain_w_one?")
              (("2" (expand "monad?")
                (("2" (expand "star_closed?")
                  (("2" (flatten)
                    (("2" (hide (-1 -3 -4))
                      (("2" (inst?)
                        (("1" (expand "remove")
                          (("1" (expand "member")
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (expand "remove")
                          (("2" (expand "member")
                            (("2" (prop)
                              (("1"
                                (hide 3)
                                (("1"
                                  (lemma "conjugate_nz")
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 4)
                                (("2"
                                  (expand "Zi")
                                  (("2"
                                    (expand "conjugate")
                                    (("2"
                                      (lemma "Re_def")
                                      (("2"
                                        (inst
                                         -1
                                         "Re(y)"
                                         "Re(y) - Im(y) * i")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lemma "Im_def")
                                              (("1"
                                                (inst
                                                 -1
                                                 "-Im(y)"
                                                 "Re(y) - Im(y) * i")
                                                (("1"
                                                  (prop)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "Re(y)"
                                                           "-Im(y)")
                                                          (("1"
                                                            (typepred
                                                             "y")
                                                            (("1"
                                                              (hide
                                                               (-1 -2))
                                                              (("1"
                                                                (expand
                                                                 "Zi")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (hide
                                                                       -)
                                                                      (("1"
                                                                        (typepred
                                                                         "b")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "sq_abs_Re_Im_integer_rational_pred")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 2)
                                                    (("2"
                                                      (inst 1 "Re(y)")
                                                      (("2"
                                                        (lemma
                                                         "minus_add")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (lemma
                                                               "number_fields_negative_times")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (replaces
                                                                   -1)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 2)
                                            (("2"
                                              (inst 1 "-Im(y)")
                                              (("2"
                                                (lemma "minus_add")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (lemma
                                                       "number_fields_negative_times")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (replaces -1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "remove")
                          (("3" (expand "member")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((i const-decl "complex" complex_types complex)
    (complex_minus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (Re_is_real application-judgement "real" complex_types complex)
    (Im_is_real application-judgement "real" complex_types complex)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (conjugate_nz formula-decl nil arithmetic complex)
    (nzcomplex nonempty-type-eq-decl nil complex_types complex)
    (/= const-decl "boolean" notequal nil)
    (Re_def formula-decl nil complex_types complex)
    (Im_def formula-decl nil complex_types complex)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq_abs_Re_Im_integer_rational_pred formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (minus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (number_fields_negative_times formula-decl nil number_fields_bis
     complex)
    (minus_add formula-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Re const-decl "{x | EXISTS y: z = x + y * i}" complex_types
     complex)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Im const-decl "{y | EXISTS x: z = x + y * i}" complex_types
     complex)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (monad? const-decl "bool" monad_def nil)
    (Zi_is_integral_domain_w_one formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (zero_times1 formula-decl nil number_fields_bis complex)
    (TRUE const-decl "bool" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Im_real formula-decl nil arithmetic complex)
    (Re_real formula-decl nil arithmetic complex)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (conjugate const-decl "complex" arithmetic complex)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (complex nonempty-type-from-decl nil complex_types complex)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (phi_Zi_TCC1 0
  (phi_Zi_TCC1-1 nil 3860611921
   ("" (skeep)
    (("" (lemma "sq_abs_Re_Im_integer_rational_pred")
      (("" (inst?)
        (("" (flatten)
          (("" (assert)
            (("" (hide -) (("" (rewrite "sq_abs_nonneg") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_abs_Re_Im_integer_rational_pred formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (sq_abs_nonneg formula-decl nil arithmetic complex)
    (sq_abs_realpred formula-decl nil arithmetic complex)
    (Re_is_real application-judgement "real" complex_types complex)
    (Im_is_real application-judgement "real" complex_types complex)
    (/= const-decl "boolean" notequal nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (complex nonempty-type-from-decl nil complex_types complex)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex))
   nil
   (phi_Zi subtype
    "number_fields.*(ring_euclidean_gcd_algorithm_Zi.x, arithmetic.conjugate(ring_euclidean_gcd_algorithm_Zi.x))"
    "nat")))
 (phi_Zi_is_multiplicative_TCC1 0
  (phi_Zi_is_multiplicative_TCC1-1 nil 3860623576
   ("" (skeep)
    (("" (lemma "Zi_is_integral_domain_w_one")
      (("" (expand "integral_domain_w_one?")
        (("" (expand "monad?")
          (("" (expand "star_closed?")
            (("" (flatten)
              (("" (hide (-1 -3 -4))
                (("" (inst?)
                  (("1" (expand "member")
                    (("1" (expand "remove")
                      (("1" (expand "member")
                        (("1" (prop) (("1" (replaces -1) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "remove")
                    (("2" (expand "member") (("2" (propax) nil nil))
                      nil))
                    nil)
                   ("3" (expand "remove")
                    (("3" (expand "member") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Zi_is_integral_domain_w_one formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (monad? const-decl "bool" monad_def nil)
    (/= const-decl "boolean" notequal nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (complex nonempty-type-from-decl nil complex_types complex)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nzcomplex_times_nzcomplex_is_nzcomplex application-judgement
     "nzcomplex" complex_types complex)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil))
   nil
   (phi_Zi_is_multiplicative subtype
    "number_fields.*(ring_euclidean_gcd_algorithm_Zi.x, ring_euclidean_gcd_algorithm_Zi.y)"
    "{x: (ring_euclidean_gcd_algorithm_Zi.Zi) | x /= 0}")))
 (phi_Zi_is_multiplicative 0
  (phi_Zi_is_multiplicative-1 nil 3860623578
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (expand "phi_Zi") (("" (rewrite "conjugate_times") nil nil))
        nil))
      nil))
    nil)
   ((complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (conjugate_times formula-decl nil arithmetic complex)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (complex nonempty-type-from-decl nil complex_types complex)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (/= const-decl "boolean" notequal nil)
    (phi_Zi const-decl "nat" ring_euclidean_gcd_algorithm_Zi nil))
   shostak))
 (div_rem_appx_TCC1 0
  (div_rem_appx_TCC2-1 nil 3859976448
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (hide -1)
        (("" (expand ">=")
          (("" (expand "<=")
            (("" (expand ">") (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (<= const-decl "bool" reals nil))
   nil
   (div_rem_appx subtype "ring_euclidean_gcd_algorithm_Zi.b"
    "posnat")))
 (div_rem_appx_TCC2 0
  (div_rem_appx_TCC3-1 nil 3859976448
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep) (("" (assert) nil nil)) nil)) nil)
   ((int_times_int_is_int application-judgement "int" integers nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil))
   nil
   (div_rem_appx subtype
    "(number_fields.-)(ring_euclidean_gcd_algorithm_Zi.b)" "posnat")))
 (div_rev_appx_correctness 0
  (div_rev_appx_correctness-1 nil 3859976449
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (prop)
        (("1" (expand "div_rem_appx")
          (("1" (lift-if)
            (("1" (prop)
              (("1" (typepred "rem(abs(b))(a)")
                (("1" (assert) nil nil)) nil)
               ("2" (case "rem(abs(b))(a) - abs(b) < 0")
                (("1" (expand "abs" 2 1) (("1" (assert) nil nil)) nil)
                 ("2" (typepred "rem(abs(b))(a)")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "div_rem_appx")
          (("2" (lift-if)
            (("2" (prop)
              (("1" (typepred "ndiv(a,b)")
                (("1" (expand "abs" 1)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1" (assert) nil nil)
                       ("2" (lemma "commutative_add")
                        (("2" (inst?)
                          (("1" (replaces -1) nil nil)
                           ("2" (hide (-1 -3 3))
                            (("2" (expand ">=")
                              (("2"
                                (expand "<=")
                                (("2"
                                  (expand ">")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (-2 2))
                  (("2" (expand ">=")
                    (("2" (expand "<=")
                      (("2" (expand ">") (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "ndiv(a, -b)")
                (("1" (expand "abs" 2)
                  (("1" (lift-if)
                    (("1" (prop)
                      (("1"
                        (case-replace
                         "-b * ndiv(a, -b) = b * -ndiv(a, -b)")
                        (("1" (replace -1 * rl)
                          (("1" (hide (-1 -4))
                            (("1" (lemma "commutative_add")
                              (("1"
                                (inst?)
                                (("1" (replaces -1) nil nil)
                                 ("2"
                                  (hide (-2 2))
                                  (("2"
                                    (expand ">=")
                                    (("2"
                                      (expand "<=")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide (-2 -3 2))
                          (("2" (lemma "number_fields_times_negative")
                            (("2" (inst?)
                              (("1" (replaces -1) nil nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (expand ">=")
                                  (("2"
                                    (expand "<=")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil)
               ("3" (hide 2)
                (("3" (expand "abs")
                  (("3" (lift-if)
                    (("3" (prop)
                      (("1" (hide 1) (("1" (assert) nil nil)) nil)
                       ("2" (typepred "ndiv(a,b)")
                        (("1" (lemma "associative_add")
                          (("1"
                            (inst -1 "rem(b)(a) - b" "ndiv(a,b) * b"
                             "b")
                            (("1" (replaces -1) nil nil)
                             ("2" (hide (-1 3))
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide 3) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (typepred "ndiv(a,-b)")
                (("1" (hide 3)
                  (("1" (expand "abs")
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (lemma "associative_add")
                          (("1"
                            (inst -1 "rem(-b)(a) - -b"
                             "-ndiv(a,-b) * b" " -b")
                            (("1" (replaces -1) nil nil)
                             ("2" (hide (-2 2))
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (hide (-1 2)) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (3 4)) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (<= const-decl "bool" reals nil)
    (commutative_add formula-decl nil number_fields nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number_fields_times_negative formula-decl nil number_fields_bis
     complex)
    (associative_add formula-decl nil number_fields nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (div_rem_appx const-decl "[int, int]"
     ring_euclidean_gcd_algorithm_Zi nil)
    (abs_nat_rew formula-decl nil abs_rews ints)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/= const-decl "boolean" notequal nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (f_phi_Zi_TCC1 0
  (f_phi_Zi_TCC1-1 nil 3859976448
   ("" (skeep)
    (("" (lemma "sq_abs_Re_Im_integer_rational_pred")
      (("" (inst?)
        (("1" (flatten) (("1" (prop) nil nil)) nil)
         ("2" (hide 2)
          (("2" (rewrite "times_conjugate_is_Zi") nil nil)) nil))
        nil))
      nil))
    nil)
   ((sq_abs_Re_Im_integer_rational_pred formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (times_conjugate_is_Zi formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (complex nonempty-type-from-decl nil complex_types complex)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (conjugate const-decl "complex" arithmetic complex)
    (/= const-decl "boolean" notequal nil)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex))
   nil
   (f_phi_Zi subtype
    "complex_types.Re(number_fields.*(ring_euclidean_gcd_algorithm_Zi.y, arithmetic.conjugate(ring_euclidean_gcd_algorithm_Zi.x)))"
    "int")))
 (f_phi_Zi_TCC2 0
  (f_phi_Zi_TCC2-1 nil 3860498643
   ("" (skeep)
    (("" (lemma "sq_abs_Re_Im_integer_rational_pred")
      (("" (inst?)
        (("" (flatten)
          (("" (prop)
            (("1" (hide -) (("1" (rewrite "sq_abs_realpred") nil nil))
              nil)
             ("2" (hide-all-but -1)
              (("2" (lemma "nz_sq_abs_pos")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sq_abs_Re_Im_integer_rational_pred formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types complex)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nz_sq_abs_pos formula-decl nil arithmetic complex)
    (sq_abs_realpred formula-decl nil arithmetic complex)
    (/= const-decl "boolean" notequal nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (complex nonempty-type-from-decl nil complex_types complex)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex))
   nil
   (f_phi_Zi subtype
    "number_fields.*(ring_euclidean_gcd_algorithm_Zi.x, arithmetic.conjugate(ring_euclidean_gcd_algorithm_Zi.x))"
    "{b: integers.int | b /= 0}")))
 (f_phi_Zi_TCC3 0
  (f_phi_Zi_TCC3-1 nil 3860498643
   ("" (skeep)
    (("" (lemma "sq_abs_Re_Im_integer_rational_pred")
      (("" (inst?)
        (("1" (prop) nil nil)
         ("2" (hide 2)
          (("2" (rewrite "times_conjugate_is_Zi") nil nil)) nil))
        nil))
      nil))
    nil)
   ((sq_abs_Re_Im_integer_rational_pred formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (times_conjugate_is_Zi formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (complex nonempty-type-from-decl nil complex_types complex)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (conjugate const-decl "complex" arithmetic complex)
    (/= const-decl "boolean" notequal nil)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex))
   nil
   (f_phi_Zi subtype
    "complex_types.Im(number_fields.*(ring_euclidean_gcd_algorithm_Zi.y, arithmetic.conjugate(ring_euclidean_gcd_algorithm_Zi.x)))"
    "int")))
 (f_phi_Zi_TCC4 0
  (f_phi_Zi_TCC4-1 nil 3860498643
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (expand "Zi")
        ((""
          (inst 1
           "div_rem_appx(Re(y * conjugate(x)), x * conjugate(x))`1"
           "div_rem_appx(Im(y * conjugate(x)), x * conjugate(x))`1")
          (("1" (split)
            (("1" (lemma "Re_def")
              (("1"
                (inst -1
                 "div_rem_appx(Re(y * conjugate(x)), x * conjugate(x))`1"
                 "q")
                (("1" (prop)
                  (("1" (hide (-1 -3 -4)) (("1" (replaces -1) nil nil))
                    nil)
                   ("2" (hide (-2 1 3))
                    (("2"
                      (inst 1
                       "div_rem_appx(Im(y * conjugate(x)), x * conjugate(x))`1")
                      (("1" (hide -)
                        (("1"
                          (lemma "sq_abs_Re_Im_integer_rational_pred")
                          (("1" (inst?) (("1" (prop) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide -)
                        (("2"
                          (lemma "sq_abs_Re_Im_integer_rational_pred")
                          (("2" (inst?)
                            (("1" (prop) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (rewrite "times_conjugate_is_Zi")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (- 2))
                  (("2" (lemma "sq_abs_Re_Im_integer_rational_pred")
                    (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                  nil)
                 ("3" (hide (- 2))
                  (("3" (lemma "sq_abs_Re_Im_integer_rational_pred")
                    (("3" (inst?)
                      (("1" (prop) nil nil)
                       ("2" (hide 2)
                        (("2" (rewrite "times_conjugate_is_Zi") nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "Im_def")
              (("2"
                (inst -1
                 "div_rem_appx(Im(y * conjugate(x)), x * conjugate(x))`1"
                 "q")
                (("1" (prop)
                  (("1" (hide (-1 -3 -4)) (("1" (replaces -1) nil nil))
                    nil)
                   ("2" (hide (-2 1 3))
                    (("2"
                      (inst 1
                       "div_rem_appx(Re(y * conjugate(x)), x * conjugate(x))`1")
                      (("1" (hide -)
                        (("1"
                          (lemma "sq_abs_Re_Im_integer_rational_pred")
                          (("1" (inst?) (("1" (prop) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide -)
                        (("2"
                          (lemma "sq_abs_Re_Im_integer_rational_pred")
                          (("2" (inst?)
                            (("1" (prop) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (rewrite "times_conjugate_is_Zi")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide (- 2))
                  (("2" (lemma "sq_abs_Re_Im_integer_rational_pred")
                    (("2" (inst?) (("2" (prop) nil nil)) nil)) nil))
                  nil)
                 ("3" (hide (- 2))
                  (("3" (lemma "sq_abs_Re_Im_integer_rational_pred")
                    (("3" (inst?)
                      (("1" (prop) nil nil)
                       ("2" (hide 2)
                        (("2" (rewrite "times_conjugate_is_Zi") nil
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide -)
            (("2" (lemma "sq_abs_Re_Im_integer_rational_pred")
              (("2" (inst?)
                (("1" (prop) nil nil)
                 ("2" (hide 2)
                  (("2" (rewrite "times_conjugate_is_Zi") nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide -)
            (("3" (lemma "sq_abs_Re_Im_integer_rational_pred")
              (("3" (inst?) (("3" (prop) nil nil)) nil)) nil))
            nil)
           ("4" (hide -)
            (("4" (lemma "sq_abs_Re_Im_integer_rational_pred")
              (("4" (inst?)
                (("1" (prop) nil nil)
                 ("2" (hide 2)
                  (("2" (rewrite "times_conjugate_is_Zi") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (Im_is_real application-judgement "real" complex_types complex)
    (Re_is_real application-judgement "real" complex_types complex)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (/= const-decl "boolean" notequal nil)
    (conjugate const-decl "complex" arithmetic complex)
    (set type-eq-decl nil sets nil)
    (Re const-decl "{x | EXISTS y: z = x + y * i}" complex_types
     complex)
    (i const-decl "complex" complex_types complex)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (complex nonempty-type-from-decl nil complex_types complex)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Im const-decl "{y | EXISTS x: z = x + y * i}" complex_types
     complex)
    (sq_abs_realpred formula-decl nil arithmetic complex)
    (int nonempty-type-eq-decl nil integers nil)
    (div_rem_appx const-decl "[int, int]"
     ring_euclidean_gcd_algorithm_Zi nil)
    (Im_def formula-decl nil complex_types complex)
    (Re_def formula-decl nil complex_types complex)
    (sq_abs_Re_Im_integer_rational_pred formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (times_conjugate_is_Zi formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil))
   nil
   (f_phi_Zi subtype "ring_euclidean_gcd_algorithm_Zi.q"
    "(ring_euclidean_gcd_algorithm_Zi.Zi)")))
 (f_phi_Zi_TCC5 0
  (f_phi_Zi_TCC5-1 nil 3860498643
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (typepred "y" "x")
        (("" (hide (-1 -2 -4 -5 -7))
          (("" (expand "Zi")
            (("" (skosimp*)
              (("" (replaces -6)
                (("" (lemma "Re_minus")
                  (("" (inst?)
                    (("" (replaces -1)
                      (("" (lemma "Im_minus")
                        (("" (inst?)
                          (("" (replaces -1)
                            (("" (lemma "Re_times")
                              ((""
                                (inst -1 "q" "x")
                                ((""
                                  (replaces -1)
                                  ((""
                                    (lemma "Im_times")
                                    ((""
                                      (inst -1 "q" "x")
                                      ((""
                                        (replaces -1)
                                        ((""
                                          (replace -1 1 rl)
                                          ((""
                                            (replace -2 1 rl)
                                            ((""
                                              (replace -3 1 rl)
                                              ((""
                                                (replace -4 1 rl)
                                                ((""
                                                  (hide (-1 -2 -3 -4))
                                                  ((""
                                                    (name-replace
                                                     "Req"
                                                     "div_rem_appx(Re(y * conjugate(x)), x * conjugate(x))`1")
                                                    (("1"
                                                      (name-replace
                                                       "Imq"
                                                       "div_rem_appx(Im(y * conjugate(x)), x * conjugate(x))`1")
                                                      (("1"
                                                        (lemma
                                                         "Re_def")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "Req"
                                                           "q")
                                                          (("1"
                                                            (lemma
                                                             "Im_def")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "Imq"
                                                               "q")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (replaces
                                                                   -2)
                                                                  (("1"
                                                                    (replaces
                                                                     -3)
                                                                    (("1"
                                                                      (hide
                                                                       -)
                                                                      (("1"
                                                                        (typepred
                                                                         "a!1"
                                                                         "a!2"
                                                                         "b!1"
                                                                         "b!2"
                                                                         "Req"
                                                                         "Imq")
                                                                        (("1"
                                                                          (name-replace
                                                                           "R!1"
                                                                           "a!1 - (Req * a!2 - Imq * b!2)")
                                                                          (("1"
                                                                            (name-replace
                                                                             "I!1"
                                                                             "b!1 - (Imq * a!2 + Req * b!2)")
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "R!1"
                                                                               "I!1")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-1
                                                                    -2
                                                                    1
                                                                    3))
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "Imq")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   (-1
                                                                    -2
                                                                    1
                                                                    3))
                                                                  (("3"
                                                                    (inst
                                                                     1
                                                                     "Req")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (hide
                                                                   (1
                                                                    2
                                                                    3
                                                                    5))
                                                                  (("4"
                                                                    (inst
                                                                     1
                                                                     "Req")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide (- 2))
                                                        (("2"
                                                          (lemma
                                                           "sq_abs_Re_Im_integer_rational_pred")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (prop)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide (- 2))
                                                        (("3"
                                                          (lemma
                                                           "sq_abs_Re_Im_integer_rational_pred")
                                                          (("3"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (rewrite
                                                                 "times_conjugate_is_Zi")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (- 2))
                                                      (("2"
                                                        (lemma
                                                         "sq_abs_Re_Im_integer_rational_pred")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (prop)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide (- 2))
                                                      (("3"
                                                        (lemma
                                                         "sq_abs_Re_Im_integer_rational_pred")
                                                        (("3"
                                                          (inst?)
                                                          (("1"
                                                            (prop)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (rewrite
                                                               "times_conjugate_is_Zi")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (Re_minus formula-decl nil arithmetic complex)
    (Re_times formula-decl nil arithmetic complex)
    (Im_is_real application-judgement "real" complex_types complex)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Im const-decl "{y | EXISTS x: z = x + y * i}" complex_types
     complex)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Im_def formula-decl nil complex_types complex)
    (Re_def formula-decl nil complex_types complex)
    (sq_abs_Re_Im_integer_rational_pred formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (times_conjugate_is_Zi formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (conjugate const-decl "complex" arithmetic complex)
    (Re const-decl "{x | EXISTS y: z = x + y * i}" complex_types
     complex)
    (i const-decl "complex" complex_types complex)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_rem_appx const-decl "[int, int]"
     ring_euclidean_gcd_algorithm_Zi nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sq_abs_realpred formula-decl nil arithmetic complex)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Im_times formula-decl nil arithmetic complex)
    (Re_is_real application-judgement "real" complex_types complex)
    (Im_minus formula-decl nil arithmetic complex)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (complex nonempty-type-from-decl nil complex_types complex)
    (set type-eq-decl nil sets nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (f_phi_Zi subtype "ring_euclidean_gcd_algorithm_Zi.r"
    "(ring_euclidean_gcd_algorithm_Zi.Zi)")))
 (phi_Zi_and_f_phi_Zi_ok_TCC1 0
  (phi_Zi_and_f_phi_Zi_ok_TCC1-1 nil 3860745606
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (complex nonempty-type-from-decl nil complex_types complex)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex))
   nil
   (phi_Zi_and_f_phi_Zi_ok subtype
    "ring_euclidean_gcd_algorithm_Zi.f_phi_Zi"
    "[[(ring_euclidean_gcd_algorithm_Zi.Zi), (sets[complex].remove(0, ring_euclidean_gcd_algorithm_Zi.Zi))] -> [(ring_euclidean_gcd_algorithm_Zi.Zi), (ring_euclidean_gcd_algorithm_Zi.Zi)]]")))
 (phi_Zi_and_f_phi_Zi_ok_TCC2 0
  (phi_Zi_and_f_phi_Zi_ok_TCC2-1 nil 3860786150
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (expand "euclidean_ring?")
      (("" (split)
        (("1" (expand "commutative_ring?")
          (("1" (split)
            (("1" (lemma "Zi_is_ring") (("1" (propax) nil nil)) nil)
             ("2" (expand "commutative?")
              (("2" (skosimp)
                (("2" (expand "restrict")
                  (("2" (rewrite "commutative_mult") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst 1 "phi_Zi")
          (("1" (skosimp)
            (("1" (split)
              (("1" (prop)
                (("1" (case "phi_Zi(a!1 * b!1) > 0")
                  (("1" (lemma "phi_Zi_is_multiplicative")
                    (("1" (inst?)
                      (("1" (replaces -1)
                        (("1" (lemma "pos_times_gt")
                          (("1" (inst?)
                            (("1" (prop)
                              (("1"
                                (hide-all-but -2)
                                (("1"
                                  (expand "phi_Zi")
                                  (("1"
                                    (lemma "sq_abs_nonneg")
                                    (("1"
                                      (inst -1 "a!1")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide (-1 -4 1))
                                (("2"
                                  (lemma "both_sides_div_pos_le1")
                                  (("2"
                                    (inst
                                     -1
                                     "phi_Zi(a!1)"
                                     "phi_Zi(a!1)"
                                     "phi_Zi(a!1) * phi_Zi(b!1)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide (-1 3))
                        (("2" (prop)
                          (("2" (replaces -1)
                            (("2" (rewrite "zero_times2") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 3)
                    (("2" (expand "phi_Zi")
                      (("2" (lemma "nz_sq_abs_pos")
                        (("2" (inst -1 "a!1 * b!1")
                          (("1" (assert) nil nil) ("2" (prop) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (prop)
                (("2"
                  (inst 2 "f_phi_Zi(a!1,b!1)`1" "f_phi_Zi(a!1,b!1)`2")
                  (("1" (prop)
                    (("1" (expand "f_phi_Zi") (("1" (propax) nil nil))
                      nil)
                     ("2" (expand "f_phi_Zi")
                      (("2" (hide 2)
                        (("2" (lemma "div_rev_appx_correctness")
                          (("2"
                            (inst-cp -1 "Re(a!1 * conjugate(b!1))"
                             "b!1 * conjugate(b!1)")
                            (("1"
                              (inst -1 "Im(a!1 * conjugate(b!1))"
                               "b!1 * conjugate(b!1)")
                              (("1"
                                (name-replace
                                 "q1"
                                 "div_rem_appx(Re(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`1")
                                (("1"
                                  (name-replace
                                   "r1"
                                   "div_rem_appx(Re(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`2")
                                  (("1"
                                    (name-replace
                                     "q2"
                                     "div_rem_appx(Im(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`1")
                                    (("1"
                                      (name-replace
                                       "r2"
                                       "div_rem_appx(Im(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`2")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (case
                                           "a!1 * conjugate(b!1) = (q1 + q2 * i) * b!1 * conjugate(b!1) + (r1 + r2 * i)")
                                          (("1"
                                            (name-replace
                                             "r0"
                                             "r1 + r2 * i")
                                            (("1"
                                              (case
                                               "phi_Zi(r0) < phi_Zi(b!1 * conjugate(b!1))")
                                              (("1"
                                                (name-replace
                                                 "r"
                                                 "-1 * (q2 * b!1 * i) - q1 * b!1 + a!1")
                                                (("1"
                                                  (case-replace
                                                   "r0 = r * conjugate(b!1)"
                                                   :hide?
                                                   t)
                                                  (("1"
                                                    (lemma
                                                     "phi_Zi_is_multiplicative")
                                                    (("1"
                                                      (inst-cp
                                                       -1
                                                       "r"
                                                       "conjugate(b!1)")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "b!1"
                                                         "conjugate(b!1)")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (replaces
                                                             -1)
                                                            (("1"
                                                              (hide-all-but
                                                               (-1
                                                                1
                                                                2))
                                                              (("1"
                                                                (lemma
                                                                 "both_sides_times_pos_lt1")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (prop)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-
                                                                      2))
                                                                    (("2"
                                                                      (expand
                                                                       "phi_Zi")
                                                                      (("2"
                                                                        (lemma
                                                                         "conjugate_nz")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (lemma
                                                                               "nz_sq_abs_pos")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide (- 2))
                                                        (("2"
                                                          (prop)
                                                          (("1"
                                                            (lemma
                                                             "times_conjugate_is_Zi")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "1"
                                                               "b!1")
                                                              (("1"
                                                                (rewrite
                                                                 "number_fields_left_identity_mult")
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 (2 3))
                                                                (("2"
                                                                  (expand
                                                                   "Zi")
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "1"
                                                                     "0")
                                                                    (("2"
                                                                      (rewrite
                                                                       "Re_real")
                                                                      (("2"
                                                                        (rewrite
                                                                         "Im_real")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "conjugate_nz")
                                                            (("2"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "commutative_add")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "(q1 + q2 * i) * b!1 * conjugate(b!1)"
                                                       "r0")
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (lemma
                                                           "both_sides_plus1")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "a!1 * conjugate(b!1)"
                                                             "r0 + (q1 + q2 * i) * b!1 * conjugate(b!1)"
                                                             "- ((q1 + q2 * i) * b!1 * conjugate(b!1))")
                                                            (("2"
                                                              (prop)
                                                              (("2"
                                                                (lemma
                                                                 "associative_add")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "r0"
                                                                   "(q1 + q2 * i) * b!1 * conjugate(b!1)"
                                                                   "- ((q1 + q2 * i) * b!1 * conjugate(b!1))")
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     -2
                                                                     rl)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         "number_fields_negate_is_right_inverse")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (lemma
                                                                               "number_fields_right_identity_add")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "r0")
                                                                                (("2"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("2"
                                                                                      (hide-all-but
                                                                                       (1
                                                                                        3))
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "commutative_mult")
                                                                                        (("2"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "(q1 + q2 * i)"
                                                                                           "b!1")
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -2)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "distributive")
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 "b!1"
                                                                                                 "q1"
                                                                                                 "q2 * i")
                                                                                                (("2"
                                                                                                  (replaces
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "r")
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -2
                                                                                                       "a!1"
                                                                                                       "conjugate(b!1)")
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "commutative_add")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "-(conjugate(b!1) * b!1 * q1 + conjugate(b!1) * b!1 * i * q2)"
                                                                                                             "conjugate(b!1) * a!1")
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "number_fields_neg1_times")
                                                                                                                (("2"
                                                                                                                  (inst-cp
                                                                                                                   -1
                                                                                                                   "conjugate(b!1) * b!1 * q1 + conjugate(b!1) * b!1 * i * q2")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     1
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "-1"
                                                                                                                         "conjugate(b!1) * b!1 * q1"
                                                                                                                         "conjugate(b!1) * b!1 * i * q2")
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -2)
                                                                                                                          (("2"
                                                                                                                            (inst-cp
                                                                                                                             -1
                                                                                                                             "conjugate(b!1) * b!1 * q1")
                                                                                                                            (("2"
                                                                                                                              (replaces
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "minus_add")
                                                                                                                                      (("2"
                                                                                                                                        (inst-cp
                                                                                                                                         -1
                                                                                                                                         "conjugate(b!1) * a!1"
                                                                                                                                         "conjugate(b!1) * b!1 * q1")
                                                                                                                                        (("2"
                                                                                                                                          (replaces
                                                                                                                                           -2)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "conjugate(b!1) * a!1 + -(conjugate(b!1) * b!1 * q1)"
                                                                                                                                             "conjugate(b!1) * b!1 * i * q2")
                                                                                                                                            (("2"
                                                                                                                                              (replaces
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "associative_add")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but
                                                 (-2 -4 1 3))
                                                (("2"
                                                  (lemma
                                                   "nz_sq_abs_pos")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (name-replace
                                                       "c!1"
                                                       "b!1 * conjugate(b!1)")
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         -2
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "abs"
                                                           -3
                                                           2)
                                                          (("1"
                                                            (lift-if)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "le_times_le_pos")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "abs(r2)"
                                                                   "abs(r2)"
                                                                   "c!1 / 2"
                                                                   "c!1 / 2")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "abs(r1)"
                                                                     "abs(r1)"
                                                                     "c!1 / 2"
                                                                     "c!1 / 2")
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (case-replace
                                                                         "abs(r2) * abs(r2) = abs(r2 * r2)"
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (case-replace
                                                                           "abs(r1) * abs(r1) = abs(r1 * r1)"
                                                                           :hide?
                                                                           t)
                                                                          (("1"
                                                                            (rewrite
                                                                             "abs_square")
                                                                            (("1"
                                                                              (rewrite
                                                                               "abs_square")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "div_times")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "le_plus_le")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "(c!1 * c!1) / 4"
                                                                                     "r2 * r2"
                                                                                     "(c!1 * c!1) / 4"
                                                                                     "r1 * r1")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "div_distributes")
                                                                                        (("1"
                                                                                          (case-replace
                                                                                           "2 * (c!1 * c!1) / 4 =  (c!1 * c!1) / 2"
                                                                                           :hide?
                                                                                           t)
                                                                                          (("1"
                                                                                            (case
                                                                                             "(c!1 * c!1) / 2 < c!1 * c!1")
                                                                                            (("1"
                                                                                              (hide
                                                                                               (-3
                                                                                                -4
                                                                                                -5
                                                                                                -6
                                                                                                -7
                                                                                                -8
                                                                                                2))
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "phi_Zi")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "sq_abs_def")
                                                                                                  (("1"
                                                                                                    (inst-cp
                                                                                                     -1
                                                                                                     "r0")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "c!1")
                                                                                                      (("1"
                                                                                                        (replaces
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "r0")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "Re_def")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "r1"
                                                                                                               "r2 * i + r1")
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "Im_def")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "r2"
                                                                                                                     "r2 * i + r1")
                                                                                                                    (("1"
                                                                                                                      (prop)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         (-1
                                                                                                                          -3))
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (case-replace
                                                                                                                               "c!1 * conjugate(c!1) = c!1 * c!1")
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -2))
                                                                                                                                (("1"
                                                                                                                                  (name-replace
                                                                                                                                   "r3"
                                                                                                                                   "r2 * r2 + r1 * r1"
                                                                                                                                   :hide?
                                                                                                                                   t)
                                                                                                                                  (("1"
                                                                                                                                    (name-replace
                                                                                                                                     "c3"
                                                                                                                                     "c!1 * c!1"
                                                                                                                                     :hide?
                                                                                                                                     t)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 (-
                                                                                                                                  2))
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "c!1")
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "conjugate_times")
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (replaces
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (case-replace
                                                                                                                                           "conjugate(conjugate(b!1)) = b!1"
                                                                                                                                           :hide?
                                                                                                                                           t)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "conjugate")
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "Re_def")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "Re(b!1)"
                                                                                                                                                   "Re(b!1) - Im(b!1) * i")
                                                                                                                                                  (("2"
                                                                                                                                                    (prop)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (replaces
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "Im_def")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "- Im(b!1)"
                                                                                                                                                             "Re(b!1) - Im(b!1) * i")
                                                                                                                                                            (("1"
                                                                                                                                                              (prop)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replaces
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "complex_is_Re_Im")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "minus_add")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst?)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replaces
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "number_fields_negative_times")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (rewrite
                                                                                                                                                                                 "number_fields_negate_negate")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (name-replace
                                                                                                                                                                                   "B!1"
                                                                                                                                                                                   "Re(b!1) + Im(b!1) * i")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (replaces
                                                                                                                                                                                     -1)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (hide
                                                                                                                                                                 (1
                                                                                                                                                                  3))
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   1
                                                                                                                                                                   "Re(b!1)")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "minus_add")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "number_fields_negative_times")
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (hide
                                                                                                                                                       (1
                                                                                                                                                        3))
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         1
                                                                                                                                                         "-Im(b!1)")
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "minus_add")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst?)
                                                                                                                                                            (("2"
                                                                                                                                                              (replaces
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (rewrite
                                                                                                                                                                 "number_fields_negative_times")
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         (-
                                                                                                                          1
                                                                                                                          3))
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           1
                                                                                                                           "r1")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "commutative_add")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   (-
                                                                                                                    1
                                                                                                                    3))
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "r2")
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "commutative_add")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               (-
                                                                                                2))
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "c!1")
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "div_mult_pos_lt1")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "identity_mult")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "conjugate(b!1) * conjugate(b!1) * b!1 * b!1")
                                                                                                            (("1"
                                                                                                              (name-replace
                                                                                                               "tempb!1"
                                                                                                               "2 * (conjugate(b!1) * conjugate(b!1) * b!1 * b!1)")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 1
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "tempb!1")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "both_sides_times_pos_lt1")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         (-1
                                                                                                                          2))
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "conjugate_times")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "b!1"
                                                                                                                             "b!1")
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               1
                                                                                                                               rl)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "associative_mult")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       1
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "commutative_mult")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "conjugate(b!1 * b!1)"
                                                                                                                                             "b!1 * b!1")
                                                                                                                                            (("2"
                                                                                                                                              (replaces
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "sq_abs_realpred")
                                                                                                                                                (("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "nz_sq_abs_pos")
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "sq_abs_nonneg")
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (prop)
                                                                                                                                                      (("2"
                                                                                                                                                        (rewrite
                                                                                                                                                         "nonzero_times1")
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "conjugate_times")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "b!1"
                                                                                                           "b!1")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "associative_mult")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     1
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "commutative_mult")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "conjugate(b!1 * b!1)"
                                                                                                                           "b!1 * b!1")
                                                                                                                          (("2"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "sq_abs_realpred")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (hide
                                                                                               (-
                                                                                                2))
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "c!1")
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "conjugate_times")
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "b!1"
                                                                                                     "b!1")
                                                                                                    (("3"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       rl)
                                                                                                      (("3"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("3"
                                                                                                          (lemma
                                                                                                           "associative_mult")
                                                                                                          (("3"
                                                                                                            (inst?)
                                                                                                            (("3"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1
                                                                                                               rl)
                                                                                                              (("3"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (lemma
                                                                                                                   "commutative_mult")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "conjugate(b!1 * b!1)"
                                                                                                                     "b!1 * b!1")
                                                                                                                    (("3"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("3"
                                                                                                                        (rewrite
                                                                                                                         "sq_abs_realpred")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (hide
                                                                                               (-
                                                                                                2))
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "c!1")
                                                                                                (("4"
                                                                                                  (lemma
                                                                                                   "conjugate_times")
                                                                                                  (("4"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "b!1"
                                                                                                     "b!1")
                                                                                                    (("4"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       rl)
                                                                                                      (("4"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("4"
                                                                                                          (lemma
                                                                                                           "associative_mult")
                                                                                                          (("4"
                                                                                                            (inst?)
                                                                                                            (("4"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1
                                                                                                               rl)
                                                                                                              (("4"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("4"
                                                                                                                  (lemma
                                                                                                                   "commutative_mult")
                                                                                                                  (("4"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "conjugate(b!1 * b!1)"
                                                                                                                     "b!1 * b!1")
                                                                                                                    (("4"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("4"
                                                                                                                        (lemma
                                                                                                                         "sq_abs_def")
                                                                                                                        (("4"
                                                                                                                          (inst?)
                                                                                                                          (("4"
                                                                                                                            (replaces
                                                                                                                             -1)
                                                                                                                            (("4"
                                                                                                                              (typepred
                                                                                                                               "Re(b!1 * b!1)")
                                                                                                                              (("4"
                                                                                                                                (typepred
                                                                                                                                 "Im(b!1 * b!1)")
                                                                                                                                (("4"
                                                                                                                                  (hide
                                                                                                                                   (-1
                                                                                                                                    -3))
                                                                                                                                  (("4"
                                                                                                                                    (name-replace
                                                                                                                                     "A!1"
                                                                                                                                     "(Re(b!1 * b!1) * Re(b!1 * b!1) + Im(b!1 * b!1) * Im(b!1 * b!1))")
                                                                                                                                    (("4"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             (-
                                                                                              2))
                                                                                            (("2"
                                                                                              (expand
                                                                                               "c!1")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "conjugate_times")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "b!1"
                                                                                                   "b!1")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "associative_mult")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "conjugate(b!1 * b!1)"
                                                                                                           "b!1"
                                                                                                           "b!1")
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1
                                                                                                             rl)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "commutative_mult")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "conjugate(b!1 * b!1)"
                                                                                                                   "b!1 * b!1")
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "sq_abs_def")
                                                                                                                      (("2"
                                                                                                                        (inst?)
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (name-replace
                                                                                                                             "A!1"
                                                                                                                             "(Re(b!1 * b!1) * Re(b!1 * b!1) + Im(b!1 * b!1) * Im(b!1 * b!1))")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       (-
                                                                                        2))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "c!1")
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "conjugate_times")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "b!1"
                                                                                             "b!1")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1
                                                                                               1
                                                                                               rl)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "associative_mult")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       rl)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "commutative_mult")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "conjugate(b!1 * b!1)"
                                                                                                             "b!1 * b!1")
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "sq_abs_def")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (name-replace
                                                                                                                       "A!1"
                                                                                                                       "(Re(b!1 * b!1) * Re(b!1 * b!1) + Im(b!1 * b!1) * Im(b!1 * b!1))")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "abs")
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "abs")
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (prop)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       (-
                                                                        2))
                                                                      (("2"
                                                                        (expand
                                                                         "c!1")
                                                                        (("2"
                                                                          (lemma
                                                                           "sq_abs_def")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (name-replace
                                                                                 "A!1"
                                                                                 "Re(b!1) * Re(b!1) + Im(b!1) * Im(b!1)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-
                                                                      2))
                                                                    (("2"
                                                                      (expand
                                                                       "c!1")
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_abs_def")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (name-replace
                                                                               "A!1"
                                                                               "Re(b!1) * Re(b!1) + Im(b!1) * Im(b!1)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (prop)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide-all-but (1 3))
                                                (("3"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     "times_conjugate_is_Zi")
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "nz_sq_abs_pos")
                                                    (("2"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (prop)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide-all-but (1 3))
                                                (("4"
                                                  (prop)
                                                  (("1"
                                                    (expand "r0")
                                                    (("1"
                                                      (expand "Zi")
                                                      (("1"
                                                        (inst
                                                         1
                                                         "r1"
                                                         "r2")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (lemma
                                                             "Re_def")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "r1"
                                                               "r2 * i + r1")
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (replaces
                                                                   -2)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (1
                                                                    3
                                                                    4))
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "r2")
                                                                    (("2"
                                                                      (lemma
                                                                       "commutative_add")
                                                                      (("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "Im_def")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "r2"
                                                               "r2 * i + r1")
                                                              (("2"
                                                                (prop)
                                                                (("1"
                                                                  (replaces
                                                                   -2)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (1
                                                                    3
                                                                    4))
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "r1")
                                                                    (("2"
                                                                      (lemma
                                                                       "commutative_add")
                                                                      (("2"
                                                                        (inst?)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (reveal (-1 3))
                                                    (("2"
                                                      (replaces -2)
                                                      (("2"
                                                        (lemma
                                                         "number_fields_right_identity_add")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "(q1 + q2 * i) * b!1 * conjugate(b!1)")
                                                          (("2"
                                                            (replaces
                                                             -1)
                                                            (("2"
                                                              (lemma
                                                               "both_sides_times1")
                                                              (("2"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (hide
                                                                     (-1
                                                                      -3))
                                                                    (("1"
                                                                      (name-replace
                                                                       "q3"
                                                                       "(q1 + q2 * i)")
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "q3"
                                                                         "0")
                                                                        (("1"
                                                                          (lemma
                                                                           "number_fields_left_identity_add")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "q3 * b!1")
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           (-1
                                                                            2))
                                                                          (("2"
                                                                            (expand
                                                                             "Zi")
                                                                            (("2"
                                                                              (inst
                                                                               1
                                                                               "0"
                                                                               "0")
                                                                              (("2"
                                                                                (rewrite
                                                                                 "Im_real")
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "Re_real")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           -1)
                                                                          (("3"
                                                                            (expand*
                                                                             "Zi"
                                                                             "q3")
                                                                            (("3"
                                                                              (inst
                                                                               1
                                                                               "q1"
                                                                               "q2")
                                                                              (("3"
                                                                                (prop)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "Re_def")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "q1"
                                                                                     "q2 * i + q1")
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -2)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (1
                                                                                          3
                                                                                          4))
                                                                                        (("2"
                                                                                          (inst
                                                                                           1
                                                                                           "q2")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "commutative_add")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "Im_def")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "q2"
                                                                                     "q2 * i + q1")
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -2)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (1
                                                                                          3
                                                                                          4))
                                                                                        (("2"
                                                                                          (inst
                                                                                           1
                                                                                           "q1")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "commutative_add")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-
                                                                    2))
                                                                  (("2"
                                                                    (lemma
                                                                     "conjugate_nz")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (prop)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide (-1 -3 2))
                                            (("2"
                                              (lemma
                                               "complex_is_Re_Im")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (replaces -2)
                                                    (("2"
                                                      (lemma
                                                       "associative_mult")
                                                      (("2"
                                                        (inst-cp
                                                         -1
                                                         "(q1 + q2 * i)"
                                                         "b!1"
                                                         "conjugate(b!1)")
                                                        (("2"
                                                          (replace
                                                           -2
                                                           1
                                                           rl)
                                                          (("2"
                                                            (hide -2)
                                                            (("2"
                                                              (lemma
                                                               "commutative_mult")
                                                              (("2"
                                                                (inst-cp
                                                                 -1
                                                                 "(q1 + q2 * i)"
                                                                 "(b!1 * conjugate(b!1))")
                                                                (("2"
                                                                  (replaces
                                                                   -2)
                                                                  (("2"
                                                                    (lemma
                                                                     "distributive")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "associative_add")
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             "((b!1 * conjugate(b!1)) * q1) + ((b!1 * conjugate(b!1)) * (q2 * i))"
                                                                             "r1"
                                                                             "r2 * i")
                                                                            (("2"
                                                                              (replaces
                                                                               -2)
                                                                              (("2"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "(b!1 * conjugate(b!1)) * q1"
                                                                                 "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                                 "r1")
                                                                                (("2"
                                                                                  (replace
                                                                                   -2
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "commutative_add")
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -1
                                                                                       "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                                       "r1")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -2)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -2
                                                                                             "(b!1 * conjugate(b!1)) * q1"
                                                                                             "r1"
                                                                                             "(b!1 * conjugate(b!1)) * (q2 * i)")
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -3)
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -2
                                                                                                 "(b!1 * conjugate(b!1)) * q1 + r1"
                                                                                                 "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                                                 "r2 * i")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -3
                                                                                                   1
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -1
                                                                                                       "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                                                       "r2 * i")
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (inst-cp
                                                                                                           -1
                                                                                                           "b!1 * conjugate(b!1) * q2"
                                                                                                           "r2")
                                                                                                          (("2"
                                                                                                            (replaces
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (inst-cp
                                                                                                               -3
                                                                                                               "(r2 + b!1 * conjugate(b!1) * q2)"
                                                                                                               "i")
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -4)
                                                                                                                (("2"
                                                                                                                  (inst-cp
                                                                                                                   -3
                                                                                                                   "r2"
                                                                                                                   "i")
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -4)
                                                                                                                    (("2"
                                                                                                                      (inst-cp
                                                                                                                       -4
                                                                                                                       "b!1 * conjugate(b!1)"
                                                                                                                       "q2"
                                                                                                                       "i")
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (inst-cp
                                                                                                                           -3
                                                                                                                           "b!1 * conjugate(b!1) * q2"
                                                                                                                           "i")
                                                                                                                          (("2"
                                                                                                                            (replaces
                                                                                                                             -4)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "distributive")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (lemma
                                           "sq_abs_Re_Im_integer_rational_pred")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (lemma
                                           "sq_abs_Re_Im_integer_rational_pred")
                                          (("3"
                                            (inst?)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (lemma
                                                 "times_conjugate_is_Zi")
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (lemma
                                         "sq_abs_Re_Im_integer_rational_pred")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but 1)
                                      (("3"
                                        (lemma
                                         "sq_abs_Re_Im_integer_rational_pred")
                                        (("3"
                                          (inst?)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "times_conjugate_is_Zi")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (lemma
                                       "sq_abs_Re_Im_integer_rational_pred")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (lemma
                                       "sq_abs_Re_Im_integer_rational_pred")
                                      (("3"
                                        (inst?)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "times_conjugate_is_Zi")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (lemma
                                     "sq_abs_Re_Im_integer_rational_pred")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3"
                                    (lemma
                                     "sq_abs_Re_Im_integer_rational_pred")
                                    (("3"
                                      (inst?)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "times_conjugate_is_Zi")
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide (- 2 3))
                                (("2"
                                  (lemma
                                   "sq_abs_Re_Im_integer_rational_pred")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide (- 2 3))
                                (("3"
                                  (lemma
                                   "sq_abs_Re_Im_integer_rational_pred")
                                  (("3"
                                    (inst?)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma "times_conjugate_is_Zi")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide (2 3))
                              (("2"
                                (lemma
                                 "sq_abs_Re_Im_integer_rational_pred")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide (2 3))
                              (("3"
                                (lemma
                                 "sq_abs_Re_Im_integer_rational_pred")
                                (("3"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "times_conjugate_is_Zi")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (prop) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "difference")
              (("2" (expand "member")
                (("2" (expand "singleton")
                  (("2" (lemma "complex_is_0_Re_Im")
                    (("2" (inst -1 "x2") (("2" (prop) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (phi_Zi const-decl "nat" ring_euclidean_gcd_algorithm_Zi nil)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (> const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_abs_nonneg formula-decl nil arithmetic complex)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (zero_times2 formula-decl nil number_fields_bis complex)
    (phi_Zi_is_multiplicative formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types complex)
    (nz_sq_abs_pos formula-decl nil arithmetic complex)
    (f_phi_Zi const-decl "[(Zi), (Zi)]" ring_euclidean_gcd_algorithm_Zi
     nil)
    (div_rev_appx_correctness formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (Im_is_real application-judgement "real" complex_types complex)
    (Im const-decl "{y | EXISTS x: z = x + y * i}" complex_types
     complex)
    (complex_plus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (< const-decl "bool" reals nil)
    (conjugate_nz formula-decl nil arithmetic complex)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (number_fields_left_identity_mult formula-decl nil
     number_fields_bis complex)
    (Re_real formula-decl nil arithmetic complex)
    (Im_real formula-decl nil arithmetic complex)
    (times_conjugate_is_Zi formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (both_sides_plus1 formula-decl nil number_fields_bis complex)
    (number_fields_right_identity_add formula-decl nil
     number_fields_bis complex)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (distributive formula-decl nil number_fields nil)
    (minus_add formula-decl nil number_fields nil)
    (number_fields_neg1_times formula-decl nil number_fields_bis
     complex)
    (number_fields_negate_is_right_inverse formula-decl nil
     number_fields_bis complex)
    (minus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (associative_add formula-decl nil number_fields nil)
    (commutative_add formula-decl nil number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (complex_div_nzcomplex_is_complex application-judgement "complex"
     complex_types complex)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (le_plus_le formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (identity_mult formula-decl nil number_fields nil)
    (left_identity formula-decl nil monad groups)
    (associative_mult formula-decl nil number_fields nil)
    (nonzero_times1 formula-decl nil number_fields_bis complex)
    (sq_abs_def formula-decl nil arithmetic complex)
    (Im_def formula-decl nil complex_types complex)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number_fields_negative_times formula-decl nil number_fields_bis
     complex)
    (number_fields_negate_negate formula-decl nil number_fields_bis
     complex)
    (complex_is_Re_Im formula-decl nil arithmetic complex)
    (minus_real_is_real application-judgement "real" reals nil)
    (conjugate_times formula-decl nil arithmetic complex)
    (Re_def formula-decl nil complex_types complex)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_distributes formula-decl nil number_fields_bis complex)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nzcomplex_times_nzcomplex_is_nzcomplex application-judgement
     "nzcomplex" complex_types complex)
    (div_times formula-decl nil number_fields_bis complex)
    (abs_square formula-decl nil real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (both_sides_times1 formula-decl nil number_fields_bis complex)
    (number_fields_left_identity_add formula-decl nil number_fields_bis
     complex)
    (sq_abs_Re_Im_integer_rational_pred formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (complex_minus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (div_rem_appx const-decl "[int, int]"
     ring_euclidean_gcd_algorithm_Zi nil)
    (sq_abs_realpred formula-decl nil arithmetic complex)
    (conjugate const-decl "complex" arithmetic complex)
    (Re const-decl "{x | EXISTS y: z = x + y * i}" complex_types
     complex)
    (i const-decl "complex" complex_types complex)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Re_is_real application-judgement "real" complex_types complex)
    (complex_is_0_Re_Im formula-decl nil arithmetic complex)
    (member const-decl "bool" sets nil)
    (commutative_ring? const-decl "bool" ring_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (complex nonempty-type-from-decl nil complex_types complex)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (commutative_mult formula-decl nil number_fields nil)
    (Zi_is_ring formula-decl nil ring_euclidean_gcd_algorithm_Zi nil))
   nil
   (phi_Zi_and_f_phi_Zi_ok subtype "ring_euclidean_gcd_algorithm_Zi.Zi"
    "(euclidean_ring_def[complex, restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.*), 0].euclidean_ring?)")))
 (phi_Zi_and_f_phi_Zi_ok_TCC3 0
  (phi_Zi_and_f_phi_Zi_ok_TCC2-1 nil 3860745606
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (prop)
      (("1" (skeep)
        (("1" (expand "difference")
          (("1" (expand "member")
            (("1" (expand "singleton")
              (("1" (lemma "complex_is_0_Re_Im")
                (("1" (inst?) (("1" (prop) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "euclidean_pair?")
        (("2" (skosimp)
          (("2" (prop)
            (("1" (case "phi_Zi(a!1 * b!1) > 0")
              (("1" (lemma "phi_Zi_is_multiplicative")
                (("1" (inst?)
                  (("1" (replaces -1)
                    (("1" (lemma "pos_times_gt")
                      (("1" (inst?)
                        (("1" (prop)
                          (("1" (hide-all-but -2)
                            (("1" (expand "phi_Zi")
                              (("1"
                                (lemma "sq_abs_nonneg")
                                (("1"
                                  (inst -1 "a!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (-1 -4 1))
                            (("2" (lemma "both_sides_div_pos_le1")
                              (("2"
                                (inst
                                 -1
                                 "phi_Zi(a!1)"
                                 "phi_Zi(a!1)"
                                 "phi_Zi(a!1) * phi_Zi(b!1)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide (-1 3))
                    (("2" (prop)
                      (("2" (replaces -1)
                        (("2" (rewrite "zero_times2") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 3)
                (("2" (expand "phi_Zi")
                  (("2" (lemma "nz_sq_abs_pos")
                    (("2" (inst -1 "a!1 * b!1")
                      (("1" (assert) nil nil) ("2" (prop) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst 2 "f_phi_Zi(a!1,b!1)`1" "f_phi_Zi(a!1,b!1)`2")
              (("1" (prop)
                (("1" (expand "f_phi_Zi") (("1" (propax) nil nil)) nil)
                 ("2" (expand "f_phi_Zi")
                  (("2" (hide 2)
                    (("2" (lemma "div_rev_appx_correctness")
                      (("2"
                        (inst-cp -1 "Re(a!1 * conjugate(b!1))"
                         "b!1 * conjugate(b!1)")
                        (("1"
                          (inst -1 "Im(a!1 * conjugate(b!1))"
                           "b!1 * conjugate(b!1)")
                          (("1"
                            (name-replace "q1"
                             "div_rem_appx(Re(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`1")
                            (("1"
                              (name-replace "r1"
                               "div_rem_appx(Re(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`2")
                              (("1"
                                (name-replace
                                 "q2"
                                 "div_rem_appx(Im(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`1")
                                (("1"
                                  (name-replace
                                   "r2"
                                   "div_rem_appx(Im(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`2")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case
                                       "a!1 * conjugate(b!1) = (q1 + q2 * i) * b!1 * conjugate(b!1) + (r1 + r2 * i)")
                                      (("1"
                                        (name-replace
                                         "r0"
                                         "r1 + r2 * i")
                                        (("1"
                                          (case
                                           "phi_Zi(r0) < phi_Zi(b!1 * conjugate(b!1))")
                                          (("1"
                                            (name-replace
                                             "r"
                                             "-1 * (q2 * b!1 * i) - q1 * b!1 + a!1")
                                            (("1"
                                              (case-replace
                                               "r0 = r * conjugate(b!1)"
                                               :hide?
                                               t)
                                              (("1"
                                                (lemma
                                                 "phi_Zi_is_multiplicative")
                                                (("1"
                                                  (inst-cp
                                                   -1
                                                   "r"
                                                   "conjugate(b!1)")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "b!1"
                                                     "conjugate(b!1)")
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1 1 2))
                                                          (("1"
                                                            (lemma
                                                             "both_sides_times_pos_lt1")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (prop)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 (- 2))
                                                                (("2"
                                                                  (expand
                                                                   "phi_Zi")
                                                                  (("2"
                                                                    (lemma
                                                                     "conjugate_nz")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (lemma
                                                                           "nz_sq_abs_pos")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (prop)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide (- 2))
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (lemma
                                                         "times_conjugate_is_Zi")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "1"
                                                           "b!1")
                                                          (("1"
                                                            (rewrite
                                                             "number_fields_left_identity_mult")
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             (2 3))
                                                            (("2"
                                                              (expand
                                                               "Zi")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "1"
                                                                 "0")
                                                                (("2"
                                                                  (rewrite
                                                                   "Re_real")
                                                                  (("2"
                                                                    (rewrite
                                                                     "Im_real")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "conjugate_nz")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "commutative_add")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "(q1 + q2 * i) * b!1 * conjugate(b!1)"
                                                   "r0")
                                                  (("2"
                                                    (replaces -1)
                                                    (("2"
                                                      (lemma
                                                       "both_sides_plus1")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "a!1 * conjugate(b!1)"
                                                         "r0 + (q1 + q2 * i) * b!1 * conjugate(b!1)"
                                                         "- ((q1 + q2 * i) * b!1 * conjugate(b!1))")
                                                        (("2"
                                                          (prop)
                                                          (("2"
                                                            (lemma
                                                             "associative_add")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "r0"
                                                               "(q1 + q2 * i) * b!1 * conjugate(b!1)"
                                                               "- ((q1 + q2 * i) * b!1 * conjugate(b!1))")
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 -2
                                                                 rl)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (lemma
                                                                     "number_fields_negate_is_right_inverse")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "number_fields_right_identity_add")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "r0")
                                                                            (("2"
                                                                              (replaces
                                                                               -1)
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (hide-all-but
                                                                                   (1
                                                                                    3))
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "commutative_mult")
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -1
                                                                                       "(q1 + q2 * i)"
                                                                                       "b!1")
                                                                                      (("2"
                                                                                        (replaces
                                                                                         -2)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "distributive")
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "b!1"
                                                                                             "q1"
                                                                                             "q2 * i")
                                                                                            (("2"
                                                                                              (replaces
                                                                                               -2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "r")
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -2
                                                                                                   "a!1"
                                                                                                   "conjugate(b!1)")
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "commutative_add")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "-(conjugate(b!1) * b!1 * q1 + conjugate(b!1) * b!1 * i * q2)"
                                                                                                         "conjugate(b!1) * a!1")
                                                                                                        (("2"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "number_fields_neg1_times")
                                                                                                            (("2"
                                                                                                              (inst-cp
                                                                                                               -1
                                                                                                               "conjugate(b!1) * b!1 * q1 + conjugate(b!1) * b!1 * i * q2")
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -2
                                                                                                                 1
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "-1"
                                                                                                                     "conjugate(b!1) * b!1 * q1"
                                                                                                                     "conjugate(b!1) * b!1 * i * q2")
                                                                                                                    (("2"
                                                                                                                      (replaces
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (inst-cp
                                                                                                                         -1
                                                                                                                         "conjugate(b!1) * b!1 * q1")
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -2)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "minus_add")
                                                                                                                                  (("2"
                                                                                                                                    (inst-cp
                                                                                                                                     -1
                                                                                                                                     "conjugate(b!1) * a!1"
                                                                                                                                     "conjugate(b!1) * b!1 * q1")
                                                                                                                                    (("2"
                                                                                                                                      (replaces
                                                                                                                                       -2)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "conjugate(b!1) * a!1 + -(conjugate(b!1) * b!1 * q1)"
                                                                                                                                         "conjugate(b!1) * b!1 * i * q2")
                                                                                                                                        (("2"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "associative_add")
                                                                                                                                            (("2"
                                                                                                                                              (inst?)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-2 -4 1 3))
                                            (("2"
                                              (lemma "nz_sq_abs_pos")
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (name-replace
                                                   "c!1"
                                                   "b!1 * conjugate(b!1)")
                                                  (("1"
                                                    (expand "abs" -2 2)
                                                    (("1"
                                                      (expand
                                                       "abs"
                                                       -3
                                                       2)
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "le_times_le_pos")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "abs(r2)"
                                                               "abs(r2)"
                                                               "c!1 / 2"
                                                               "c!1 / 2")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "abs(r1)"
                                                                 "abs(r1)"
                                                                 "c!1 / 2"
                                                                 "c!1 / 2")
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (case-replace
                                                                     "abs(r2) * abs(r2) = abs(r2 * r2)"
                                                                     :hide?
                                                                     t)
                                                                    (("1"
                                                                      (case-replace
                                                                       "abs(r1) * abs(r1) = abs(r1 * r1)"
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (rewrite
                                                                         "abs_square")
                                                                        (("1"
                                                                          (rewrite
                                                                           "abs_square")
                                                                          (("1"
                                                                            (rewrite
                                                                             "div_times")
                                                                            (("1"
                                                                              (lemma
                                                                               "le_plus_le")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "(c!1 * c!1) / 4"
                                                                                 "r2 * r2"
                                                                                 "(c!1 * c!1) / 4"
                                                                                 "r1 * r1")
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "div_distributes")
                                                                                    (("1"
                                                                                      (case-replace
                                                                                       "2 * (c!1 * c!1) / 4 =  (c!1 * c!1) / 2"
                                                                                       :hide?
                                                                                       t)
                                                                                      (("1"
                                                                                        (case
                                                                                         "(c!1 * c!1) / 2 < c!1 * c!1")
                                                                                        (("1"
                                                                                          (hide
                                                                                           (-3
                                                                                            -4
                                                                                            -5
                                                                                            -6
                                                                                            -7
                                                                                            -8
                                                                                            2))
                                                                                          (("1"
                                                                                            (expand
                                                                                             "phi_Zi")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "sq_abs_def")
                                                                                              (("1"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 "r0")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "c!1")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "r0")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "Re_def")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "r1"
                                                                                                           "r2 * i + r1")
                                                                                                          (("1"
                                                                                                            (prop)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "Im_def")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "r2"
                                                                                                                 "r2 * i + r1")
                                                                                                                (("1"
                                                                                                                  (prop)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     (-1
                                                                                                                      -3))
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (case-replace
                                                                                                                           "c!1 * conjugate(c!1) = c!1 * c!1")
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             (-1
                                                                                                                              -2))
                                                                                                                            (("1"
                                                                                                                              (name-replace
                                                                                                                               "r3"
                                                                                                                               "r2 * r2 + r1 * r1"
                                                                                                                               :hide?
                                                                                                                               t)
                                                                                                                              (("1"
                                                                                                                                (name-replace
                                                                                                                                 "c3"
                                                                                                                                 "c!1 * c!1"
                                                                                                                                 :hide?
                                                                                                                                 t)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (hide
                                                                                                                             (-
                                                                                                                              2))
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "c!1")
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "conjugate_times")
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (replaces
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (case-replace
                                                                                                                                       "conjugate(conjugate(b!1)) = b!1"
                                                                                                                                       :hide?
                                                                                                                                       t)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (hide
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "conjugate")
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "Re_def")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "Re(b!1)"
                                                                                                                                               "Re(b!1) - Im(b!1) * i")
                                                                                                                                              (("2"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (replaces
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "Im_def")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "- Im(b!1)"
                                                                                                                                                         "Re(b!1) - Im(b!1) * i")
                                                                                                                                                        (("1"
                                                                                                                                                          (prop)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (replaces
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "complex_is_Re_Im")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "minus_add")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (replaces
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (rewrite
                                                                                                                                                                           "number_fields_negative_times")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "number_fields_negate_negate")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (name-replace
                                                                                                                                                                               "B!1"
                                                                                                                                                                               "Re(b!1) + Im(b!1) * i")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (replaces
                                                                                                                                                                                 -1)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (hide
                                                                                                                                                             (1
                                                                                                                                                              3))
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               1
                                                                                                                                                               "Re(b!1)")
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "minus_add")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (replaces
                                                                                                                                                                     -1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (rewrite
                                                                                                                                                                       "number_fields_negative_times")
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   (1
                                                                                                                                                    3))
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     1
                                                                                                                                                     "-Im(b!1)")
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "minus_add")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("2"
                                                                                                                                                          (replaces
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (rewrite
                                                                                                                                                             "number_fields_negative_times")
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     (-
                                                                                                                      1
                                                                                                                      3))
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "r1")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "commutative_add")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               (-
                                                                                                                1
                                                                                                                3))
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "r2")
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "commutative_add")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           (-
                                                                                            2))
                                                                                          (("2"
                                                                                            (expand
                                                                                             "c!1")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "div_mult_pos_lt1")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "identity_mult")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "conjugate(b!1) * conjugate(b!1) * b!1 * b!1")
                                                                                                        (("1"
                                                                                                          (name-replace
                                                                                                           "tempb!1"
                                                                                                           "2 * (conjugate(b!1) * conjugate(b!1) * b!1 * b!1)")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "tempb!1")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "both_sides_times_pos_lt1")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     (-1
                                                                                                                      2))
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "conjugate_times")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "b!1"
                                                                                                                         "b!1")
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           1
                                                                                                                           rl)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "associative_mult")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   1
                                                                                                                                   rl)
                                                                                                                                  (("2"
                                                                                                                                    (hide
                                                                                                                                     -)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "commutative_mult")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "conjugate(b!1 * b!1)"
                                                                                                                                         "b!1 * b!1")
                                                                                                                                        (("2"
                                                                                                                                          (replaces
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (rewrite
                                                                                                                                             "sq_abs_realpred")
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "nz_sq_abs_pos")
                                                                                                                                              (("1"
                                                                                                                                                (rewrite
                                                                                                                                                 "sq_abs_nonneg")
                                                                                                                                                nil
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (prop)
                                                                                                                                                  (("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     "nonzero_times1")
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "conjugate_times")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "b!1"
                                                                                                       "b!1")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "associative_mult")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 1
                                                                                                                 rl)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "commutative_mult")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "conjugate(b!1 * b!1)"
                                                                                                                       "b!1 * b!1")
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (rewrite
                                                                                                                           "sq_abs_realpred")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (hide
                                                                                           (-
                                                                                            2))
                                                                                          (("3"
                                                                                            (expand
                                                                                             "c!1")
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "conjugate_times")
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "b!1"
                                                                                                 "b!1")
                                                                                                (("3"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1
                                                                                                   rl)
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (lemma
                                                                                                       "associative_mult")
                                                                                                      (("3"
                                                                                                        (inst?)
                                                                                                        (("3"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1
                                                                                                           rl)
                                                                                                          (("3"
                                                                                                            (hide
                                                                                                             -)
                                                                                                            (("3"
                                                                                                              (lemma
                                                                                                               "commutative_mult")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "conjugate(b!1 * b!1)"
                                                                                                                 "b!1 * b!1")
                                                                                                                (("3"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("3"
                                                                                                                    (rewrite
                                                                                                                     "sq_abs_realpred")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (hide
                                                                                           (-
                                                                                            2))
                                                                                          (("4"
                                                                                            (expand
                                                                                             "c!1")
                                                                                            (("4"
                                                                                              (lemma
                                                                                               "conjugate_times")
                                                                                              (("4"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "b!1"
                                                                                                 "b!1")
                                                                                                (("4"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1
                                                                                                   rl)
                                                                                                  (("4"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("4"
                                                                                                      (lemma
                                                                                                       "associative_mult")
                                                                                                      (("4"
                                                                                                        (inst?)
                                                                                                        (("4"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1
                                                                                                           rl)
                                                                                                          (("4"
                                                                                                            (hide
                                                                                                             -)
                                                                                                            (("4"
                                                                                                              (lemma
                                                                                                               "commutative_mult")
                                                                                                              (("4"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "conjugate(b!1 * b!1)"
                                                                                                                 "b!1 * b!1")
                                                                                                                (("4"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("4"
                                                                                                                    (lemma
                                                                                                                     "sq_abs_def")
                                                                                                                    (("4"
                                                                                                                      (inst?)
                                                                                                                      (("4"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("4"
                                                                                                                          (typepred
                                                                                                                           "Re(b!1 * b!1)")
                                                                                                                          (("4"
                                                                                                                            (typepred
                                                                                                                             "Im(b!1 * b!1)")
                                                                                                                            (("4"
                                                                                                                              (hide
                                                                                                                               (-1
                                                                                                                                -3))
                                                                                                                              (("4"
                                                                                                                                (name-replace
                                                                                                                                 "A!1"
                                                                                                                                 "(Re(b!1 * b!1) * Re(b!1 * b!1) + Im(b!1 * b!1) * Im(b!1 * b!1))")
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         (-
                                                                                          2))
                                                                                        (("2"
                                                                                          (expand
                                                                                           "c!1")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "conjugate_times")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "b!1"
                                                                                               "b!1")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "associative_mult")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "conjugate(b!1 * b!1)"
                                                                                                       "b!1"
                                                                                                       "b!1")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "commutative_mult")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "conjugate(b!1 * b!1)"
                                                                                                               "b!1 * b!1")
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "sq_abs_def")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (replaces
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (name-replace
                                                                                                                         "A!1"
                                                                                                                         "(Re(b!1 * b!1) * Re(b!1 * b!1) + Im(b!1 * b!1) * Im(b!1 * b!1))")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   (-
                                                                                    2))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "c!1")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "conjugate_times")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "b!1"
                                                                                         "b!1")
                                                                                        (("2"
                                                                                          (replace
                                                                                           -1
                                                                                           1
                                                                                           rl)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "associative_mult")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "commutative_mult")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "conjugate(b!1 * b!1)"
                                                                                                         "b!1 * b!1")
                                                                                                        (("2"
                                                                                                          (replaces
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "sq_abs_def")
                                                                                                            (("2"
                                                                                                              (inst?)
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (name-replace
                                                                                                                   "A!1"
                                                                                                                   "(Re(b!1 * b!1) * Re(b!1 * b!1) + Im(b!1 * b!1) * Im(b!1 * b!1))")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "abs")
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (prop)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "abs")
                                                                        (("2"
                                                                          (lift-if)
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-
                                                                    2))
                                                                  (("2"
                                                                    (expand
                                                                     "c!1")
                                                                    (("2"
                                                                      (lemma
                                                                       "sq_abs_def")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (name-replace
                                                                             "A!1"
                                                                             "Re(b!1) * Re(b!1) + Im(b!1) * Im(b!1)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 (- 2))
                                                                (("2"
                                                                  (expand
                                                                   "c!1")
                                                                  (("2"
                                                                    (lemma
                                                                     "sq_abs_def")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (replaces
                                                                         -1)
                                                                        (("2"
                                                                          (name-replace
                                                                           "A!1"
                                                                           "Re(b!1) * Re(b!1) + Im(b!1) * Im(b!1)")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (prop) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but (1 3))
                                            (("3"
                                              (prop)
                                              (("1"
                                                (lemma
                                                 "times_conjugate_is_Zi")
                                                (("1" (inst?) nil nil))
                                                nil)
                                               ("2"
                                                (lemma "nz_sq_abs_pos")
                                                (("2"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (prop)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (hide-all-but (1 3))
                                            (("4"
                                              (prop)
                                              (("1"
                                                (expand "r0")
                                                (("1"
                                                  (expand "Zi")
                                                  (("1"
                                                    (inst 1 "r1" "r2")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (lemma
                                                         "Re_def")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "r1"
                                                           "r2 * i + r1")
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replaces
                                                               -2)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               (1 3 4))
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "r2")
                                                                (("2"
                                                                  (lemma
                                                                   "commutative_add")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "Im_def")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "r2"
                                                           "r2 * i + r1")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (replaces
                                                               -2)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               (1 3 4))
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "r1")
                                                                (("2"
                                                                  (lemma
                                                                   "commutative_add")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (reveal (-1 3))
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (lemma
                                                     "number_fields_right_identity_add")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "(q1 + q2 * i) * b!1 * conjugate(b!1)")
                                                      (("2"
                                                        (replaces -1)
                                                        (("2"
                                                          (lemma
                                                           "both_sides_times1")
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (hide
                                                                 (-1
                                                                  -3))
                                                                (("1"
                                                                  (name-replace
                                                                   "q3"
                                                                   "(q1 + q2 * i)")
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "q3"
                                                                     "0")
                                                                    (("1"
                                                                      (lemma
                                                                       "number_fields_left_identity_add")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "q3 * b!1")
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       (-1
                                                                        2))
                                                                      (("2"
                                                                        (expand
                                                                         "Zi")
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "0"
                                                                           "0")
                                                                          (("2"
                                                                            (rewrite
                                                                             "Im_real")
                                                                            (("2"
                                                                              (rewrite
                                                                               "Re_real")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       -1)
                                                                      (("3"
                                                                        (expand*
                                                                         "Zi"
                                                                         "q3")
                                                                        (("3"
                                                                          (inst
                                                                           1
                                                                           "q1"
                                                                           "q2")
                                                                          (("3"
                                                                            (prop)
                                                                            (("1"
                                                                              (lemma
                                                                               "Re_def")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "q1"
                                                                                 "q2 * i + q1")
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -2)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     (1
                                                                                      3
                                                                                      4))
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "q2")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "commutative_add")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "Im_def")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "q2"
                                                                                 "q2 * i + q1")
                                                                                (("2"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -2)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     (1
                                                                                      3
                                                                                      4))
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "q1")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "commutative_add")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               (- 2))
                                                              (("2"
                                                                (lemma
                                                                 "conjugate_nz")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (-1 -3 2))
                                        (("2"
                                          (lemma "complex_is_Re_Im")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (replaces -2)
                                              (("2"
                                                (replaces -2)
                                                (("2"
                                                  (lemma
                                                   "associative_mult")
                                                  (("2"
                                                    (inst-cp
                                                     -1
                                                     "(q1 + q2 * i)"
                                                     "b!1"
                                                     "conjugate(b!1)")
                                                    (("2"
                                                      (replace -2 1 rl)
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (lemma
                                                           "commutative_mult")
                                                          (("2"
                                                            (inst-cp
                                                             -1
                                                             "(q1 + q2 * i)"
                                                             "(b!1 * conjugate(b!1))")
                                                            (("2"
                                                              (replaces
                                                               -2)
                                                              (("2"
                                                                (lemma
                                                                 "distributive")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (replaces
                                                                     -1)
                                                                    (("2"
                                                                      (lemma
                                                                       "associative_add")
                                                                      (("2"
                                                                        (inst-cp
                                                                         -1
                                                                         "((b!1 * conjugate(b!1)) * q1) + ((b!1 * conjugate(b!1)) * (q2 * i))"
                                                                         "r1"
                                                                         "r2 * i")
                                                                        (("2"
                                                                          (replaces
                                                                           -2)
                                                                          (("2"
                                                                            (inst-cp
                                                                             -1
                                                                             "(b!1 * conjugate(b!1)) * q1"
                                                                             "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                             "r1")
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               1
                                                                               rl)
                                                                              (("2"
                                                                                (lemma
                                                                                 "commutative_add")
                                                                                (("2"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                                   "r1")
                                                                                  (("2"
                                                                                    (replaces
                                                                                     -2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -3)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -2
                                                                                         "(b!1 * conjugate(b!1)) * q1"
                                                                                         "r1"
                                                                                         "(b!1 * conjugate(b!1)) * (q2 * i)")
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -2
                                                                                             "(b!1 * conjugate(b!1)) * q1 + r1"
                                                                                             "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                                             "r2 * i")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3
                                                                                               1
                                                                                               rl)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                                                   "r2 * i")
                                                                                                  (("2"
                                                                                                    (replaces
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -1
                                                                                                       "b!1 * conjugate(b!1) * q2"
                                                                                                       "r2")
                                                                                                      (("2"
                                                                                                        (replaces
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (inst-cp
                                                                                                           -3
                                                                                                           "(r2 + b!1 * conjugate(b!1) * q2)"
                                                                                                           "i")
                                                                                                          (("2"
                                                                                                            (replaces
                                                                                                             -4)
                                                                                                            (("2"
                                                                                                              (inst-cp
                                                                                                               -3
                                                                                                               "r2"
                                                                                                               "i")
                                                                                                              (("2"
                                                                                                                (replaces
                                                                                                                 -4)
                                                                                                                (("2"
                                                                                                                  (inst-cp
                                                                                                                   -4
                                                                                                                   "b!1 * conjugate(b!1)"
                                                                                                                   "q2"
                                                                                                                   "i")
                                                                                                                  (("2"
                                                                                                                    (replaces
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (inst-cp
                                                                                                                       -3
                                                                                                                       "b!1 * conjugate(b!1) * q2"
                                                                                                                       "i")
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -4)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "distributive")
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (replaces
                                                                                                                               -1)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (lemma
                                       "sq_abs_Re_Im_integer_rational_pred")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but 1)
                                    (("3"
                                      (lemma
                                       "sq_abs_Re_Im_integer_rational_pred")
                                      (("3"
                                        (inst?)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "times_conjugate_is_Zi")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2"
                                    (lemma
                                     "sq_abs_Re_Im_integer_rational_pred")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but 1)
                                  (("3"
                                    (lemma
                                     "sq_abs_Re_Im_integer_rational_pred")
                                    (("3"
                                      (inst?)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "times_conjugate_is_Zi")
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2"
                                  (lemma
                                   "sq_abs_Re_Im_integer_rational_pred")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3"
                                  (lemma
                                   "sq_abs_Re_Im_integer_rational_pred")
                                  (("3"
                                    (inst?)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma "times_conjugate_is_Zi")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (lemma
                                 "sq_abs_Re_Im_integer_rational_pred")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (lemma
                                 "sq_abs_Re_Im_integer_rational_pred")
                                (("3"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "times_conjugate_is_Zi")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide (- 2 3))
                            (("2"
                              (lemma
                               "sq_abs_Re_Im_integer_rational_pred")
                              (("2"
                                (inst?)
                                (("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide (- 2 3))
                            (("3"
                              (lemma
                               "sq_abs_Re_Im_integer_rational_pred")
                              (("3"
                                (inst?)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "times_conjugate_is_Zi")
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide (2 3))
                          (("2"
                            (lemma
                             "sq_abs_Re_Im_integer_rational_pred")
                            (("2" (inst?)
                              (("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide (2 3))
                          (("3"
                            (lemma
                             "sq_abs_Re_Im_integer_rational_pred")
                            (("3" (inst?)
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (lemma "times_conjugate_is_Zi")
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (prop) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((difference const-decl "set" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (complex nonempty-type-from-decl nil complex_types complex)
    (complex_is_0_Re_Im formula-decl nil arithmetic complex)
    (member const-decl "bool" sets nil)
    (f_phi_Zi const-decl "[(Zi), (Zi)]" ring_euclidean_gcd_algorithm_Zi
     nil)
    (div_rev_appx_correctness formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (Im_is_real application-judgement "real" complex_types complex)
    (Im const-decl "{y | EXISTS x: z = x + y * i}" complex_types
     complex)
    (complex_plus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (< const-decl "bool" reals nil)
    (conjugate_nz formula-decl nil arithmetic complex)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (number_fields_left_identity_mult formula-decl nil
     number_fields_bis complex)
    (Re_real formula-decl nil arithmetic complex)
    (Im_real formula-decl nil arithmetic complex)
    (times_conjugate_is_Zi formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (both_sides_plus1 formula-decl nil number_fields_bis complex)
    (number_fields_right_identity_add formula-decl nil
     number_fields_bis complex)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (distributive formula-decl nil number_fields nil)
    (minus_add formula-decl nil number_fields nil)
    (number_fields_neg1_times formula-decl nil number_fields_bis
     complex)
    (commutative_mult formula-decl nil number_fields nil)
    (number_fields_negate_is_right_inverse formula-decl nil
     number_fields_bis complex)
    (minus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (associative_add formula-decl nil number_fields nil)
    (commutative_add formula-decl nil number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (complex_div_nzcomplex_is_complex application-judgement "complex"
     complex_types complex)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (le_plus_le formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (identity_mult formula-decl nil number_fields nil)
    (left_identity formula-decl nil monad groups)
    (restrict const-decl "R" restrict nil)
    (associative_mult formula-decl nil number_fields nil)
    (nonzero_times1 formula-decl nil number_fields_bis complex)
    (sq_abs_def formula-decl nil arithmetic complex)
    (Im_def formula-decl nil complex_types complex)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number_fields_negative_times formula-decl nil number_fields_bis
     complex)
    (number_fields_negate_negate formula-decl nil number_fields_bis
     complex)
    (complex_is_Re_Im formula-decl nil arithmetic complex)
    (minus_real_is_real application-judgement "real" reals nil)
    (conjugate_times formula-decl nil arithmetic complex)
    (Re_def formula-decl nil complex_types complex)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_distributes formula-decl nil number_fields_bis complex)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nzcomplex_times_nzcomplex_is_nzcomplex application-judgement
     "nzcomplex" complex_types complex)
    (div_times formula-decl nil number_fields_bis complex)
    (abs_square formula-decl nil real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (le_times_le_pos formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (both_sides_times1 formula-decl nil number_fields_bis complex)
    (number_fields_left_identity_add formula-decl nil number_fields_bis
     complex)
    (sq_abs_Re_Im_integer_rational_pred formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (complex_minus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (div_rem_appx const-decl "[int, int]"
     ring_euclidean_gcd_algorithm_Zi nil)
    (sq_abs_realpred formula-decl nil arithmetic complex)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i const-decl "complex" complex_types complex)
    (Re const-decl "{x | EXISTS y: z = x + y * i}" complex_types
     complex)
    (conjugate const-decl "complex" arithmetic complex)
    (Re_is_real application-judgement "real" complex_types complex)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (phi_Zi const-decl "nat" ring_euclidean_gcd_algorithm_Zi nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/= const-decl "boolean" notequal nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (set type-eq-decl nil sets nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (pos_times_gt formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_abs_nonneg formula-decl nil arithmetic complex)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (TRUE const-decl "bool" booleans nil)
    (zero_times2 formula-decl nil number_fields_bis complex)
    (phi_Zi_is_multiplicative formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (nzcomplex nonempty-type-eq-decl nil complex_types complex)
    (nz_sq_abs_pos formula-decl nil arithmetic complex)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil))
   nil
   (phi_Zi_and_f_phi_Zi_ok subtype
    "ring_euclidean_gcd_algorithm_Zi.phi_Zi"
    "{phi: [(sets[complex].difference(ring_euclidean_gcd_algorithm_Zi.Zi, sets[complex].singleton(0))) -> naturalnumbers.nat] | euclidean_ring_def[complex, restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.*), 0].euclidean_pair?(ring_euclidean_gcd_algorithm_Zi.Zi, phi)}")))
 (phi_Zi_and_f_phi_Zi_ok 0
  (phi_Zi_and_f_phi_Zi_ok-1 nil 3860756698
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (expand "euclidean_f_phi?")
      (("" (skosimp)
        (("" (typepred "b!1")
          (("" (hide (-1 -2))
            (("" (expand "remove")
              (("" (expand "member")
                (("" (prop)
                  (("1" (expand "f_phi_Zi")
                    (("1" (replace -1 1)
                      (("1" (rewrite "zero_times1")
                        (("1" (rewrite "Re_real")
                          (("1" (rewrite "Im_real")
                            (("1" (split)
                              (("1"
                                (expand "div_rem_appx")
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (prop)
                                    (("1"
                                      (lemma
                                       "modulo_arithmetic.rem_zero")
                                      (("1"
                                        (inst
                                         -1
                                         "b!1 * conjugate(b!1)")
                                        (("1"
                                          (typepred
                                           "ndiv(0, b!1 * conjugate(b!1))")
                                          (("1"
                                            (replaces -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide (-2 -4))
                                                (("1"
                                                  (lemma
                                                   "associative_mult")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "conjugate(b!1)"
                                                     "ndiv(0, b!1 * conjugate(b!1))"
                                                     "b!1")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       -2
                                                       rl)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (lemma
                                                           "nonzero_times1")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "conjugate(b!1)"
                                                             " (ndiv(0, b!1 * conjugate(b!1)) * b!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "nonzero_times2")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide
                                                                         (-1
                                                                          -3))
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        2))
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_abs_Re_Im_integer_rational_pred")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (prop)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               (-1
                                                                -2
                                                                2))
                                                              (("2"
                                                                (lemma
                                                                 "sq_abs_Re_Im_integer_rational_pred")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide
                                                               (-1
                                                                -2
                                                                -3
                                                                2))
                                                              (("3"
                                                                (rewrite
                                                                 "conjugate_nz")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (-1 -2 2))
                                                      (("2"
                                                        (lemma
                                                         "sq_abs_Re_Im_integer_rational_pred")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (prop)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide (-1 -3 2))
                                            (("2"
                                              (lemma
                                               "sq_abs_Re_Im_integer_rational_pred")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-2 2))
                                          (("2"
                                            (lemma
                                             "sq_abs_Re_Im_integer_rational_pred")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (prop)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (-1 -2 2))
                                      (("2"
                                        (rewrite "nz_sq_abs_pos")
                                        nil
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 1)
                                      (("3"
                                        (lemma
                                         "modulo_arithmetic.rem_zero")
                                        (("3"
                                          (inst?)
                                          (("1"
                                            (replaces -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (lemma
                                                   "sq_abs_Re_Im_integer_rational_pred")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (prop)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide (-1 2 3))
                                      (("4"
                                        (rewrite "nz_sq_abs_pos")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "div_rem_appx")
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1"
                                      (lemma
                                       "modulo_arithmetic.rem_zero")
                                      (("1"
                                        (inst
                                         -1
                                         "b!1 * conjugate(b!1)")
                                        (("1"
                                          (typepred
                                           "ndiv(0, b!1 * conjugate(b!1))")
                                          (("1"
                                            (replaces -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide (-2 -4))
                                                (("1"
                                                  (lemma
                                                   "associative_mult")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "conjugate(b!1)"
                                                     "ndiv(0, b!1 * conjugate(b!1))"
                                                     "b!1")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       -2
                                                       rl)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (lemma
                                                           "nonzero_times1")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "conjugate(b!1)"
                                                             " (ndiv(0, b!1 * conjugate(b!1)) * b!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "nonzero_times2")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (prop)
                                                                      (("1"
                                                                        (hide
                                                                         (-1
                                                                          -3))
                                                                        (("1"
                                                                          (replaces
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       (-1
                                                                        -2
                                                                        2))
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_abs_Re_Im_integer_rational_pred")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (prop)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               (-1
                                                                -2
                                                                2))
                                                              (("2"
                                                                (lemma
                                                                 "sq_abs_Re_Im_integer_rational_pred")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide
                                                               (-1
                                                                -2
                                                                -3
                                                                2))
                                                              (("3"
                                                                (rewrite
                                                                 "conjugate_nz")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (-1 -2 2))
                                                      (("2"
                                                        (lemma
                                                         "sq_abs_Re_Im_integer_rational_pred")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (prop)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide (-1 -3 2))
                                            (("2"
                                              (lemma
                                               "sq_abs_Re_Im_integer_rational_pred")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (prop)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-2 2))
                                          (("2"
                                            (lemma
                                             "sq_abs_Re_Im_integer_rational_pred")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (prop)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (-1 -2 2))
                                      (("2"
                                        (rewrite "nz_sq_abs_pos")
                                        nil
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 1)
                                      (("3"
                                        (lemma
                                         "modulo_arithmetic.rem_zero")
                                        (("3"
                                          (inst?)
                                          (("1"
                                            (replaces -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "abs")
                                                (("2"
                                                  (lemma
                                                   "sq_abs_Re_Im_integer_rational_pred")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (prop)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide (-1 2 3))
                                      (("4"
                                        (rewrite "nz_sq_abs_pos")
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "f_phi_Zi") (("2" (propax) nil nil))
                    nil)
                   ("3" (expand "f_phi_Zi")
                    (("3" (hide 2)
                      (("3" (lemma "div_rev_appx_correctness")
                        (("3"
                          (inst-cp -1 "Re(a!1 * conjugate(b!1))"
                           "b!1 * conjugate(b!1)")
                          (("1"
                            (inst -1 "Im(a!1 * conjugate(b!1))"
                             "b!1 * conjugate(b!1)")
                            (("1"
                              (name-replace "q1"
                               "div_rem_appx(Re(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`1")
                              (("1"
                                (name-replace
                                 "r1"
                                 "div_rem_appx(Re(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`2")
                                (("1"
                                  (name-replace
                                   "q2"
                                   "div_rem_appx(Im(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`1")
                                  (("1"
                                    (name-replace
                                     "r2"
                                     "div_rem_appx(Im(a!1 * conjugate(b!1)), b!1 * conjugate(b!1))`2")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (case
                                         "a!1 * conjugate(b!1) = (q1 + q2 * i) * b!1 * conjugate(b!1) + (r1 + r2 * i)")
                                        (("1"
                                          (name-replace
                                           "r0"
                                           "r1 + r2 * i")
                                          (("1"
                                            (case
                                             "phi_Zi(r0) < phi_Zi(b!1 * conjugate(b!1))")
                                            (("1"
                                              (name-replace
                                               "r"
                                               "-1 * (q2 * b!1 * i) - q1 * b!1 + a!1")
                                              (("1"
                                                (case-replace
                                                 "r0 = r * conjugate(b!1)"
                                                 :hide?
                                                 t)
                                                (("1"
                                                  (lemma
                                                   "phi_Zi_is_multiplicative")
                                                  (("1"
                                                    (inst-cp
                                                     -1
                                                     "r"
                                                     "conjugate(b!1)")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "b!1"
                                                       "conjugate(b!1)")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (hide-all-but
                                                             (-1 1 3))
                                                            (("1"
                                                              (lemma
                                                               "both_sides_times_pos_lt1")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-
                                                                    2))
                                                                  (("2"
                                                                    (expand
                                                                     "phi_Zi")
                                                                    (("2"
                                                                      (lemma
                                                                       "conjugate_nz")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (rewrite
                                                                             "nz_sq_abs_pos")
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but
                                                       (-7 1 4))
                                                      (("2"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "times_conjugate_is_Zi")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "1"
                                                             "b!1")
                                                            (("1"
                                                              (rewrite
                                                               "number_fields_left_identity_mult")
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               (-1
                                                                2
                                                                3))
                                                              (("2"
                                                                (expand
                                                                 "Zi")
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "1"
                                                                   "0")
                                                                  (("2"
                                                                    (rewrite
                                                                     "Re_real")
                                                                    (("2"
                                                                      (rewrite
                                                                       "Im_real")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "conjugate_nz")
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "commutative_add")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "(q1 + q2 * i) * b!1 * conjugate(b!1)"
                                                     "r0")
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (lemma
                                                         "both_sides_plus1")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "a!1 * conjugate(b!1)"
                                                           "r0 + (q1 + q2 * i) * b!1 * conjugate(b!1)"
                                                           "- ((q1 + q2 * i) * b!1 * conjugate(b!1))")
                                                          (("2"
                                                            (prop)
                                                            (("2"
                                                              (lemma
                                                               "associative_add")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "r0"
                                                                 "(q1 + q2 * i) * b!1 * conjugate(b!1)"
                                                                 "- ((q1 + q2 * i) * b!1 * conjugate(b!1))")
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   -2
                                                                   rl)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (lemma
                                                                       "number_fields_negate_is_right_inverse")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             "number_fields_right_identity_add")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "r0")
                                                                              (("2"
                                                                                (replaces
                                                                                 -1)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (hide-all-but
                                                                                     (-9
                                                                                      1
                                                                                      3
                                                                                      4))
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "commutative_mult")
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "(q1 + q2 * i)"
                                                                                         "b!1")
                                                                                        (("2"
                                                                                          (replaces
                                                                                           -2)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "distributive")
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "b!1"
                                                                                               "q1"
                                                                                               "q2 * i")
                                                                                              (("2"
                                                                                                (replaces
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "r")
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -2
                                                                                                     "a!1"
                                                                                                     "conjugate(b!1)")
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -3)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "commutative_add")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "-(conjugate(b!1) * b!1 * q1 + conjugate(b!1) * b!1 * i * q2)"
                                                                                                           "conjugate(b!1) * a!1")
                                                                                                          (("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "number_fields_neg1_times")
                                                                                                              (("2"
                                                                                                                (inst-cp
                                                                                                                 -1
                                                                                                                 "conjugate(b!1) * b!1 * q1 + conjugate(b!1) * b!1 * i * q2")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2
                                                                                                                   1
                                                                                                                   rl)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -2
                                                                                                                       "-1"
                                                                                                                       "conjugate(b!1) * b!1 * q1"
                                                                                                                       "conjugate(b!1) * b!1 * i * q2")
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -2)
                                                                                                                        (("2"
                                                                                                                          (inst-cp
                                                                                                                           -1
                                                                                                                           "conjugate(b!1) * b!1 * q1")
                                                                                                                          (("2"
                                                                                                                            (replaces
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "minus_add")
                                                                                                                                    (("2"
                                                                                                                                      (inst-cp
                                                                                                                                       -1
                                                                                                                                       "conjugate(b!1) * a!1"
                                                                                                                                       "conjugate(b!1) * b!1 * q1")
                                                                                                                                      (("2"
                                                                                                                                        (replaces
                                                                                                                                         -2)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "conjugate(b!1) * a!1 + -(conjugate(b!1) * b!1 * q1)"
                                                                                                                                           "conjugate(b!1) * b!1 * i * q2")
                                                                                                                                          (("2"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "associative_add")
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide (-1 -3 -5 2))
                                              (("2"
                                                (lemma "nz_sq_abs_pos")
                                                (("2"
                                                  (inst?)
                                                  (("1"
                                                    (name-replace
                                                     "c!1"
                                                     "b!1 * conjugate(b!1)")
                                                    (("1"
                                                      (expand
                                                       "abs"
                                                       -2
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "abs"
                                                         -3
                                                         2)
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "le_times_le_pos")
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "abs(r2)"
                                                                 "abs(r2)"
                                                                 "c!1 / 2"
                                                                 "c!1 / 2")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "abs(r1)"
                                                                   "abs(r1)"
                                                                   "c!1 / 2"
                                                                   "c!1 / 2")
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (case-replace
                                                                       "abs(r2) * abs(r2) = abs(r2 * r2)"
                                                                       :hide?
                                                                       t)
                                                                      (("1"
                                                                        (case-replace
                                                                         "abs(r1) * abs(r1) = abs(r1 * r1)"
                                                                         :hide?
                                                                         t)
                                                                        (("1"
                                                                          (rewrite
                                                                           "abs_square")
                                                                          (("1"
                                                                            (rewrite
                                                                             "abs_square")
                                                                            (("1"
                                                                              (rewrite
                                                                               "div_times")
                                                                              (("1"
                                                                                (lemma
                                                                                 "le_plus_le")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "(c!1 * c!1) / 4"
                                                                                   "r2 * r2"
                                                                                   "(c!1 * c!1) / 4"
                                                                                   "r1 * r1")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "div_distributes")
                                                                                      (("1"
                                                                                        (case-replace
                                                                                         "2 * (c!1 * c!1) / 4 = (c!1 * c!1) / 2"
                                                                                         :hide?
                                                                                         t)
                                                                                        (("1"
                                                                                          (case
                                                                                           "(c!1 * c!1) / 2 < c!1 * c!1")
                                                                                          (("1"
                                                                                            (hide
                                                                                             (-3
                                                                                              -4
                                                                                              -5
                                                                                              -6
                                                                                              -7
                                                                                              2))
                                                                                            (("1"
                                                                                              (expand
                                                                                               "phi_Zi")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "sq_abs_def")
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "r0")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "c!1")
                                                                                                    (("1"
                                                                                                      (replaces
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "r0")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "Re_def")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "r1"
                                                                                                             "r2 * i + r1")
                                                                                                            (("1"
                                                                                                              (prop)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "Im_def")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "r2"
                                                                                                                   "r2 * i + r1")
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       (-1
                                                                                                                        -3))
                                                                                                                      (("1"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (case-replace
                                                                                                                             "c!1 * conjugate(c!1) = c!1 * c!1")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               (-1
                                                                                                                                -2))
                                                                                                                              (("1"
                                                                                                                                (name-replace
                                                                                                                                 "r3"
                                                                                                                                 "r2 * r2 + r1 * r1"
                                                                                                                                 :hide?
                                                                                                                                 t)
                                                                                                                                (("1"
                                                                                                                                  (name-replace
                                                                                                                                   "c3"
                                                                                                                                   "c!1 * c!1"
                                                                                                                                   :hide?
                                                                                                                                   t)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               (-1
                                                                                                                                -2
                                                                                                                                -3
                                                                                                                                2))
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "c!1")
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "conjugate_times")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (replaces
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (case-replace
                                                                                                                                         "conjugate(conjugate(b!1)) = b!1"
                                                                                                                                         :hide?
                                                                                                                                         t)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "conjugate")
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "Re_def")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "Re(b!1)"
                                                                                                                                                 "Re(b!1) - Im(b!1) * i")
                                                                                                                                                (("2"
                                                                                                                                                  (prop)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (replaces
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "Im_def")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -1
                                                                                                                                                           "- Im(b!1)"
                                                                                                                                                           "Re(b!1) - Im(b!1) * i")
                                                                                                                                                          (("1"
                                                                                                                                                            (prop)
                                                                                                                                                            (("1"
                                                                                                                                                              (hide
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (replaces
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "complex_is_Re_Im")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (lemma
                                                                                                                                                                       "minus_add")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst?)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (replaces
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (rewrite
                                                                                                                                                                             "number_fields_negative_times")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (rewrite
                                                                                                                                                                               "number_fields_negate_negate")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (name-replace
                                                                                                                                                                                 "B!1"
                                                                                                                                                                                 "Re(b!1) + Im(b!1) * i")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replaces
                                                                                                                                                                                   -1)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (hide
                                                                                                                                                               (1
                                                                                                                                                                3))
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 1
                                                                                                                                                                 "Re(b!1)")
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "minus_add")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replaces
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (rewrite
                                                                                                                                                                         "number_fields_negative_times")
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     (1
                                                                                                                                                      3))
                                                                                                                                                    (("2"
                                                                                                                                                      (inst
                                                                                                                                                       1
                                                                                                                                                       "-Im(b!1)")
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "minus_add")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (replaces
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (rewrite
                                                                                                                                                               "number_fields_negative_times")
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       (-1
                                                                                                                        -2
                                                                                                                        -3
                                                                                                                        -4
                                                                                                                        -5
                                                                                                                        1
                                                                                                                        3))
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "r1")
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "commutative_add")
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 (-
                                                                                                                  1
                                                                                                                  3))
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "r2")
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "commutative_add")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide-all-but
                                                                                             (-7
                                                                                              1
                                                                                              4))
                                                                                            (("2"
                                                                                              (expand
                                                                                               "c!1")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "div_mult_pos_lt1")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "identity_mult")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "conjugate(b!1) * conjugate(b!1) * b!1 * b!1")
                                                                                                          (("1"
                                                                                                            (name-replace
                                                                                                             "tempb!1"
                                                                                                             "2 * (conjugate(b!1) * conjugate(b!1) * b!1 * b!1)")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "tempb!1")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "both_sides_times_pos_lt1")
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       (-1
                                                                                                                        2))
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "conjugate_times")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "b!1"
                                                                                                                           "b!1")
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             1
                                                                                                                             rl)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "associative_mult")
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     1
                                                                                                                                     rl)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "commutative_mult")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "conjugate(b!1 * b!1)"
                                                                                                                                           "b!1 * b!1")
                                                                                                                                          (("2"
                                                                                                                                            (replaces
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (rewrite
                                                                                                                                               "sq_abs_realpred")
                                                                                                                                              (("2"
                                                                                                                                                (rewrite
                                                                                                                                                 "nz_sq_abs_pos")
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "sq_abs_nonneg")
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (prop)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "nonzero_times1")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "conjugate_times")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "b!1"
                                                                                                         "b!1")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "associative_mult")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   rl)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "commutative_mult")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "conjugate(b!1 * b!1)"
                                                                                                                         "b!1 * b!1")
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "sq_abs_realpred")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide-all-but
                                                                                             (-7
                                                                                              1
                                                                                              4))
                                                                                            (("3"
                                                                                              (expand
                                                                                               "c!1")
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "conjugate_times")
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "b!1"
                                                                                                   "b!1")
                                                                                                  (("3"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1
                                                                                                     rl)
                                                                                                    (("3"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "associative_mult")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          (("3"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1
                                                                                                             rl)
                                                                                                            (("3"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (lemma
                                                                                                                 "commutative_mult")
                                                                                                                (("3"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "conjugate(b!1 * b!1)"
                                                                                                                   "b!1 * b!1")
                                                                                                                  (("3"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("3"
                                                                                                                      (rewrite
                                                                                                                       "sq_abs_realpred")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (hide-all-but
                                                                                             (-7
                                                                                              1
                                                                                              4))
                                                                                            (("4"
                                                                                              (expand
                                                                                               "c!1")
                                                                                              (("4"
                                                                                                (lemma
                                                                                                 "conjugate_times")
                                                                                                (("4"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "b!1"
                                                                                                   "b!1")
                                                                                                  (("4"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1
                                                                                                     rl)
                                                                                                    (("4"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("4"
                                                                                                        (lemma
                                                                                                         "associative_mult")
                                                                                                        (("4"
                                                                                                          (inst?)
                                                                                                          (("4"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1
                                                                                                             rl)
                                                                                                            (("4"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("4"
                                                                                                                (lemma
                                                                                                                 "commutative_mult")
                                                                                                                (("4"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "conjugate(b!1 * b!1)"
                                                                                                                   "b!1 * b!1")
                                                                                                                  (("4"
                                                                                                                    (replaces
                                                                                                                     -1)
                                                                                                                    (("4"
                                                                                                                      (lemma
                                                                                                                       "sq_abs_def")
                                                                                                                      (("4"
                                                                                                                        (inst?)
                                                                                                                        (("4"
                                                                                                                          (replaces
                                                                                                                           -1)
                                                                                                                          (("4"
                                                                                                                            (typepred
                                                                                                                             "Re(b!1 * b!1)")
                                                                                                                            (("4"
                                                                                                                              (typepred
                                                                                                                               "Im(b!1 * b!1)")
                                                                                                                              (("4"
                                                                                                                                (hide
                                                                                                                                 (-1
                                                                                                                                  -3))
                                                                                                                                (("4"
                                                                                                                                  (name-replace
                                                                                                                                   "A!1"
                                                                                                                                   "(Re(b!1 * b!1) * Re(b!1 * b!1) + Im(b!1 * b!1) * Im(b!1 * b!1))")
                                                                                                                                  (("4"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-7
                                                                                            1
                                                                                            3
                                                                                            4))
                                                                                          (("2"
                                                                                            (expand
                                                                                             "c!1")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "conjugate_times")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "b!1"
                                                                                                 "b!1")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1
                                                                                                   rl)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "associative_mult")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "conjugate(b!1 * b!1)"
                                                                                                         "b!1"
                                                                                                         "b!1")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "commutative_mult")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "conjugate(b!1 * b!1)"
                                                                                                                 "b!1 * b!1")
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "sq_abs_def")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (replaces
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (name-replace
                                                                                                                           "A!1"
                                                                                                                           "(Re(b!1 * b!1) * Re(b!1 * b!1) + Im(b!1 * b!1) * Im(b!1 * b!1))")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-6
                                                                                      1
                                                                                      3
                                                                                      4))
                                                                                    (("2"
                                                                                      (expand
                                                                                       "c!1")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "conjugate_times")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "b!1"
                                                                                           "b!1")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             1
                                                                                             rl)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "associative_mult")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "commutative_mult")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "conjugate(b!1 * b!1)"
                                                                                                           "b!1 * b!1")
                                                                                                          (("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "sq_abs_def")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (name-replace
                                                                                                                     "A!1"
                                                                                                                     "(Re(b!1 * b!1) * Re(b!1 * b!1) + Im(b!1 * b!1) * Im(b!1 * b!1))")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "abs")
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (prop)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide-all-but
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "abs")
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (prop)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-1
                                                                      -2
                                                                      -3
                                                                      -4
                                                                      2))
                                                                    (("2"
                                                                      (expand
                                                                       "c!1")
                                                                      (("2"
                                                                        (lemma
                                                                         "sq_abs_def")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (replaces
                                                                             -1)
                                                                            (("2"
                                                                              (name-replace
                                                                               "A!1"
                                                                               "Re(b!1) * Re(b!1) + Im(b!1) * Im(b!1)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   (-
                                                                    2))
                                                                  (("2"
                                                                    (expand
                                                                     "c!1")
                                                                    (("2"
                                                                      (lemma
                                                                       "sq_abs_def")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (name-replace
                                                                             "A!1"
                                                                             "Re(b!1) * Re(b!1) + Im(b!1) * Im(b!1)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 4))
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (replaces -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (hide-all-but (-6 1 4))
                                              (("3"
                                                (prop)
                                                (("1"
                                                  (lemma
                                                   "times_conjugate_is_Zi")
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "nz_sq_abs_pos")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (prop)
                                                      (("2"
                                                        (replaces -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (hide-all-but (1 3))
                                              (("4"
                                                (prop)
                                                (("1"
                                                  (expand "r0")
                                                  (("1"
                                                    (expand "Zi")
                                                    (("1"
                                                      (inst
                                                       1
                                                       "r1"
                                                       "r2")
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (lemma
                                                           "Re_def")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "r1"
                                                             "r2 * i + r1")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (replaces
                                                                 -2)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 (1
                                                                  3
                                                                  4))
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "r2")
                                                                  (("2"
                                                                    (lemma
                                                                     "commutative_add")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "Im_def")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "r2"
                                                             "r2 * i + r1")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (replaces
                                                                 -2)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 (1
                                                                  3
                                                                  4))
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "r1")
                                                                  (("2"
                                                                    (lemma
                                                                     "commutative_add")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (reveal
                                                   (-1 -11 -9 3))
                                                  (("2"
                                                    (replaces -2)
                                                    (("2"
                                                      (replaces -2)
                                                      (("2"
                                                        (replaces -2)
                                                        (("2"
                                                          (lemma
                                                           "number_fields_right_identity_add")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "(q1 + q2 * i) * b!1 * conjugate(b!1)")
                                                            (("2"
                                                              (replaces
                                                               -1)
                                                              (("2"
                                                                (lemma
                                                                 "both_sides_times1")
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (prop)
                                                                    (("1"
                                                                      (hide
                                                                       (-1
                                                                        -3))
                                                                      (("1"
                                                                        (lemma
                                                                         "commutative_mult")
                                                                        (("1"
                                                                          (inst-cp
                                                                           -1
                                                                           "(q1 + q2 * i)"
                                                                           "b!1")
                                                                          (("1"
                                                                            (replaces
                                                                             -2)
                                                                            (("1"
                                                                              (lemma
                                                                               "distributive")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (replaces
                                                                                   -1)
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "q2"
                                                                                     "b!1")
                                                                                    (("1"
                                                                                      (replaces
                                                                                       -2)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "b!1"
                                                                                         "q1")
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             2)
                                                                                            (("1"
                                                                                              (replaces
                                                                                               -1)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "minus_add")
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "-1 * (b!1 * q2 * i)"
                                                                                                   "q1 * b!1")
                                                                                                  (("1"
                                                                                                    (replaces
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "associative_add")
                                                                                                      (("1"
                                                                                                        (inst-cp
                                                                                                         -1
                                                                                                         "-1 * (b!1 * q2 * i) + -(q1 * b!1)"
                                                                                                         "q1 * b!1"
                                                                                                         "b!1 * (q2 * i)")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (inst-cp
                                                                                                             -1
                                                                                                             "-1 * (b!1 * q2 * i)"
                                                                                                             "-(q1 * b!1)"
                                                                                                             "q1 * b!1")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2
                                                                                                               1
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "commutative_add")
                                                                                                                  (("1"
                                                                                                                    (inst-cp
                                                                                                                     -1
                                                                                                                     "-(q1 * b!1)"
                                                                                                                     "q1 * b!1")
                                                                                                                    (("1"
                                                                                                                      (replaces
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "inverse_add")
                                                                                                                        (("1"
                                                                                                                          (inst-cp
                                                                                                                           -1
                                                                                                                           "q1 * b!1")
                                                                                                                          (("1"
                                                                                                                            (replaces
                                                                                                                             -2)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "identity_add")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "-1 * (b!1 * q2 * i)")
                                                                                                                                (("1"
                                                                                                                                  (replaces
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -2
                                                                                                                                     "-1 * (b!1 * q2 * i)"
                                                                                                                                     "b!1 * (q2 * i)")
                                                                                                                                    (("1"
                                                                                                                                      (replaces
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (rewrite
                                                                                                                                         "number_fields_neg1_times")
                                                                                                                                        (("1"
                                                                                                                                          (hide
                                                                                                                                           (-2
                                                                                                                                            -3))
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "commutative_mult")
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "associative_mult")
                                                                                                                                              (("1"
                                                                                                                                                (inst?)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -1
                                                                                                                                                   1
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (hide
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     (-1
                                                                      2
                                                                      3))
                                                                    (("2"
                                                                      (reveal
                                                                       4)
                                                                      (("2"
                                                                        (rewrite
                                                                         "conjugate_nz")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide (-1 -3 2))
                                          (("2"
                                            (lemma "complex_is_Re_Im")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (replaces -2)
                                                (("2"
                                                  (replaces -2)
                                                  (("2"
                                                    (lemma
                                                     "associative_mult")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "(q1 + q2 * i)"
                                                       "b!1"
                                                       "conjugate(b!1)")
                                                      (("2"
                                                        (replace
                                                         -2
                                                         1
                                                         rl)
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (lemma
                                                             "commutative_mult")
                                                            (("2"
                                                              (inst-cp
                                                               -1
                                                               "(q1 + q2 * i)"
                                                               "(b!1 * conjugate(b!1))")
                                                              (("2"
                                                                (replaces
                                                                 -2)
                                                                (("2"
                                                                  (lemma
                                                                   "distributive")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (replaces
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         "associative_add")
                                                                        (("2"
                                                                          (inst-cp
                                                                           -1
                                                                           "((b!1 * conjugate(b!1)) * q1) + ((b!1 * conjugate(b!1)) * (q2 * i))"
                                                                           "r1"
                                                                           "r2 * i")
                                                                          (("2"
                                                                            (replaces
                                                                             -2)
                                                                            (("2"
                                                                              (inst-cp
                                                                               -1
                                                                               "(b!1 * conjugate(b!1)) * q1"
                                                                               "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                               "r1")
                                                                              (("2"
                                                                                (replace
                                                                                 -2
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "commutative_add")
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                                     "r1")
                                                                                    (("2"
                                                                                      (replaces
                                                                                       -2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -3)
                                                                                        (("2"
                                                                                          (inst-cp
                                                                                           -2
                                                                                           "(b!1 * conjugate(b!1)) * q1"
                                                                                           "r1"
                                                                                           "(b!1 * conjugate(b!1)) * (q2 * i)")
                                                                                          (("2"
                                                                                            (replaces
                                                                                             -3)
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -2
                                                                                               "(b!1 * conjugate(b!1)) * q1 + r1"
                                                                                               "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                                               "r2 * i")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3
                                                                                                 1
                                                                                                 rl)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -1
                                                                                                     "(b!1 * conjugate(b!1)) * (q2 * i)"
                                                                                                     "r2 * i")
                                                                                                    (("2"
                                                                                                      (replaces
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (inst-cp
                                                                                                         -1
                                                                                                         "b!1 * conjugate(b!1) * q2"
                                                                                                         "r2")
                                                                                                        (("2"
                                                                                                          (replaces
                                                                                                           -2)
                                                                                                          (("2"
                                                                                                            (inst-cp
                                                                                                             -3
                                                                                                             "(r2 + b!1 * conjugate(b!1) * q2)"
                                                                                                             "i")
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -4)
                                                                                                              (("2"
                                                                                                                (inst-cp
                                                                                                                 -3
                                                                                                                 "r2"
                                                                                                                 "i")
                                                                                                                (("2"
                                                                                                                  (replaces
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (inst-cp
                                                                                                                     -4
                                                                                                                     "b!1 * conjugate(b!1)"
                                                                                                                     "q2"
                                                                                                                     "i")
                                                                                                                    (("2"
                                                                                                                      (replaces
                                                                                                                       -5)
                                                                                                                      (("2"
                                                                                                                        (inst-cp
                                                                                                                         -3
                                                                                                                         "b!1 * conjugate(b!1) * q2"
                                                                                                                         "i")
                                                                                                                        (("2"
                                                                                                                          (replaces
                                                                                                                           -4)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "distributive")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (replaces
                                                                                                                                 -1)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-3 1))
                                      (("2"
                                        (lemma
                                         "sq_abs_Re_Im_integer_rational_pred")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but (-3 1))
                                      (("3"
                                        (lemma
                                         "sq_abs_Re_Im_integer_rational_pred")
                                        (("3"
                                          (inst?)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (lemma
                                               "times_conjugate_is_Zi")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-3 1))
                                    (("2"
                                      (lemma
                                       "sq_abs_Re_Im_integer_rational_pred")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide-all-but (-3 1))
                                    (("3"
                                      (lemma
                                       "sq_abs_Re_Im_integer_rational_pred")
                                      (("3"
                                        (inst?)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (lemma
                                             "times_conjugate_is_Zi")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but (-3 1))
                                  (("2"
                                    (lemma
                                     "sq_abs_Re_Im_integer_rational_pred")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide-all-but (-3 1))
                                  (("3"
                                    (lemma
                                     "sq_abs_Re_Im_integer_rational_pred")
                                    (("3"
                                      (inst?)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma
                                           "times_conjugate_is_Zi")
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-3 1))
                                (("2"
                                  (lemma
                                   "sq_abs_Re_Im_integer_rational_pred")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but (-3 1))
                                (("3"
                                  (lemma
                                   "sq_abs_Re_Im_integer_rational_pred")
                                  (("3"
                                    (inst?)
                                    (("1"
                                      (flatten)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (lemma "times_conjugate_is_Zi")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-2 1))
                              (("2"
                                (lemma
                                 "sq_abs_Re_Im_integer_rational_pred")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but (-2 1))
                              (("3"
                                (lemma
                                 "sq_abs_Re_Im_integer_rational_pred")
                                (("3"
                                  (inst?)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "times_conjugate_is_Zi")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2"
                              (lemma
                               "sq_abs_Re_Im_integer_rational_pred")
                              (("2"
                                (inst?)
                                (("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3"
                              (lemma
                               "sq_abs_Re_Im_integer_rational_pred")
                              (("3"
                                (inst?)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "times_conjugate_is_Zi")
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (remove const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (complex nonempty-type-from-decl nil complex_types complex)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Re_real formula-decl nil arithmetic complex)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nz_sq_abs_pos formula-decl nil arithmetic complex)
    (rem_zero formula-decl nil modulo_arithmetic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (ndiv const-decl "{q: int | x = b * q + rem(b)(x)}"
     modulo_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (complex_plus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (associative_mult formula-decl nil number_fields nil)
    (nonzero_times1 formula-decl nil number_fields_bis complex)
    (conjugate_nz formula-decl nil arithmetic complex)
    (nzcomplex nonempty-type-eq-decl nil complex_types complex)
    (nonzero_times2 formula-decl nil number_fields_bis complex)
    (sq_abs_Re_Im_integer_rational_pred formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (zero_times formula-decl nil ring groups)
    (restrict const-decl "R" restrict nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (TRUE const-decl "bool" booleans nil)
    (Re_is_real application-judgement "real" complex_types complex)
    (Im_is_real application-judgement "real" complex_types complex)
    (sq_abs_realpred formula-decl nil arithmetic complex)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (div_rem_appx const-decl "[int, int]"
     ring_euclidean_gcd_algorithm_Zi nil)
    (nil application-judgement "upto(n)" modulo_arithmetic nil)
    (minus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (Im_real formula-decl nil arithmetic complex)
    (zero_times1 formula-decl nil number_fields_bis complex)
    (conjugate const-decl "complex" arithmetic complex)
    (f_phi_Zi const-decl "[(Zi), (Zi)]" ring_euclidean_gcd_algorithm_Zi
     nil)
    (complex_minus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (Re const-decl "{x | EXISTS y: z = x + y * i}" complex_types
     complex)
    (i const-decl "complex" complex_types complex)
    (identity_add formula-decl nil number_fields nil)
    (inverse_add formula-decl nil number_fields nil)
    (both_sides_times1 formula-decl nil number_fields_bis complex)
    (le_times_le_pos formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (abs_square formula-decl nil real_props nil)
    (div_times formula-decl nil number_fields_bis complex)
    (nzcomplex_times_nzcomplex_is_nzcomplex application-judgement
     "nzcomplex" complex_types complex)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (div_distributes formula-decl nil number_fields_bis complex)
    (Re_def formula-decl nil complex_types complex)
    (conjugate_times formula-decl nil arithmetic complex)
    (minus_real_is_real application-judgement "real" reals nil)
    (complex_is_Re_Im formula-decl nil arithmetic complex)
    (number_fields_negate_negate formula-decl nil number_fields_bis
     complex)
    (number_fields_negative_times formula-decl nil number_fields_bis
     complex)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Im_def formula-decl nil complex_types complex)
    (sq_abs_def formula-decl nil arithmetic complex)
    (sq_abs_nonneg formula-decl nil arithmetic complex)
    (left_identity formula-decl nil monad groups)
    (identity_mult formula-decl nil number_fields nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (le_plus_le formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (complex_div_nzcomplex_is_complex application-judgement "complex"
     complex_types complex)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (commutative_add formula-decl nil number_fields nil)
    (associative_add formula-decl nil number_fields nil)
    (number_fields_negate_is_right_inverse formula-decl nil
     number_fields_bis complex)
    (commutative_mult formula-decl nil number_fields nil)
    (number_fields_neg1_times formula-decl nil number_fields_bis
     complex)
    (minus_add formula-decl nil number_fields nil)
    (distributive formula-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (number_fields_right_identity_add formula-decl nil
     number_fields_bis complex)
    (both_sides_plus1 formula-decl nil number_fields_bis complex)
    (phi_Zi_is_multiplicative formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (times_conjugate_is_Zi formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (number_fields_left_identity_mult formula-decl nil
     number_fields_bis complex)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (phi_Zi const-decl "nat" ring_euclidean_gcd_algorithm_Zi nil)
    (Im const-decl "{y | EXISTS x: z = x + y * i}" complex_types
     complex)
    (div_rev_appx_correctness formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (member const-decl "bool" sets nil))
   shostak))
 (euclidean_gcd_alg_in_Zi_TCC1 0
  (euclidean_gcd_alg_in_Zi_TCC1-1 nil 3859976448
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (prop)
        (("1" (expand "empty?")
          (("1" (inst?)
            (("1" (expand "member")
              (("1" (expand "extend") (("1" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "subset?")
          (("2" (skosimp)
            (("2" (expand "member")
              (("2" (expand "extend") (("2" (prop) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (extend const-decl "R" extend nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (complex nonempty-type-from-decl nil complex_types complex)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (euclidean_gcd_alg_in_Zi subtype
    "extend[complex, (ring_euclidean_gcd_algorithm_Zi.Zi), booleans.bool, booleans.FALSE].extend({z: (ring_euclidean_gcd_algorithm_Zi.Zi) | booleans.OR(z = ring_euclidean_gcd_algorithm_Zi.x, z = ring_euclidean_gcd_algorithm_Zi.y)})"
    "{X | booleans.AND((booleans.NOT)(sets[complex].empty?(X)), sets[complex].subset?(X, ring_euclidean_gcd_algorithm_Zi.Zi))}")))
 (euclidean_gcd_alg_in_Zi_TCC2 0
  (euclidean_gcd_alg_in_Zi_TCC4-1 nil 3859976448
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (expand "remove")
        (("" (expand "member") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (euclidean_gcd_alg_in_Zi subtype "ring_euclidean_gcd_algorithm_Zi.y"
    "(sets[complex].remove(0, ring_euclidean_gcd_algorithm_Zi.Zi))")))
 (euclidean_gcd_alg_in_Zi_TCC3 0
  (euclidean_gcd_alg_in_Zi_TCC3-1 nil 3859976448
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (expand "euclidean_domain?")
        (("" (split)
          (("1" (lemma "phi_Zi_and_f_phi_Zi_ok_TCC2")
            (("1" (propax) nil nil)) nil)
           ("2" (lemma "Zi_is_integral_domain_w_one")
            (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((phi_Zi_and_f_phi_Zi_ok_TCC2 subtype-tcc nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (Zi_is_integral_domain_w_one formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil))
   nil
   (euclidean_gcd_alg_in_Zi subtype
    "ring_euclidean_gcd_algorithm_Zi.Zi"
    "(euclidean_domain_def[complex, restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.*), 0, 1].euclidean_domain?)")))
 (euclidean_gcd_alg_in_Zi_TCC4 0
  (euclidean_gcd_alg_in_Zi_TCC7-1 nil 3859976448
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (split)
        (("1" (skeep)
          (("1" (expand "remove")
            (("1" (expand "member")
              (("1" (prop)
                (("1" (replaces -1) nil nil)
                 ("2" (replaces -1) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "phi_Zi_and_f_phi_Zi_ok") (("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((phi_Zi_and_f_phi_Zi_ok formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil)
    (member const-decl "bool" sets nil)
    (remove const-decl "set" sets nil))
   nil
   (euclidean_gcd_alg_in_Zi subtype
    "ring_euclidean_gcd_algorithm_Zi.f_phi_Zi"
    "{f_phi: [(ring_euclidean_gcd_algorithm_Zi.Zi), (sets[complex].remove(0, ring_euclidean_gcd_algorithm_Zi.Zi)) -> [(ring_euclidean_gcd_algorithm_Zi.Zi), (ring_euclidean_gcd_algorithm_Zi.Zi)]] | euclidean_ring_def[complex, restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.*), 0].euclidean_f_phi?(ring_euclidean_gcd_algorithm_Zi.Zi, ring_euclidean_gcd_algorithm_Zi.phi_Zi)(f_phi)}")))
 (euclidean_gcd_alg_in_Zi_TCC5 0
  (euclidean_gcd_alg_in_Zi_TCC8-1 nil 3859984430
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (expand "ring_with_one?")
        (("" (split)
          (("1" (expand "ring?")
            (("1" (split)
              (("1" (expand "abelian_group?")
                (("1" (split)
                  (("1" (expand "group?")
                    (("1" (split)
                      (("1" (expand "monoid?")
                        (("1" (split)
                          (("1" (expand "monad?")
                            (("1" (split)
                              (("1"
                                (expand "star_closed?")
                                (("1"
                                  (skosimp)
                                  (("1"
                                    (expand "member")
                                    (("1"
                                      (expand "fullset")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "member")
                                (("2"
                                  (expand "fullset")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "identity?")
                                (("3"
                                  (skeep)
                                  (("3"
                                    (expand "restrict")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "associative?")
                            (("2" (skeep)
                              (("2"
                                (expand "restrict")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "inv_exists?")
                        (("2" (skeep)
                          (("2" (inst 1 "-x!1")
                            (("1"
                              (lemma
                               "number_fields_negate_is_right_inverse")
                              (("1"
                                (inst?)
                                (("1" (replaces -1) nil nil))
                                nil))
                              nil)
                             ("2" (expand "fullset")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "commutative?")
                    (("2" (skeep)
                      (("2" (expand "restrict")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "star_closed?")
                (("2" (skeep)
                  (("2" (expand "member")
                    (("2" (expand "fullset") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "associative?")
                (("3" (skeep)
                  (("3" (expand "restrict")
                    (("3" (lemma "associative_mult")
                      (("3" (inst?) (("3" (replaces -1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (expand "left_distributive?")
                (("4" (skeep)
                  (("4" (expand "restrict") (("4" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("5" (expand "right_distributive?")
                (("5" (skeep)
                  (("5" (expand "restrict") (("5" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "monoid?")
            (("2" (split)
              (("1" (expand "monad?")
                (("1" (split)
                  (("1" (expand "star_closed?")
                    (("1" (skosimp)
                      (("1" (expand "member")
                        (("1" (expand "fullset")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "member")
                    (("2" (expand "fullset") (("2" (propax) nil nil))
                      nil))
                    nil)
                   ("3" (expand "identity?")
                    (("3" (skeep)
                      (("3" (expand "restrict")
                        (("3"
                          (rewrite "number_fields_left_identity_mult")
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "associative?")
                (("2" (skeep)
                  (("2" (expand "restrict")
                    (("2" (lemma "associative_mult")
                      (("2" (inst?) (("2" (replaces -1) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (complex_plus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (number_fields_negate_is_right_inverse formula-decl nil
     number_fields_bis complex)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (complex nonempty-type-from-decl nil complex_types complex)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def nil)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (associative_mult formula-decl nil number_fields nil)
    (left_distributive? const-decl "bool" operator_defs_more nil)
    (right_distributive? const-decl "bool" operator_defs_more nil)
    (ring? const-decl "bool" ring_def nil)
    (number_fields_left_identity_mult formula-decl nil
     number_fields_bis complex)
    (ring_with_one? const-decl "bool" ring_with_one_def nil))
   nil
   (euclidean_gcd_alg_in_Zi assuming
    "ring_euclidean_algorithm[complex, restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.*), 0, 1].ring_euclidean_algorithm"
    "fullset_is_ring_with_one: ASSUMPTION ring_with_one_def[ring_euclidean_algorithm.T, ring_euclidean_algorithm.+, ring_euclidean_algorithm.*, ring_euclidean_algorithm.zero, ring_euclidean_algorithm.one].ring_with_one?(sets[ring_euclidean_algorithm.T].fullset)")))
 (euclidean_gcd_alg_in_Zi_TCC6 0
  (euclidean_gcd_alg_in_Zi_TCC5-1 nil 3859976448
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (lemma "Zi_is_integral_domain_w_one")
        (("" (expand "integral_domain_w_one?")
          (("" (expand "integral_domain?") (("" (flatten) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integral_domain_w_one? const-decl "bool"
     integral_domain_with_one_def nil)
    (integral_domain? const-decl "bool" integral_domain_def nil)
    (Zi_is_integral_domain_w_one formula-decl nil
     ring_euclidean_gcd_algorithm_Zi nil))
   nil
   (euclidean_gcd_alg_in_Zi subtype
    "ring_euclidean_gcd_algorithm_Zi.Zi"
    "(ring_def[complex, restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.+), restrict[[numfield, numfield], [complex, complex], numfield].restrict(number_fields.*), 0].commutative_ring?)")))
 (euclidean_gcd_alg_in_Zi 0
  (euclidean_gcd_alg_in_Zi-1 nil 3860101981
   (""
    (stop-rewrite "plus_zero" "zero_plus" "one_right" "one_left"
     "right_identity" "left_identity")
    (("" (skeep)
      (("" (lemma "euclidean_gcd_alg_correctness[complex,+,*,0,1]")
        (("" (inst -1 "Zi" "phi_Zi" "f_phi_Zi" "x" "y") nil nil)) nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (euclidean_domain? const-decl "bool" euclidean_domain_def nil)
    (Zi const-decl "set[complex]" ring_euclidean_gcd_algorithm_Zi nil)
    (difference const-decl "set" sets nil)
    (singleton? const-decl "bool" sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (euclidean_ring? const-decl "bool" euclidean_ring_def nil)
    (euclidean_pair? const-decl "bool" euclidean_ring_def nil)
    (/= const-decl "boolean" notequal nil)
    (phi_Zi const-decl "nat" ring_euclidean_gcd_algorithm_Zi nil)
    (remove const-decl "set" sets nil)
    (euclidean_f_phi? const-decl "bool" euclidean_ring_def nil)
    (f_phi_Zi const-decl "[(Zi), (Zi)]" ring_euclidean_gcd_algorithm_Zi
     nil)
    (complex_plus_complex_is_complex application-judgement "complex"
     complex_types complex)
    (complex_times_complex_is_complex application-judgement "complex"
     complex_types complex)
    (euclidean_gcd_alg_correctness formula-decl nil
     ring_euclidean_algorithm nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (complex_pred const-decl "[number_field -> boolean]" complex_types
     complex)
    (complex nonempty-type-from-decl nil complex_types complex)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak)))

