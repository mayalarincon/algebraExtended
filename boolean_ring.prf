(boolean_ring
 (IMP_ring_basic_properties_TCC1 0
  (IMP_ring_basic_properties_TCC1-1 nil 3760283916
   ("" (lemma fullset_is_ring_w_one)
    (("" (expand "ring_with_one?") (("" (assert) nil nil)) nil)) nil)
   ((ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (fullset_is_ring_w_one formula-decl nil boolean_ring nil))
   nil))
 (IMP_ring_with_one_TCC1 0
  (IMP_ring_with_one_TCC1-1 nil 3791538289
   ("" (rewrite fullset_is_ring_w_one) nil nil)
   ((fullset_is_ring_w_one formula-decl nil boolean_ring nil)) nil))
 (boolean_ring_charac_2 0
  (boolean_ring_charac_2-1 nil 3737817236
   ("" (skeep)
    (("" (typepred "R")
      (("" (expand "boolean_ring?")
        (("" (flatten -1)
          (("" (copy -2)
            (("" (inst -1 "x + x")
              (("1" (rewrite "left_distributive")
                (("1" (rewrite "right_distributive")
                  (("1" (inst -3 "x")
                    (("1" (replace -3 -1)
                      (("1" (lemma "idempotent_add_is_zero")
                        (("1" (inst -1 "x+x") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "x")
                (("2" (hide -3 2)
                  (("2" (lemma "R_sum_star_closed")
                    (("2" (inst -1 "R" "x" "x")
                      (("2" (expand "member") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean_ring type-eq-decl nil boolean_ring_def nil)
    (boolean_ring? const-decl "bool" boolean_ring_def nil)
    (zero formal-const-decl "T" boolean_ring nil)
    (* formal-const-decl "[T, T -> T]" boolean_ring nil)
    (+ formal-const-decl "[T, T -> T]" boolean_ring nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil boolean_ring nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x skolem-const-decl "(R)" boolean_ring nil)
    (R skolem-const-decl "boolean_ring[T, +, *, zero]" boolean_ring
     nil)
    (right_distributive formula-decl nil ring "algebra/")
    (idempotent_add_is_zero formula-decl nil ring "algebra/")
    (left_distributive formula-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (member const-decl "bool" sets nil)
    (R_sum_star_closed formula-decl nil ring_basic_properties nil))
   shostak))
 (boolean_ring_commutative 0
  (boolean_ring_commutative-1 nil 3738688057
   ("" (skeep)
    (("" (typepred "R")
      (("" (expand "boolean_ring?")
        (("" (flatten -1)
          (("" (copy -2)
            (("" (inst -1 "x+y")
              (("1" (rewrite "left_distributive")
                (("1" (rewrite "right_distributive")
                  (("1" (rewrite "right_distributive")
                    (("1" (copy -3)
                      (("1" (inst -4 "x")
                        (("1" (replace -4 -2)
                          (("1" (hide -4)
                            (("1" (inst -1 "y")
                              (("1"
                                (replace -1 -2)
                                (("1"
                                  (hide -1 -3)
                                  (("1"
                                    (rewrite "plus_associative")
                                    (("1"
                                      (rewrite "cancel_left_plus")
                                      (("1"
                                        (case-replace
                                         "((x * y) + ((y * x) + y))=(x * y) + ((y * x) + y)")
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (rewrite
                                             "plus_associative"
                                             :dir
                                             RL)
                                            (("1"
                                              (case-replace
                                               "((x * y) + (y * x)) + y= zero+y")
                                              (("1"
                                                (rewrite
                                                 "cancel_right_plus"
                                                 -1)
                                                (("1"
                                                  (lemma
                                                   "boolean_ring_charac_2")
                                                  (("1"
                                                    (inst -1 "R" "y*x")
                                                    (("1"
                                                      (replace
                                                       -1
                                                       -2
                                                       rl)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (rewrite
                                                           "cancel_right_plus"
                                                           -1)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (-1 -2 2))
                                                      (("2"
                                                        (typepred "R")
                                                        (("2"
                                                          (expand
                                                           "boolean_ring?")
                                                          (("2"
                                                            (expand
                                                             "ring?")
                                                            (("2"
                                                              (flatten
                                                               -1)
                                                              (("2"
                                                                (hide-all-but
                                                                 (-2
                                                                  1))
                                                                (("2"
                                                                  (expand
                                                                   "star_closed?")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "y"
                                                                     "x")
                                                                    (("2"
                                                                      (expand
                                                                       "member")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide (2 -2))
                (("2" (expand "ring?")
                  (("2" (expand "abelian_group?")
                    (("2" (expand "group?")
                      (("2" (expand "monoid?")
                        (("2" (expand "monad?")
                          (("2" (flatten -1)
                            (("2" (hide-all-but (-1 1))
                              (("2"
                                (expand "star_closed?")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (expand "member")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean_ring type-eq-decl nil boolean_ring_def nil)
    (boolean_ring? const-decl "bool" boolean_ring_def nil)
    (zero formal-const-decl "T" boolean_ring nil)
    (* formal-const-decl "[T, T -> T]" boolean_ring nil)
    (+ formal-const-decl "[T, T -> T]" boolean_ring nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil boolean_ring nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (y skolem-const-decl "(R)" boolean_ring nil)
    (x skolem-const-decl "(R)" boolean_ring nil)
    (R skolem-const-decl "boolean_ring[T, +, *, zero]" boolean_ring
     nil)
    (right_distributive formula-decl nil ring "algebra/")
    (cancel_left_plus formula-decl nil ring "algebra/")
    (boolean_ring_charac_2 formula-decl nil boolean_ring nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (member const-decl "bool" sets nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (cancel_right_plus formula-decl nil ring "algebra/")
    (zero_plus formula-decl nil ring "algebra/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (plus_associative formula-decl nil ring "algebra/")
    (left_distributive formula-decl nil ring "algebra/")
    (group? const-decl "bool" group_def "algebra/")
    (monad? const-decl "bool" monad_def "algebra/")
    (monoid? const-decl "bool" monoid_def "algebra/")
    (abelian_group? const-decl "bool" group_def "algebra/"))
   shostak))
 (sub_bool_ring_is_bool_ring_TCC1 0
  (sub_bool_ring_is_bool_ring_TCC1-1 nil 3751981928
   ("" (subtype-tcc) nil nil)
   ((boolean_ring type-eq-decl nil boolean_ring_def nil)
    (boolean_ring? const-decl "bool" boolean_ring_def nil)
    (set type-eq-decl nil sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (zero formal-const-decl "T" boolean_ring nil)
    (* formal-const-decl "[T, T -> T]" boolean_ring nil)
    (+ formal-const-decl "[T, T -> T]" boolean_ring nil)
    (T formal-nonempty-type-decl nil boolean_ring nil)
    (plus_zero formula-decl nil ring "algebra/")
    (restrict const-decl "R" restrict nil)
    (zero_plus formula-decl nil ring "algebra/")
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def "algebra/")
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def "algebra/")
    (inv_exists? const-decl "bool" group_def "algebra/")
    (group? const-decl "bool" group_def "algebra/")
    (commutative? const-decl "bool" operator_defs nil)
    (abelian_group? const-decl "bool" group_def "algebra/")
    (left_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (right_distributive? const-decl "bool" operator_defs_more
     "algebra/")
    (ring? const-decl "bool" ring_def "algebra/"))
   nil))
 (sub_bool_ring_is_bool_ring 0
  (sub_bool_ring_is_bool_ring-1 nil 3752853863
   ("" (skosimp)
    (("" (expand "subring?")
      (("" (flatten)
        (("" (typepred "R!1")
          (("" (expand "boolean_ring?")
            (("" (flatten -1)
              (("" (assert)
                (("" (skosimp)
                  (("" (inst -2 "x!1")
                    (("" (expand "subset?")
                      (("" (inst -2 "x!1") (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subring? const-decl "bool" ring_def "algebra/")
    (boolean_ring type-eq-decl nil boolean_ring_def nil)
    (boolean_ring? const-decl "bool" boolean_ring_def nil)
    (zero formal-const-decl "T" boolean_ring nil)
    (* formal-const-decl "[T, T -> T]" boolean_ring nil)
    (+ formal-const-decl "[T, T -> T]" boolean_ring nil)
    (set type-eq-decl nil sets nil)
    (T formal-nonempty-type-decl nil boolean_ring nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (R!1 skolem-const-decl "boolean_ring[T, +, *, zero]" boolean_ring
     nil)
    (S!1 skolem-const-decl "set[T]" boolean_ring nil)
    (x!1 skolem-const-decl "(S!1)" boolean_ring nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (bool_ring_only_unity_is_one 0
  (bool_ring_only_unity_is_one-1 nil 3791537418
   ("" (skosimp)
    (("" (skosimp)
      (("" (lemma times_associative)
        (("" (inst -1 "x!1" "x!1" "y!1")
          (("" (replace -3 -1)
            (("" (typepred "R!1")
              (("" (expand "boolean_ring?")
                (("" (flatten)
                  (("" (inst -2 "x!1")
                    (("" (replaces -2 -3)
                      (("" (replaces -4 -2)
                        (("" (rewrite times_one)
                          (("" (split)
                            (("1" (assert) nil nil)
                             ("2" (reveal -1)
                              (("2"
                                (case
                                 "one = x!1 IMPLIES one * y!1 = x!1 * y!1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (hide-all-but (-1 1))
                                    (("2"
                                      (replace -1 1 rl)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (boolean_ring? const-decl "bool" boolean_ring_def nil)
    (boolean_ring type-eq-decl nil boolean_ring_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (times_one formula-decl nil ring_with_one "algebra/")
    (one formal-const-decl "T" boolean_ring nil)
    (one_times formula-decl nil ring_with_one "algebra/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (times_associative formula-decl nil ring "algebra/")
    (T formal-nonempty-type-decl nil boolean_ring nil)
    (+ formal-const-decl "[T, T -> T]" boolean_ring nil)
    (* formal-const-decl "[T, T -> T]" boolean_ring nil)
    (zero formal-const-decl "T" boolean_ring nil))
   shostak)))

