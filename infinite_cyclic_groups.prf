(infinite_cyclic_groups
 (Z_TCC1 0
  (Z_TCC1-1 nil 3406996205
   ("" (expand "group?")
    (("" (prop)
      (("1" (grind) nil nil)
       ("2" (expand "inv_exists?")
        (("2" (skosimp*)
          (("2" (inst + "-x!1")
            (("1" (ground) nil nil)
             ("2" (typepred "x!1") (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil) (member const-decl "bool" sets nil)
    (star_closed? const-decl "bool" groupoid_def nil)
    (restrict const-decl "R" restrict nil)
    (identity? const-decl "bool" operator_defs nil)
    (monad? const-decl "bool" monad_def nil)
    (associative? const-decl "bool" operator_defs nil)
    (monoid? const-decl "bool" monoid_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "(fullset[int])" infinite_cyclic_groups nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (inv_exists? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil))
   nil
   (Z assuming
    "group[int, restrict[[numfield, numfield], [int, int], numfield].restrict(number_fields.+), 0].group"
    "fullset_is_group: ASSUMPTION group_def[group.T, group.*, group.one].group?(sets[group.T].fullset)")))
 (F_TCC1 0
  (F_TCC1-1 nil 3406996842
   ("" (lemma "fullset_is_group") (("" (propax) nil nil)) nil)
   ((fullset_is_group formula-decl nil infinite_cyclic_groups nil)) nil
   (F assuming
    "group[infinite_cyclic_groups.T, infinite_cyclic_groups.*, infinite_cyclic_groups.one].group"
    "fullset_is_group: ASSUMPTION group_def[group.T, group.*, group.one].group?(sets[group.T].fullset)")))
 (Z_gen 0
  (Z_gen-1 nil 3407077739
   ("" (skosimp*)
    (("" (case "(FORALL (n: nat): n = group[int,+,0].^(1,n) )")
      (("1" (case "i!1 >= 0")
        (("1" (inst?) nil nil)
         ("2" (inst - "-i!1")
          (("1" (lemma "expt_neg[int,+,0]")
            (("1" (inst?)
              (("1" (replace -1)
                (("1" (hide -1)
                  (("1" (lemma "inv_expt[int,+,0]")
                    (("1" (inst - "1" "i!1")
                      (("1" (replace -1 - rl)
                        (("1" (hide -1)
                          (("1"
                            (case "inv[int,+,0](group[int,+,0].^(1,i!1)) =   -(group[int,+,0].^(1,i!1))")
                            (("1" (replace -1)
                              (("1" (hide -1) (("1" (assert) nil nil)) nil))
                              nil)
                             ("2" (hide 3) (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n" 1)
          (("1" (grind) nil nil)
           ("2" (skosimp*)
            (("2" (lemma "expt_def1[int,+,0]")
              (("2" (inst - "1" "j!1")
                (("2" (replace -1) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((^ const-decl "T" group nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (restrict const-decl "R" restrict nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inv_expt formula-decl nil group nil)
    (expt_neg formula-decl nil group nil)
    (i!1 skolem-const-decl "int" infinite_cyclic_groups nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (power def-decl "T" monoid_def nil) (expt_def1 formula-decl nil group nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint" integers nil))
   shostak))
 (inf_cyclic_is_Z 0
  (inf_cyclic_is_Z-1 nil 3406997495
   ("" (skosimp*)
    (("" (expand "isomorphic?")
      (("" (inst + "(LAMBDA (n: int): group[T,*,one].^(a!1,n))")
        (("1" (expand "restrict")
          (("1" (expand "isomorphism?")
            (("1" (prop)
              (("1" (expand "bijective?")
                (("1" (prop)
                  (("1" (expand "injective?")
                    (("1" (skosimp*)
                      (("1" (lemma "generated_by_is_finite[T,*,one]")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst?)
                              (("1" (hide 3)
                                (("1" (prop)
                                  (("1" (expand "F") (("1" (propax) nil nil))
                                    nil)
                                   ("2" (case "x1!1 >= x2!1")
                                    (("1" (inst + "x1!1 - x2!1")
                                      (("1"
                                        (lemma "expt_div[T,*,one]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replace -1 * rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "cancel_right[T,*,one]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "group[T, *, one].^(a!1, x2!1)")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (case-replace
                                                           "group[T,*, one].^(a!1, x2!1) * 
                     group[T,*,one].^(inv[T,*,one](a!1),x2!1) = one")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -1 -3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "expt_inv_right[T,*,one]")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (inst + "x2!1 - x1!1")
                                      (("1"
                                        (lemma "expt_div[T,*,one]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replace -1 * rl)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (lemma
                                                 "cancel_right[T,*,one]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (inst
                                                     -
                                                     "group[T, *, one].^(a!1, x1!1)")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (case-replace
                                                           "group[T,*, one].^(a!1, x1!1) *
                                   group[T,*,one].^(inv[T,*,one](a!1),x1!1) = one")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -1 -3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "expt_inv_right[T,*,one]")
                                                                (("2"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "surjective?")
                      (("2" (skosimp*)
                        (("2" (typepred "y!1")
                          (("2" (expand "F")
                            (("2" (expand "generated_by")
                              (("2" (skosimp*)
                                (("2" (inst?)
                                  (("1" (assert) nil nil)
                                   ("2" (assert)
                                    (("2" (expand "Z")
                                      (("2"
                                        (expand "generated_by")
                                        (("2"
                                          (inst?)
                                          (("2" (rewrite "Z_gen") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "homomorphism?")
                  (("2" (skosimp*)
                    (("2" (lemma "expt_mult[T,*,one]")
                      (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skosimp*)
          (("2" (expand "F")
            (("2" (expand "generated_by") (("2" (inst + "x1!1") nil nil))
              nil))
            nil))
          nil)
         ("3" (skosimp*)
          (("3" (expand "F")
            (("3" (expand "generated_by") (("3" (inst + "n!1") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((isomorphic? const-decl "bool" homomorphisms nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])" real_props
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x1!1 skolem-const-decl "(Z)" infinite_cyclic_groups nil)
    (x2!1 skolem-const-decl "(Z)" infinite_cyclic_groups nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt_inv_right formula-decl nil group nil)
    (cancel_right formula-decl nil group nil)
    (expt_div formula-decl nil group nil) (>= const-decl "bool" reals nil)
    (generated_by_is_finite formula-decl nil group nil)
    (injective? const-decl "bool" functions nil)
    (surjective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (generated_by const-decl "group" group nil)
    (i!1 skolem-const-decl "int" infinite_cyclic_groups nil)
    (Z_gen formula-decl nil infinite_cyclic_groups nil)
    (bijective? const-decl "bool" functions nil)
    (homomorphism? const-decl "bool" homomorphisms nil)
    (expt_mult formula-decl nil group nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (isomorphism? const-decl "bool" homomorphisms nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (restrict const-decl "R" restrict nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Z const-decl
     "group[int, restrict[[numfield, numfield], [int, int], numfield](+), 0]"
     infinite_cyclic_groups nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T formal-nonempty-type-decl nil infinite_cyclic_groups nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" infinite_cyclic_groups nil)
    (one formal-const-decl "T" infinite_cyclic_groups nil)
    (group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (F const-decl "group[T, *, one]" infinite_cyclic_groups nil)
    (a!1 skolem-const-decl "T" infinite_cyclic_groups nil)
    (^ const-decl "T" group nil))
   shostak)))

