(ring_homomorphisms_def
 (IMP_ring_TCC1 0
  (IMP_ring_TCC1-1 nil 3716286944
   ("" (lemma "R1_is_ring") (("" (propax) nil nil)) nil)
   ((R1_is_ring formula-decl nil ring_homomorphisms_def nil)) nil))
 (IMP_ring_TCC2 0
  (IMP_ring_TCC2-1 nil 3716286944
   ("" (lemma "R2_is_ring") (("" (propax) nil nil)) nil)
   ((R2_is_ring formula-decl nil ring_homomorphisms_def nil)) nil))
 (IMP_homomorphisms_TCC1 0
  (IMP_homomorphisms_TCC1-1 nil 3716286944
   ("" (lemma "R1_is_ring")
    (("" (expand "ring?")
      (("" (expand "abelian_group?") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((ring? const-decl "bool" ring_def "algebra/")
    (abelian_group? const-decl "bool" group_def "algebra/")
    (R1_is_ring formula-decl nil ring_homomorphisms_def nil))
   nil))
 (IMP_homomorphisms_TCC2 0
  (IMP_homomorphisms_TCC2-1 nil 3716286944
   ("" (lemma "R2_is_ring")
    (("" (expand "ring?")
      (("" (expand "abelian_group?") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((ring? const-decl "bool" ring_def "algebra/")
    (abelian_group? const-decl "bool" group_def "algebra/")
    (R2_is_ring formula-decl nil ring_homomorphisms_def nil))
   nil))
 (R_homomorphism?_TCC1 0
  (R_homomorphism?_TCC1-1 nil 3709409057
   ("" (skosimp)
    (("" (typepred "R1!1")
      (("" (expand "ring?")
        (("" (flatten)
          (("" (hide-all-but (-1 1))
            (("" (expand "abelian_group?")
              (("" (expand "group?")
                (("" (expand "monoid?")
                  (("" (expand "monad?")
                    (("" (flatten)
                      (("" (hide-all-but (-1 1))
                        (("" (expand "star_closed?")
                          (("" (inst -1 "a!1" "b!1")
                            (("" (expand "member")
                              (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring nonempty-type-eq-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (zero1 formal-const-decl "T1" ring_homomorphisms_def nil)
    (p1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (s1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (set type-eq-decl nil sets nil)
    (T1 formal-nonempty-type-decl nil ring_homomorphisms_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (abelian_group? const-decl "bool" group_def "algebra/")
    (monoid? const-decl "bool" monoid_def "algebra/")
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (member const-decl "bool" sets nil)
    (monad? const-decl "bool" monad_def "algebra/")
    (group? const-decl "bool" group_def "algebra/"))
   nil))
 (R_homomorphism?_TCC2 0
  (R_homomorphism?_TCC2-1 nil 3709409057
   ("" (skosimp)
    (("" (typepred "R1!1")
      (("" (expand "ring?")
        (("" (flatten)
          (("" (hide-all-but (-2 1))
            (("" (expand "star_closed?")
              (("" (inst -1 "a!1" "b!1")
                (("" (expand "member") (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring nonempty-type-eq-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (zero1 formal-const-decl "T1" ring_homomorphisms_def nil)
    (p1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (s1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (set type-eq-decl nil sets nil)
    (T1 formal-nonempty-type-decl nil ring_homomorphisms_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (star_closed? const-decl "bool" groupoid_def "algebra/")
    (member const-decl "bool" sets nil))
   nil))
 (R_homo_is_homo 0
  (R_homo_is_homo-1 nil 3709409057
   ("" (skosimp)
    (("" (typepred "x!1")
      (("" (expand "R_homomorphism?")
        (("" (expand "homomorphism?")
          (("" (skosimp)
            (("" (inst -1 "a!1" "b!1") (("" (flatten) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (zero2 formal-const-decl "T2" ring_homomorphisms_def nil)
    (p2 formal-const-decl "[T2, T2 -> T2]" ring_homomorphisms_def nil)
    (s2 formal-const-decl "[T2, T2 -> T2]" ring_homomorphisms_def nil)
    (T2 formal-nonempty-type-decl nil ring_homomorphisms_def nil)
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (zero1 formal-const-decl "T1" ring_homomorphisms_def nil)
    (p1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (s1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (set type-eq-decl nil sets nil)
    (T1 formal-nonempty-type-decl nil ring_homomorphisms_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (homomorphism? const-decl "bool" homomorphisms "algebra/"))
   nil))
 (zero_to_zero_TCC1 0
  (zero_to_zero_TCC1-1 nil 3715688144
   ("" (skosimp)
    (("" (typepred "R1!1")
      (("" (expand "ring?")
        (("" (expand "abelian_group?")
          (("" (expand "group?")
            (("" (expand "monoid?")
              (("" (expand "monad?")
                (("" (flatten)
                  (("" (hide-all-but (-2 1))
                    (("" (expand "member") (("" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring nonempty-type-eq-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (zero1 formal-const-decl "T1" ring_homomorphisms_def nil)
    (p1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (s1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (set type-eq-decl nil sets nil)
    (T1 formal-nonempty-type-decl nil ring_homomorphisms_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (abelian_group? const-decl "bool" group_def "algebra/")
    (monoid? const-decl "bool" monoid_def "algebra/")
    (member const-decl "bool" sets nil)
    (monad? const-decl "bool" monad_def "algebra/")
    (group? const-decl "bool" group_def "algebra/"))
   nil))
 (zero_to_zero 0
  (zero_to_zero-1 nil 3715688344
   ("" (skosimp)
    (("" (lemma "homo_one")
      (("" (inst -1 "R1!1" "R2!1" "phi!1")
        (("" (lemma "R_homo_is_homo")
          (("" (inst -1 "R1!1" "R2!1" "phi!1") nil nil)) nil))
        nil))
      nil))
    nil)
   ((zero2 formal-const-decl "T2" ring_homomorphisms_def nil)
    (s2 formal-const-decl "[T2, T2 -> T2]" ring_homomorphisms_def nil)
    (T2 formal-nonempty-type-decl nil ring_homomorphisms_def nil)
    (zero1 formal-const-decl "T1" ring_homomorphisms_def nil)
    (s1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (T1 formal-nonempty-type-decl nil ring_homomorphisms_def nil)
    (homo_one formula-decl nil homomorphisms "algebra/")
    (R_homo_is_homo judgement-tcc nil ring_homomorphisms_def nil)
    (R1!1 skolem-const-decl "ring[T1, s1, p1, zero1]"
     ring_homomorphisms_def nil)
    (R2!1 skolem-const-decl "ring[T2, s2, p2, zero2]"
     ring_homomorphisms_def nil)
    (phi!1 skolem-const-decl "R_homomorphism(R1!1, R2!1)"
     ring_homomorphisms_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (homomorphism type-eq-decl nil homomorphisms "algebra/")
    (homomorphism? const-decl "bool" homomorphisms "algebra/")
    (p2 formal-const-decl "[T2, T2 -> T2]" ring_homomorphisms_def nil)
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (p1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (group nonempty-type-eq-decl nil group "algebra/")
    (group? const-decl "bool" group_def "algebra/")
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (inv1_to_inv2_homo_TCC1 0
  (inv1_to_inv2_homo_TCC1-1 nil 3709409057
   ("" (skosimp)
    (("" (typepred "R1!1")
      (("" (expand "ring?")
        (("" (expand "abelian_group?")
          (("" (expand "group?")
            (("" (flatten)
              (("" (hide-all-but (-2 1))
                (("" (typepred "x!1")
                  (("" (expand "inv_exists?")
                    (("" (inst -2 "x!1")
                      (("" (skosimp)
                        (("" (hide -3)
                          (("" (typepred "inv(x!1)")
                            (("" (hide -2)
                              ((""
                                (replace -1 -3 rl)
                                ((""
                                  (hide -1)
                                  ((""
                                    (rewrite "cancel_left_plus")
                                    (("" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ring nonempty-type-eq-decl nil ring "algebra/")
    (ring? const-decl "bool" ring_def "algebra/")
    (zero1 formal-const-decl "T1" ring_homomorphisms_def nil)
    (p1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (s1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (set type-eq-decl nil sets nil)
    (T1 formal-nonempty-type-decl nil ring_homomorphisms_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (abelian_group? const-decl "bool" group_def "algebra/")
    (cancel_left_plus formula-decl nil ring "algebra/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group
     "algebra/")
    (inv_exists? const-decl "bool" group_def "algebra/")
    (group? const-decl "bool" group_def "algebra/"))
   nil))
 (inv1_to_inv2_homo 0
  (inv1_to_inv2_homo-1 nil 3709410310
   ("" (skosimp)
    (("" (skosimp)
      (("" (typepred "phi!1")
        (("" (expand "R_homomorphism?")
          (("" (inst -1 "x!1" "inv(x!1)")
            (("" (flatten)
              (("" (hide -2)
                (("" (assert)
                  (("" (rewrite "zero_to_zero")
                    (("" (lemma "plus_zero[T2,s2,p2,zero2]")
                      (("" (inst -1 "inv(phi!1(x!1))")
                        (("" (replace -2 -1)
                          (("" (hide -2)
                            ((""
                              (rewrite "plus_associative" -1 :dir rl)
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((inv_right formula-decl nil group "algebra/")
    (plus_zero formula-decl nil ring "algebra/")
    (left_identity formula-decl nil monad "algebra/")
    (inv_left formula-decl nil group "algebra/")
    (plus_associative formula-decl nil ring "algebra/")
    (zero_to_zero formula-decl nil ring_homomorphisms_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group
     "algebra/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T1 formal-nonempty-type-decl nil ring_homomorphisms_def nil)
    (set type-eq-decl nil sets nil)
    (s1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (p1 formal-const-decl "[T1, T1 -> T1]" ring_homomorphisms_def nil)
    (zero1 formal-const-decl "T1" ring_homomorphisms_def nil)
    (ring? const-decl "bool" ring_def "algebra/")
    (ring nonempty-type-eq-decl nil ring "algebra/")
    (T2 formal-nonempty-type-decl nil ring_homomorphisms_def nil)
    (s2 formal-const-decl "[T2, T2 -> T2]" ring_homomorphisms_def nil)
    (p2 formal-const-decl "[T2, T2 -> T2]" ring_homomorphisms_def nil)
    (zero2 formal-const-decl "T2" ring_homomorphisms_def nil)
    (R_homomorphism? const-decl "bool" ring_homomorphisms_def nil)
    (R_homomorphism type-eq-decl nil ring_homomorphisms_def nil))
   shostak)))

