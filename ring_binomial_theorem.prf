(ring_binomial_theorem
 (IMP_ring_with_one_basic_properties_TCC1 0
  (IMP_ring_with_one_basic_properties_TCC1-1 nil 3716292039
   ("" (lemma "fullset_is_ring_with_one") (("" (propax) nil nil)) nil)
   ((fullset_is_ring_with_one formula-decl nil ring_binomial_theorem
     nil))
   nil))
 (F_bino_TCC1 0
  (F_bino_TCC1-1 nil 3710087439 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (F_bino_TCC2 0
  (F_bino_TCC2-1 nil 3710087439 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (R_bino_theo 0
  (R_bino_theo-1 nil 3710087892
   ("" (skolem 1 ("R!1" "_" "x!1" "y!1"))
    (("" (induct "n")
      (("1" (prop)
        (("1" (expand "R_sigma")
          (("1" (expand "F_bino")
            (("1" (expand "power")
              (("1" (expand "C")
                (("1" (expand "factorial")
                  (("1" (lemma "times_int_one")
                    (("1" (inst? -1)
                      (("1" (replaces -1)
                        (("1" (lemma "times_one")
                          (("1" (inst? -1) (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp*)
        (("2" (assert)
          (("2" (expand "power" 1)
            (("2" (replace -1 1)
              (("2" (rewrite "left_distributive")
                (("2" (rewrite "ast_R_sigma")
                  (("2" (rewrite "ast_R_sigma")
                    (("2"
                      (name-replace "F_x"
                       "LAMBDA i: x!1 * F_bino(j!1, x!1, y!1)(i)"
                       :hide? nil)
                      (("2"
                        (name-replace "F_y"
                         "LAMBDA i: y!1 * F_bino(j!1, x!1, y!1)(i)"
                         :hide? nil)
                        (("2" (expand "F_bino" (-1 -2))
                          (("2"
                            (case "F_y =
                                           (LAMBDA i:
                                             IF i > j!1 THEN zero
                                             ELSE times(power(x!1, i) * power(y!1, j!1 - i + 1), C(j!1, i))
                                             ENDIF)")
                            (("1"
                              (case "F_x =
                                                      (LAMBDA i:
                                                       IF i > j!1 THEN zero
                                                       ELSE times(power(x!1, i + 1) * power(y!1, j!1 - i), C(j!1, i))
                                                       ENDIF)")
                              (("1"
                                (hide -3 -4)
                                (("1"
                                  (lemma "R_sigma_first")
                                  (("1"
                                    (inst -1 "F_y" "j!1" "0")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "R_sigma" 1 1)
                                            (("1"
                                              (case "NOT j!1 = 0")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "R_sigma(0, j!1 - 1, F_x) =
                                                                         R_sigma(1, j!1,
                                                                             LAMBDA i:
                                                                              IF (i=0 OR i > j!1) THEN zero
                                                                              ELSE times(power(x!1, i) * power(y!1, j!1 - i + 1), C(j!1, i-1))
                                                                              ENDIF)")
                                                  (("1"
                                                    (name-replace
                                                     "F1_x"
                                                     "LAMBDA i:
                                          IF (i = 0 OR i > j!1) THEN ring_binomial_theorem.zero
                                          ELSE times(power(x!1, i) * power(y!1, j!1 - i + 1),C(j!1, i - 1))
                                          ENDIF"
                                                     :hide?
                                                     nil)
                                                    (("1"
                                                      (replace -2 2)
                                                      (("1"
                                                        (hide -2)
                                                        (("1"
                                                          (rewrite
                                                           "plus_commutative"
                                                           2)
                                                          (("1"
                                                            (rewrite
                                                             "plus_associative"
                                                             2)
                                                            (("1"
                                                              (rewrite
                                                               "plus_associative"
                                                               2
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (rewrite
                                                                 "plus_commutative"
                                                                 2)
                                                                (("1"
                                                                  (rewrite
                                                                   "plus_associative"
                                                                   2)
                                                                  (("1"
                                                                    (case-replace
                                                                     "R_sigma(1, j!1, F1_x) + R_sigma(1, j!1, F_y) =
                                                                              R_sigma(1, j!1, LAMBDA i: F1_x(i) + F_y(i))")
                                                                    (("1"
                                                                      (hide
                                                                       -1)
                                                                      (("1"
                                                                        (name-replace
                                                                         "Fxy"
                                                                         "LAMBDA i: F1_x(i) + F_y(i)"
                                                                         :hide?
                                                                         nil)
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           -1
                                                                           rl)
                                                                          (("1"
                                                                            (replace
                                                                             -4
                                                                             -1)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "(FORALL (x: nat):
                                                                                            IF (x = 0 OR x > j!1) THEN zero
                                                                                            ELSE times(power(x!1, x) * power(y!1, 1 - x + j!1), C(j!1, x - 1))
                                                                                            ENDIF
                                                                                             +
                                                                                             IF x > j!1 THEN zero
                                                                                             ELSE times(power(x!1, x) * power(y!1, 1 - x + j!1), C(j!1, x))
                                                                                             ENDIF = Fxy(x))
                                                                                     IMPLIES
                                                                                           (FORALL (x: nat):
                                                                                             IF x = 0 THEN times(power(x!1, x) * power(y!1, 1 - x + j!1), C(j!1, x))
                                                                                             ELSIF x > j!1 THEN zero
                                                                                             ELSE
                                                                                         times(power(x!1, x) * power(y!1, 1 - x + j!1), C(j!1, x) + C(j!1, x - 1))
                                                                                             ENDIF = Fxy(x))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "R_sigma"
                                                                                         2
                                                                                         2)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "R_sigma_first")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "F_bino(1 + j!1, x!1, y!1)"
                                                                                             "j!1"
                                                                                             "0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (case-replace
                                                                                                     "F_x(j!1) = F_bino(1 + j!1, x!1, y!1)(1 + j!1)")
                                                                                                    (("1"
                                                                                                      (case-replace
                                                                                                       "F_y(0) = F_bino(1 + j!1, x!1, y!1)(0)")
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "plus_associative"
                                                                                                         2
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "plus_commutative"
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "plus_commutative")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "R_sigma(1, j!1, F_bino(1 + j!1, x!1, y!1))"
                                                                                                               "F_bino(1 + j!1, x!1, y!1)(1 + j!1)")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "plus_associative")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "F_bino(1 + j!1, x!1, y!1)(0)"
                                                                                                                   "R_sigma(1, j!1, F_bino(1 + j!1, x!1, y!1))"
                                                                                                                   "F_bino(1 + j!1, x!1, y!1)(1 + j!1)")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "plus_associative"
                                                                                                                           2
                                                                                                                           :dir
                                                                                                                           rl)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "R_sigma(1, j!1, Fxy) = R_sigma(1, j!1, F_bino(1 + j!1, x!1, y!1))")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (hide
                                                                                                                               -1
                                                                                                                               -2
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "R_sigma_eq")
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (skosimp)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "n!1")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -3
                                                                                                                                         "n!1")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "F_bino"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -3
                                                                                                                                               1
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (hide-all-but
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "C_n_plus_1")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "j!1"
                                                                                                                                                     "n!1")
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide-all-but
                                                                                                         (-5
                                                                                                          -7
                                                                                                          1
                                                                                                          2))
                                                                                                        (("2"
                                                                                                          (decompose-equality
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "0")
                                                                                                            (("2"
                                                                                                              (replaces
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "F_bino")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "C_0")
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "C_0")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       (-3
                                                                                                        1
                                                                                                        2))
                                                                                                      (("2"
                                                                                                        (decompose-equality
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "j!1")
                                                                                                          (("2"
                                                                                                            (replaces
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "F_bino")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "C_n")
                                                                                                                (("2"
                                                                                                                  (rewrite
                                                                                                                   "C_n")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   3)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (skosimp)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x!2")
                                                                                        (("2"
                                                                                          (lift-if
                                                                                           1)
                                                                                          (("2"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (rewrite
                                                                                                 "times_sum")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("3"
                                                                                      (skosimp)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (flatten)
                                                                                  (("4"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("4"
                                                                                      (skosimp)
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("5"
                                                                                  (flatten)
                                                                                  (("5"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("5"
                                                                                      (skosimp)
                                                                                      (("5"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("6"
                                                                                  (flatten)
                                                                                  (("6"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("6"
                                                                                      (skosimp)
                                                                                      (("6"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("7"
                                                                                  (flatten)
                                                                                  (("7"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("7"
                                                                                      (skosimp)
                                                                                      (("7"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (rewrite
                                                                       "R_sigma_sum")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide-all-but 1)
                                                      (("2"
                                                        (skosimp)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -2 -3 -4 3)
                                                    (("2"
                                                      (name-replace
                                                       "G"
                                                       "LAMBDA i:
                                                     IF (i = 0 OR i > j!1) THEN ring_binomial_theorem.zero
                                                     ELSE times(power(x!1, i) * power(y!1, j!1 - i + 1),
                                                                C(j!1, i - 1))
                                                     ENDIF"
                                                       :hide?
                                                       nil)
                                                      (("1"
                                                        (lemma
                                                         "R_sigma_eq2")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "F_x"
                                                           "G"
                                                           "j!1-1"
                                                           "0")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (skosimp)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1
                                                                   rl)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -1 2)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide-all-but 1)
                                                    (("3"
                                                      (skosimp)
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide-all-but 1)
                                                    (("4"
                                                      (skosimp)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide -4 -5)
                                                  (("2"
                                                    (replaces -2)
                                                    (("2"
                                                      (replaces -2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replaces -1)
                                                          (("2"
                                                            (expand
                                                             "R_sigma")
                                                            (("2"
                                                              (expand
                                                               "R_sigma")
                                                              (("2"
                                                                (expand*
                                                                 "power"
                                                                 "F_bino")
                                                                (("2"
                                                                  (expand*
                                                                   "power"
                                                                   "C"
                                                                   "power"
                                                                   "factorial")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (rewrite
                                                                       "plus_commutative")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (-3 -5 1))
                                (("2"
                                  (replace -1 1 rl)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (decompose-equality)
                                      (("1"
                                        (lift-if)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (rewrite "right_times")
                                              (("1"
                                                (rewrite
                                                 "times_associative"
                                                 2
                                                 :dir
                                                 rl)
                                                (("1"
                                                  (lemma
                                                   "power_mult[T,*,one]")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "x!1"
                                                     "x!2"
                                                     "1")
                                                    (("1"
                                                      (rewrite
                                                       "power_1")
                                                      (("1"
                                                        (replaces -1 2)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (skosimp)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (hide-all-but 1)
                                        (("3"
                                          (skosimp)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide-all-but 1)
                                (("3"
                                  (skosimp)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 -4 1))
                              (("2"
                                (replace -1 1 rl)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (decompose-equality)
                                    (("1"
                                      (lift-if)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (prop)
                                          (("1"
                                            (rewrite "right_times")
                                            (("1"
                                              (rewrite
                                               "times_associative"
                                               2
                                               :dir
                                               rl)
                                              (("1"
                                                (lemma
                                                 "power_mult[T,*,one]")
                                                (("1"
                                                  (rewrite
                                                   "power_commute_aux")
                                                  (("1"
                                                    (rewrite
                                                     "times_associative")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "y!1"
                                                       "j!1 - x!2"
                                                       "1")
                                                      (("1"
                                                        (rewrite
                                                         "power_1")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (skosimp)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide-all-but 1)
                                      (("3"
                                        (skosimp)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide-all-but 1)
                                      (("4"
                                        (skosimp)
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide-all-but 1)
                              (("3"
                                (skosimp)
                                (("3" (assert) nil nil))
                                nil))
                              nil)
                             ("4" (hide-all-but 1)
                              (("4"
                                (skosimp)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-nonempty-type-decl nil ring_binomial_theorem nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (* formal-const-decl "[T, T -> T]" ring_binomial_theorem nil)
    (set type-eq-decl nil sets nil)
    (+ formal-const-decl "[T, T -> T]" ring_binomial_theorem nil)
    (zero formal-const-decl "T" ring_binomial_theorem nil)
    (one formal-const-decl "T" ring_binomial_theorem nil)
    (ring_with_one? const-decl "bool" ring_with_one_def "algebra/")
    (power def-decl "T" monoid_def "algebra/")
    (R_sigma def-decl "T" ring_basic_properties nil)
    (F_bino const-decl "[nat -> T]" ring_binomial_theorem nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (factorial def-decl "posnat" factorial "ints/")
    (times_one formula-decl nil ring_with_one "algebra/")
    (TRUE const-decl "bool" booleans nil)
    (times_int_one formula-decl nil ring_basic_properties nil)
    (C const-decl "posnat" binomial "reals/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ast_R_sigma formula-decl nil ring_basic_properties nil)
    (power_commute_aux formula-decl nil ring_with_one_basic_properties
     nil)
    (x!2 skolem-const-decl "nat" ring_binomial_theorem nil)
    (R_sigma_first formula-decl nil ring_basic_properties nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (plus_commutative formula-decl nil ring "algebra/")
    (R_sigma_sum formula-decl nil ring_basic_properties nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (power_0 formula-decl nil monoid "algebra/")
    (one_times formula-decl nil ring_with_one "algebra/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (times_sum formula-decl nil ring_basic_properties nil)
    (left_identity formula-decl nil monad "algebra/")
    (C_n formula-decl nil binomial "reals/")
    (subrange type-eq-decl nil integers nil)
    (C_n_plus_1 formula-decl nil binomial "reals/")
    (R_sigma_eq formula-decl nil ring_basic_properties nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (C_0 formula-decl nil binomial "reals/")
    (plus_associative formula-decl nil ring "algebra/")
    (R_sigma_eq2 formula-decl nil ring_basic_properties nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (factorial_0 formula-decl nil factorial "ints/")
    (right_identity formula-decl nil monad "algebra/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (power_1 formula-decl nil monoid "algebra/")
    (j!1 skolem-const-decl "nat" ring_binomial_theorem nil)
    (times_zero formula-decl nil ring "algebra/")
    (right_times formula-decl nil ring_basic_properties nil)
    (power_mult formula-decl nil monoid "algebra/")
    (times_associative formula-decl nil ring "algebra/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (> const-decl "bool" reals nil)
    (times const-decl "T" ring_basic_properties nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (left_distributive formula-decl nil ring "algebra/"))
   shostak)))

