%% TCCs associated with theory product_finseq_sets_ring
%% This file was automatically generated by PVS, please **do not modify** by hand.
product_finseq_sets_ring_TCCS: THEORY BEGIN

	% Assuming TCC generated (at line 34, column 3) for
	% cartesian_product_quot_ring[T, +, *, zero]
	% generated from assumption cartesian_product_quot_ring.fullset_is_ring
	  % proved
	IMP_cartesian_product_quot_ring_TCC1: OBLIGATION
	ring?[T, +, *, zero](fullset[T])
	
	% Assuming TCC generated (at line 36, column 3) for
	% ring_with_one[T, +, *, zero, one]
	% generated from assumption ring_with_one.fullset_is_ring_with_one
	  % proved
	IMP_ring_with_one_TCC1: OBLIGATION
	ring_with_one?[T, +, *, zero, one](fullset[T])
	
	% Subtype TCC generated (at line 50, column 30) for  0
	% expected type  below[fs`length]
	  % proved
	product_fs_rec_TCC1: OBLIGATION
	FORALL (fs: finseq[T], i: below[fs`length]): i = 0 IMPLIES 0 < fs`length
	
	% Subtype TCC generated (at line 51, column 45) for  i - 1
	% expected type  below[length(fs)]
	  % proved
	product_fs_rec_TCC2: OBLIGATION
	FORALL (fs: finseq[T], i: below[fs`length]):
	    NOT i = 0 IMPLIES i - 1 >= 0 AND i - 1 < fs`length
	
	% Termination TCC generated (at line 51, column 26) for
	% product_fs_rec(fs)(i - 1)
	  % proved
	product_fs_rec_TCC3: OBLIGATION
	FORALL (fs: finseq[T], i: below[fs`length]): NOT i = 0 IMPLIES i - 1 < i
	
	% Subtype TCC generated (at line 55, column 47) for
	% (number_fields.-)(length(fs), 1)
	% expected type  below[length(fs)]
	  % proved
	product_fs_TCC1: OBLIGATION
	FORALL (fs: finseq[T]):
	    NOT fs`length = 0 IMPLIES
	     ((number_fields.-)(fs`length, 1)) >= 0 AND
	      ((number_fields.-)(fs`length, 1)) < fs`length
	
	% Subtype TCC generated (at line 62, column 50) for  i
	% expected type  below[length(fsc)]
	  % proved
	product_of_sets_TCC1: OBLIGATION
	FORALL (n: posnat, fsc: finseq[finseq[T]]):
	    fsc`length = n IMPLIES FORALL (i: below(n)): i < fsc`length
	
	% Subtype TCC generated (at line 64, column 51) for  n - 1
	% expected type  int_below_N[T, +, *, zero, n]
	  % proved
	product_of_sets_TCC2: OBLIGATION
	FORALL (fsA: finseq[set[T]], n: posnat, fsc: finseq[finseq[T]]):
	    (fsc`length = n AND
	      FORALL (i: below(n)):
	        member(finseq_appl[finseq[T]](fsc)(i), cartesian_product_n[T](fsA)))
	     IMPLIES n - 1 < n
	
	% The subtype TCC (at line 64, column 99) in decl nil for
	% term generated from product_of_sets  k
	% expected type  below[fsc`length]
	% The assuming TCC (at line 64, column 20) in decl nil for
	% term generated from product_of_sets
	%  R_sigma_below[T, +, *, zero, n]
	% generated from assumption sigma_R_below.fullset_is_ring
	% Subtype TCC generated (at line 75, column 59) for  n
	% expected type  below[length(fs ^ (0, m))]
	  % proved
	product_fs_rec_caret_TCC1: OBLIGATION
	FORALL (fs: finseq[T], m, n: nat):
	    n <= m AND m < fs`length AND n < fs`length IMPLIES
	     n < (^[T](fs, (0, m)))`length
	
	% The subtype TCC (at line 64, column 99) in decl nil for
	 % term generated from product_of_sets  k
	    % expected type  below[fsc`length]
	  % is subsumed by product_of_sets_TCC1
	% The assuming TCC (at line 64, column 20) in decl nil for
	 % term generated from product_of_sets
	    %  R_sigma_below[T, +, *, zero, n]
	    % generated from assumption sigma_R_below.fullset_is_ring
	  % is subsumed by IMP_cartesian_product_quot_ring_TCC1
	
	% Subtype TCC generated (at line 82, column 49) for  n
	% expected type  below[length(fs2)]
	  % proved
	product_fs_rec_mult_TCC1: OBLIGATION
	FORALL (fs1, fs2: finseq[T], n: nat):
	    fs1`length = 0 AND NOT n < fs1`length AND n < (fs1 o fs2)`length IMPLIES
	     n < fs2`length
	
	% Subtype TCC generated (at line 84, column 49) for  n - length(fs1)
	% expected type  below[length(fs2)]
	  % proved
	product_fs_rec_mult_TCC2: OBLIGATION
	FORALL (fs1, fs2: finseq[T], n: nat):
	    NOT fs1`length = 0 AND NOT n < fs1`length AND n < (fs1 o fs2)`length
	     IMPLIES n - fs1`length >= 0 AND n - fs1`length < fs2`length
	
	% The subtype TCC (at line 85, column 30) in decl nil for
	% term generated from product_fs_rec_mult  fs1`length - 1
	% expected type  below[fs1`length]
	% Subtype TCC generated (at line 90, column 32) for  length(fs) - 1
	% expected type  below[fs`length]
	  % proved
	product_fs_split_TCC1: OBLIGATION
	FORALL (fs: finseq[T] | fs`length > 1):
	    fs`length - 1 >= 0 AND fs`length - 1 < fs`length
	
	% The subtype TCC (at line 85, column 30) in decl nil for
	 % term generated from product_fs_rec_mult  fs1`length - 1
	    % expected type  below[fs1`length]
	  % is subsumed by product_fs_TCC1
	
	% Subtype TCC generated (at line 90, column 70) for  length(fs) - 2
	% expected type  nat
	  % proved
	product_fs_split_TCC2: OBLIGATION
	FORALL (fs: finseq[T] | fs`length > 1): fs`length - 2 >= 0
	
	% Subtype TCC generated (at line 97, column 46) for  length(fs) - 1
	% expected type  nat
	  % proved
	Product_fs_o_split_TCC1: OBLIGATION
	FORALL (fs: finseq[T], j: below[fs`length] | j /= 0): fs`length - 1 >= 0
	
	% Subtype TCC generated (at line 97, column 93) for  j - 1
	% expected type  nat
	  % proved
	Product_fs_o_split_TCC2: OBLIGATION
	FORALL (fs: finseq[T], j: below[fs`length] | j /= 0): j - 1 >= 0
	
	% Subtype TCC generated (at line 107, column 50) for  length(fsA) - 1
	% expected type  below[length(fsx)]
	  % proved
	product_fs_rec_in_each_TCC1: OBLIGATION
	FORALL (R: ring[T, +, *, zero], fsA: fsI[T, +, *, zero](R) | fsA`length /= 0,
	          i: below[fsA`length], fsx: (cartesian_product_n[T](fsA))):
	    fsA`length - 1 >= 0 AND fsA`length - 1 < fsx`length
	
	% Subtype TCC generated (at line 123, column 43) for  i
	% expected type  below[length(r)]
	  % proved
	cartesian_product_fs_representative_TCC1: OBLIGATION
	FORALL (R: ring[T, +, *, zero], fsA: fsI[T, +, *, zero](R),
	          y: (cartesian_product_n[set[T]](fsQ[T, +, *, zero](R)(fsA))),
	          r: finseq[(R)] | r`length = fsA`length, i: below[y`length]):
	    i < r`length
	
	% Subtype TCC generated (at line 123, column 52) for  i
	% expected type  below[length(fsA)]
	  % proved
	cartesian_product_fs_representative_TCC2: OBLIGATION
	FORALL (R: ring[T, +, *, zero], fsA: fsI[T, +, *, zero](R),
	          y: (cartesian_product_n[set[T]](fsQ[T, +, *, zero](R)(fsA))),
	          r: finseq[(R)] | r`length = fsA`length, i: below[y`length]):
	    i < fsA`length

END product_finseq_sets_ring_TCCS