(group_rew
 (IMP_group_TCC1 0
  (IMP_group_TCC1-1 nil 3406631842 ("" (rewrite "fullset_is_group") nil nil)
   ((fullset_is_group formula-decl nil group_rew nil)) nil
   (IMP_group assuming "group[group_rew.T, group_rew.*, group_rew.one].group"
    "fullset_is_group: ASSUMPTION group_def[group.T, group.*, group.one].group?(sets[group.T].fullset)")))
 (inv_left 0
  (inv_left-1 nil 3406637320
   ("" (skosimp*) (("" (rewrite "inv_left") nil nil)) nil)
   ((inv_left formula-decl nil group nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (one formal-const-decl "T" group_rew nil))
   shostak))
 (inv_right 0
  (inv_right-1 nil 3406637329
   ("" (skosimp*) (("" (rewrite "inv_right") nil nil)) nil)
   ((inv_right formula-decl nil group nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (one formal-const-decl "T" group_rew nil))
   shostak))
 (inv_inv 0
  (inv_inv-1 nil 3406637362
   ("" (skosimp*) (("" (rewrite "inv_inv") nil nil)) nil)
   ((inv_inv formula-decl nil group nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (one formal-const-decl "T" group_rew nil))
   shostak))
 (inv_one 0
  (inv_one-1 nil 3406637376 ("" (rewrite "inv_one") nil nil)
   ((one formal-const-decl "T" group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (inv_one formula-decl nil group nil))
   shostak))
 (inv_in 0
  (inv_in-1 nil 3406637389
   ("" (skosimp*) (("" (rewrite "inv_in") nil nil)) nil)
   ((inv_in formula-decl nil group nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (one formal-const-decl "T" group_rew nil))
   shostak))
 (expt_0 0
  (expt_0-1 nil 3406637398
   ("" (skosimp*) (("" (rewrite "expt_0") nil nil)) nil)
   ((expt_0 formula-decl nil group nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (one formal-const-decl "T" group_rew nil))
   shostak))
 (expt_1 0
  (expt_1-1 nil 3406637412
   ("" (skosimp*) (("" (rewrite "expt_1") nil nil)) nil)
   ((expt_1 formula-decl nil group nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (one formal-const-decl "T" group_rew nil))
   shostak))
 (expt_m1 0
  (expt_m1-1 nil 3406637427
   ("" (skosimp*) (("" (rewrite "expt_m1") nil nil)) nil)
   ((expt_m1 formula-decl nil group nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (one formal-const-decl "T" group_rew nil))
   shostak))
 (one_expt 0
  (one_expt-1 nil 3406637436
   ("" (skosimp*) (("" (rewrite "one_expt") nil nil)) nil)
   ((one_expt formula-decl nil group nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (one formal-const-decl "T" group_rew nil))
   shostak))
 (one_left 0
  (one_left-1 nil 3406637451
   ("" (skosimp*) (("" (rewrite "one_left") nil nil)) nil)
   ((one_left formula-decl nil group nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (one formal-const-decl "T" group_rew nil))
   shostak))
 (one_right 0
  (one_right-1 nil 3406637464
   ("" (skosimp*) (("" (rewrite "one_right") nil nil)) nil)
   ((one_right formula-decl nil group nil)
    (T formal-nonempty-type-decl nil group_rew nil)
    (* formal-const-decl "[T, T -> T]" group_rew nil)
    (one formal-const-decl "T" group_rew nil))
   shostak)))

