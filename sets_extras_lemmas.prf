(sets_extras_lemmas
 (right_diff_over_union 0
  (right_diff_over_union-2 nil 3837728556
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (prop)
            (("1" (expand "difference")
              (("1" (expand "union")
                (("1" (expand "member") (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (prop)
            (("2" (expand "difference")
              (("2" (expand "union")
                (("2" (expand "member") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (difference const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (member const-decl "bool" sets nil))
   nil)
  (right_diff_over_union-1 nil 3837726718
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (prop)
            (("1" (expand "difference")
              (("1" (expand "member")
                (("1" (expand "union")
                  (("1" (expand "intersection")
                    (("1" (expand "member") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (prop)
            (("2" (expand "intersection")
              (("2" (expand "member")
                (("2" (expand "difference")
                  (("2" (expand "member")
                    (("2" (expand "union")
                      (("2" (expand "member") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (intersection const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (left_diff_over_union 0
  (left_diff_over_union-2 nil 3837728636
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (prop)
            (("1" (expand "difference")
              (("1" (expand "member")
                (("1" (expand "union")
                  (("1" (expand "intersection")
                    (("1" (expand "member") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (prop)
            (("2" (expand "intersection")
              (("2" (expand "member")
                (("2" (expand "difference")
                  (("2" (expand "member")
                    (("2" (expand "union")
                      (("2" (expand "member") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (difference const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (member const-decl "bool" sets nil))
   nil)
  (left_diff_over_union-1 nil 3837726101
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (prop)
            (("1" (expand "difference")
              (("1" (expand "union")
                (("1" (expand "member") (("1" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (prop)
            (("2" (expand "difference")
              (("2" (expand "union")
                (("2" (expand "member") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (difference const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (member const-decl "bool" sets nil))
   shostak))
 (inter_over_diff 0
  (inter_over_diff-1 nil 3837727704
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (prop)
            (("1" (expand "difference")
              (("1" (expand "member")
                (("1" (expand "intersection")
                  (("1" (expand "member") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (prop)
            (("2" (expand "difference")
              (("2" (expand "member")
                (("2" (expand "intersection")
                  (("2" (expand "member") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (intersection const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (member const-decl "bool" sets nil))
   shostak))
 (symm_diff_equiv_1 0
  (symm_diff_equiv_1-1 nil 3837800468
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (prop)
            (("1" (expand "symmetric_difference")
              (("1" (expand "union")
                (("1" (expand "member")
                  (("1" (expand "difference")
                    (("1" (expand "member")
                      (("1" (expand "intersection")
                        (("1" (expand "member") (("1" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (prop)
            (("2" (expand "symmetric_difference")
              (("2" (expand "union")
                (("2" (expand "member")
                  (("2" (expand "difference")
                    (("2" (expand "intersection")
                      (("2" (expand "member") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (symmetric_difference const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (member const-decl "bool" sets nil))
   shostak))
 (symm_diff_equiv_2 0
  (symm_diff_equiv_2-1 nil 3837801331
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (prop)
            (("1" (expand "symmetric_difference")
              (("1" (expand "union")
                (("1" (expand "member")
                  (("1" (expand "difference")
                    (("1" (expand "intersection")
                      (("1" (expand "member")
                        (("1" (expand "complement")
                          (("1" (expand "member")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (prop)
            (("2" (expand "symmetric_difference")
              (("2" (expand "union")
                (("2" (expand "member")
                  (("2" (expand "intersection")
                    (("2" (expand "difference")
                      (("2" (expand "member")
                        (("2" (expand "complement")
                          (("2" (expand "member")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (symmetric_difference const-decl "set" sets nil)
    (union const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (complement const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil))
   shostak))
 (symm_diff_equiv_3 0
  (symm_diff_equiv_3-1 nil 3837801616
   ("" (skosimp)
    (("" (expand "symmetric_difference")
      (("" (decompose-equality)
        (("" (iff)
          (("" (split)
            (("1" (prop)
              (("1" (expand "intersection")
                (("1" (expand "member")
                  (("1" (expand "union")
                    (("1" (expand "member")
                      (("1" (expand "difference")
                        (("1" (expand "complement")
                          (("1" (expand "member")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (prop)
              (("2" (expand "intersection")
                (("2" (expand "union")
                  (("2" (expand "member")
                    (("2" (expand "complement")
                      (("2" (expand "difference")
                        (("2" (expand "member") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((symmetric_difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (complement const-decl "set" sets nil)
    (intersection const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (symm_diff_associativity 0
  (symm_diff_associativity-1 nil 3837801984
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (expand "symmetric_difference")
          (("" (expand "union")
            (("" (expand "member")
              (("" (expand "difference")
                (("" (expand "member") (("" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (symmetric_difference const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (member const-decl "bool" sets nil)
    (difference const-decl "set" sets nil)
    (union const-decl "set" sets nil))
   shostak))
 (symm_diff_commutativity 0
  (symm_diff_commutativity-1 nil 3839416765
   ("" (skosimp)
    (("" (decompose-equality) (("" (iff) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (symmetric_difference const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (union const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (l_inter_over_symm_diff 0
  (l_inter_over_symm_diff-1 nil 3841825890
   ("" (skosimp)
    (("" (decompose-equality) (("" (iff) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (intersection const-decl "set" sets nil)
    (symmetric_difference const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (union const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (r_inter_over_symm_diff 0
  (r_inter_over_symm_diff-1 nil 3839418522
   ("" (skosimp)
    (("" (decompose-equality) (("" (iff) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (intersection const-decl "set" sets nil)
    (symmetric_difference const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (union const-decl "set" sets nil)
    (difference const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   shostak))
 (card_1_power_set_charac 0
  (card_1_power_set_charac-1 nil 3838323057
   ("" (skosimp)
    (("" (expand "<=")
      (("" (prop)
        (("1" (decompose-equality 1)
          (("1" (iff)
            (("1" (split)
              (("1" (prop)
                (("1" (case "card(x!1)=0")
                  (("1" (rewrite "card_is_0") nil nil)
                   ("2" (expand "powerset")
                    (("2" (lemma "card_subset[T]")
                      (("2" (inst -1 "x!1" "a!1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (lemma "finite_subset[T]")
                    (("3" (inst -1 "a!1" "x!1")
                      (("3" (expand "powerset")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (prop)
                (("1" (lemma "subset_emptyset[T]")
                  (("1" (inst -1 "a!1")
                    (("1" (expand "powerset")
                      (("1" (replace -2 -1 rl) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "subset_reflexive[T]")
                  (("2" (inst -1 "a!1")
                    (("2" (replaces -2 1)
                      (("2" (expand "powerset")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (decompose-equality 1)
          (("2" (iff)
            (("2" (split)
              (("1" (prop)
                (("1" (case "card(x!1)<card(a!1)")
                  (("1" (replaces -3 -1)
                    (("1" (case "card(x!1)=0")
                      (("1" (rewrite "card_is_0") nil nil)
                       ("2" (typepred "card(x!1)")
                        (("2" (typepred "Card[T](x!1)")
                          (("2" (replace -2 -1 rl)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "powerset")
                    (("2" (lemma "card_subset[T]")
                      (("2" (inst -1 "x!1" "a!1")
                        (("2" (assert)
                          (("2" (case "card(x!1)=card(a!1)")
                            (("1" (lemma "same_card_subset[T]")
                              (("1"
                                (inst -1 "x!1" "a!1")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "finite_subset[T]")
                    (("3" (inst -1 "a!1" "x!1")
                      (("3" (expand "powerset")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (prop)
                (("1" (lemma "subset_emptyset[T]")
                  (("1" (inst -1 "a!1")
                    (("1" (expand "powerset")
                      (("1" (replace -2 -1 rl) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "subset_reflexive[T]")
                  (("2" (inst -1 "a!1")
                    (("2" (replaces -2 1)
                      (("2" (expand "powerset")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "card_2_has_2[T]")
          (("3" (inst -1 "a!1")
            (("3" (assert)
              (("3" (skosimp)
                (("3" (decompose-equality)
                  (("3" (copy -1)
                    (("3" (inst -1 "add(x!1, emptyset)")
                      (("3" (inst -2 "add(y!1, emptyset)")
                        (("3" (iff)
                          (("3" (flatten)
                            (("3" (hide (-2 -4))
                              (("3"
                                (case
                                 "powerset(a!1)(add(x!1, emptyset)) AND powerset(a!1)(add(y!1, emptyset))")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide (-2 -1))
                                      (("1"
                                        (split)
                                        (("1"
                                          (decompose-equality -1)
                                          (("1"
                                            (inst -1 "x!1")
                                            (("1"
                                              (expand "add" -1)
                                              (("1"
                                                (expand "emptyset")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (split)
                                          (("1"
                                            (decompose-equality)
                                            (("1"
                                              (inst -1 "y!1")
                                              (("1"
                                                (expand "add" -1)
                                                (("1"
                                                  (expand "emptyset")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "add")
                                            (("2"
                                              (decompose-equality)
                                              (("2"
                                                (inst -1 "x!1")
                                                (("2"
                                                  (iff -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "member")
                                                        (("2"
                                                          (expand
                                                           "emptyset")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide (-1 -2 2 3 4))
                                  (("2"
                                    (split)
                                    (("1"
                                      (expand "powerset")
                                      (("1"
                                        (expand "subset?")
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (expand "member")
                                            (("1"
                                              (expand "add")
                                              (("1"
                                                (split)
                                                (("1"
                                                  (replaces -1 -2)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "emptyset")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "powerset")
                                      (("2"
                                        (expand "subset?")
                                        (("2"
                                          (skosimp)
                                          (("2"
                                            (expand "member")
                                            (("2"
                                              (expand "add")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (replaces -1 -3)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (expand "member")
                                                  (("2"
                                                    (expand "emptyset")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (card_2_has_2 formula-decl nil finite_sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (powerset_finite application-judgement "finite_set[set[T]]"
     finite_sets_of_sets nil)
    (nonempty_powerset application-judgement "(nonempty?[set[T]])"
     sets_lemmas nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (emptyset const-decl "set" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (card_is_0 formula-decl nil finite_sets nil)
    (card_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_subset formula-decl nil finite_sets nil)
    (subset_reflexive formula-decl nil sets_lemmas nil)
    (TRUE const-decl "bool" booleans nil)
    (subset_emptyset formula-decl nil sets_lemmas nil))
   shostak))
 (power_set_full_set1 0
  (power_set_full_set1-1 nil 3839415180
   ("" (skosimp)
    (("" (prop)
      (("1" (expand "member")
        (("1" (expand "fullset") (("1" (propax) nil nil)) nil)) nil)
       ("2" (expand "member")
        (("2" (expand "fullset")
          (("2" (expand "powerset")
            (("2" (expand "subset?")
              (("2" (skosimp)
                (("2" (expand "member")
                  (("2" (expand "extend") (("2" (prop) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (extend const-decl "R" extend nil)
    (powerset const-decl "setofsets" sets nil))
   nil))
 (power_set_full_set2 0
  (power_set_full_set2-1 nil 3844885514
   ("" (skosimp)
    (("" (decompose-equality)
      (("" (iff)
        (("" (lemma power_set_full_set1)
          (("" (inst -1 "a!1" "x!1")
            (("" (expand "member") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty_powerset application-judgement "(nonempty?[set[T]])"
     sets_lemmas nil)
    (setof type-eq-decl nil defined_types nil)
    (setofsets type-eq-decl nil sets nil)
    (powerset const-decl "setofsets" sets nil)
    (restrict const-decl "R" restrict nil)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (power_set_full_set1 formula-decl nil sets_extras_lemmas nil)
    (member const-decl "bool" sets nil)
    (extend const-decl "R" extend nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   shostak))
 (set_of_set_finite_TCC1 0
  (set_of_set_finite_TCC1-1 nil 3846073523 ("" (subtype-tcc) nil nil)
   nil nil
   (set_of_set_finite subtype "sets_extras_lemmas.c"
    "(sets_extras_lemmas.a)")))
 (set_of_set_finite 0
  (set_of_set_finite-1 nil 3846070492
   ("" (skosimp)
    (("" (case "EXISTS (f:[(a!1)->(b!1)]): injective?(f)")
      (("1" (skosimp)
        (("1" (expand "is_finite")
          (("1" (skosimp)
            (("1" (lemma "composition_injective[(a!1),(b!1),nat]")
              (("1" (inst -1 "f!1" "f!2")
                (("1" (inst 1 "N!1" "f!2 o f!1")
                  (("1" (hide-all-but (-1 1))
                    (("1" (expand "injective?")
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (inst 1 "(LAMBDA (x:(a!1)): singleton[(a!1)](x))")
        (("1" (hide (-2 2))
          (("1" (expand "injective?")
            (("1" (skosimp)
              (("1" (decompose-equality -1)
                (("1" (inst -1 "x2!1")
                  (("1" (expand "extend")
                    (("1" (hide -2)
                      (("1" (iff)
                        (("1" (flatten)
                          (("1" (hide -1)
                            (("1" (case "singleton(x2!1)(x2!1)")
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "singleton")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide (-1 2))
                                (("2"
                                  (expand "singleton")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide (-2 2))
          (("2" (skosimp)
            (("2" (inst -1 "x!1")
              (("2" (typepred "x!1")
                (("2" (expand "member") (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (nonempty_singleton_finite application-judgement
     "non_empty_finite_set" finite_sets nil)
    (singleton const-decl "(singleton?)" sets nil)
    (singleton? const-decl "bool" sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil) nil nil nil nil
    (below type-eq-decl nil nat_types nil) nil
    (< const-decl "bool" reals nil)
    (O const-decl "T3" function_props nil)
    (composition_injective judgement-tcc nil function_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (is_finite const-decl "bool" finite_sets nil)
    (T formal-type-decl nil sets_extras_lemmas nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (injective? const-decl "bool" functions nil))
   shostak))
 (power_set_finite 0
  (power_set_finite-1 nil 3846073981
   ("" (skosimp)
    (("" (lemma set_of_set_finite)
      (("" (inst -1 "a!1" "powerset(a!1)")
        (("" (assert)
          (("" (hide-all-but 1)
            (("" (skosimp)
              (("" (expand "member")
                (("" (expand "powerset")
                  (("" (expand "subset?")
                    (("" (skosimp)
                      (("" (expand "member")
                        (("" (expand "extend") (("" (prop) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set_of_set_finite formula-decl nil sets_extras_lemmas nil)
    (nonempty_powerset application-judgement "(nonempty?[set[T]])"
     sets_lemmas nil)
    (extend const-decl "R" extend nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (finite_extend application-judgement "finite_set[T]"
     extend_set_props nil)
    (nonempty_extend application-judgement "(nonempty?[T])"
     extend_set_props nil)
    (powerset const-decl "setofsets" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil sets_extras_lemmas nil))
   shostak)))

