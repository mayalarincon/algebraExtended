%% TCCs associated with theory quaternions_Hamilton
%% This file was automatically generated by PVS, please **do not modify** by hand.
quaternions_Hamilton_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 4, column 35) for  -1
	% expected type  (remove(0, fullset[real]))
	  % proved
	IMP_quaternions_TCC1: OBLIGATION
	remove[real](0, fullset[real])(-1)
	
	% The subtype TCC (at line 4, column 38) in decl nil for
	% term generated from IMPORTING  -1
	% expected type  (remove(0, fullset[real]))
	% The subtype TCC (at line 4, column 38) in decl nil for
	% term generated from IMPORTING  -1
	% expected type  (remove(0, fullset[real]))
	% The subtype TCC (at line 4, column 38) in decl nil for
	% term generated from IMPORTING  -1
	% expected type  (remove(0, fullset[real]))
	% Subtype TCC generated (at line 19, column 27) for  red_norm(q)`x
	% expected type  nonneg_real
	  % unfinished
	QH_norm_TCC1: OBLIGATION
	FORALL (q:
	            quat[real,
	                 restrict[[numfield, numfield], [real, real], numfield](+),
	                 restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                 1, -1, -1]):
	    red_norm
	        [real, restrict[[numfield, numfield], [real, real], numfield](+),
	         restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1,
	         -1]
	        (q)`x
	     >= 0
	
	% The subtype TCC (at line 4, column 38) in decl nil for
	 % term generated from IMPORTING  -1
	    % expected type  (remove(0, fullset[real]))
	  % is subsumed by IMP_quaternions_TCC1
	% The subtype TCC (at line 4, column 38) in decl nil for
	 % term generated from IMPORTING  -1
	    % expected type  (remove(0, fullset[real]))
	  % is subsumed by IMP_quaternions_TCC1
	% The subtype TCC (at line 4, column 38) in decl nil for
	 % term generated from IMPORTING  -1
	    % expected type  (remove(0, fullset[real]))
	  % is subsumed by IMP_quaternions_TCC1
	
	% The subtype TCC (at line 32, column 12) in decl nil for
	% term generated from QH_nzquat_nznorm  nz_quat
	% expected type  (remove(0, fullset[real]))
	% The subtype TCC (at line 32, column 12) in decl nil for
	% term generated from QH_nzquat_nznorm  nz_quat
	% expected type  (remove(0, fullset[real]))
	% Subtype TCC generated (at line 36, column 43) for  red_norm(q)
	% expected type  nz_quat
	%     [real,
	%      restrict
	%          [[numfield, numfield], [real, real], numfield]
	%          (+),
	%      restrict
	%          [[numfield, numfield], [real, real], numfield]
	%          (*),
	%      0, 1, -1, -1]
	  % untried
	QH_inv_red_norm_TCC1: OBLIGATION
	FORALL (q:
	            nz_quat
	                [real,
	                 restrict[[numfield, numfield], [real, real], numfield](+),
	                 restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                 1, -1, -1]):
	    red_norm
	        [real, restrict[[numfield, numfield], [real, real], numfield](+),
	         restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1,
	         -1]
	        (q)
	     /=
	     zero_q
	         [real, restrict[[numfield, numfield], [real, real], numfield](+),
	          restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1,
	          -1]
	
	% The subtype TCC (at line 32, column 12) in decl nil for
	 % term generated from QH_nzquat_nznorm  nz_quat
	    % expected type  (remove(0, fullset[real]))
	  % is subsumed by IMP_quaternions_TCC1
	% The subtype TCC (at line 32, column 12) in decl nil for
	 % term generated from QH_nzquat_nznorm  nz_quat
	    % expected type  (remove(0, fullset[real]))
	  % is subsumed by IMP_quaternions_TCC1
	
	% Subtype TCC generated (at line 36, column 22) for
	% inv[nz_quat
	%         [real,
	%          restrict[[numfield, numfield], [real, real], numfield](+),
	%          restrict[[numfield, numfield], [real, real], numfield](*),
	%          0, 1, -1, -1],
	%     restrict
	%         [[quat[real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1],
	%           quat[real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1]],
	%          [nz_quat
	%               [real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1],
	%           nz_quat
	%               [real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1]],
	%          quat[real,
	%               restrict[[numfield, numfield], [real, real], numfield]
	%                   (+),
	%               restrict[[numfield, numfield], [real, real], numfield]
	%                   (*),
	%               0, 1, -1, -1]]
	%         (*),
	%     one_q]
	% expected type  [[nz_quat
	%       [real,
	%        restrict
	%            [[numfield, numfield], [real, real],
	%             numfield]
	%            (+),
	%        restrict
	%            [[numfield, numfield], [real, real],
	%             numfield]
	%            (*),
	%        0, 1, -1, -1],
	%   nz_quat
	%       [real,
	%        restrict
	%            [[numfield, numfield], [real, real],
	%             numfield]
	%            (+),
	%        restrict
	%            [[numfield, numfield], [real, real],
	%             numfield]
	%            (*),
	%        0, 1, -1, -1]] ->
	%    nz_quat
	%        [real,
	%         restrict
	%             [[numfield, numfield], [real, real],
	%              numfield]
	%             (+),
	%         restrict
	%             [[numfield, numfield], [real, real],
	%              numfield]
	%             (*),
	%         0, 1, -1, -1]]
	  % untried
	QH_inv_red_norm_TCC2: OBLIGATION
	FORALL (x1:
	            [nz_quat
	                 [real,
	                  restrict[[numfield, numfield], [real, real], numfield](+),
	                  restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                  1, -1, -1],
	             nz_quat
	                 [real,
	                  restrict[[numfield, numfield], [real, real], numfield](+),
	                  restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                  1, -1, -1]]):
	    *[real, restrict[[numfield, numfield], [real, real], numfield](+),
	      restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1, -1]
	        (x1)
	     /=
	     zero_q
	         [real, restrict[[numfield, numfield], [real, real], numfield](+),
	          restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1,
	          -1]
	
	% Subtype TCC generated (at line 36, column 22) for
	% inv[nz_quat
	%         [real,
	%          restrict[[numfield, numfield], [real, real], numfield](+),
	%          restrict[[numfield, numfield], [real, real], numfield](*),
	%          0, 1, -1, -1],
	%     restrict
	%         [[quat[real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1],
	%           quat[real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1]],
	%          [nz_quat
	%               [real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1],
	%           nz_quat
	%               [real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1]],
	%          quat[real,
	%               restrict[[numfield, numfield], [real, real], numfield]
	%                   (+),
	%               restrict[[numfield, numfield], [real, real], numfield]
	%                   (*),
	%               0, 1, -1, -1]]
	%         (*),
	%     one_q]
	% expected type  nz_quat
	%     [real,
	%      restrict
	%          [[numfield, numfield], [real, real], numfield]
	%          (+),
	%      restrict
	%          [[numfield, numfield], [real, real], numfield]
	%          (*),
	%      0, 1, -1, -1]
	  % untried
	QH_inv_red_norm_TCC3: OBLIGATION
	one_q[real, restrict[[numfield, numfield], [real, real], numfield](+),
	        restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1,
	        -1]
	   /=
	   zero_q
	       [real, restrict[[numfield, numfield], [real, real], numfield](+),
	        restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1,
	        -1]
	
	% Assuming TCC generated (at line 36, column 22) for
	% inv[nz_quat
	%         [real,
	%          restrict[[numfield, numfield], [real, real], numfield](+),
	%          restrict[[numfield, numfield], [real, real], numfield](*),
	%          0, 1, -1, -1],
	%     restrict
	%         [[quat[real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1],
	%           quat[real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1]],
	%          [nz_quat
	%               [real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1],
	%           nz_quat
	%               [real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0, 1, -1, -1]],
	%          quat[real,
	%               restrict[[numfield, numfield], [real, real], numfield]
	%                   (+),
	%               restrict[[numfield, numfield], [real, real], numfield]
	%                   (*),
	%               0, 1, -1, -1]]
	%         (*),
	%     one_q]
	% generated from assumption group.fullset_is_group
	  % untried
	QH_inv_red_norm_TCC4: OBLIGATION
	group?
	      [nz_quat
	           [real, restrict[[numfield, numfield], [real, real], numfield](+),
	            restrict[[numfield, numfield], [real, real], numfield](*), 0, 1,
	            -1, -1],
	       restrict
	           [[quat[real,
	                  restrict[[numfield, numfield], [real, real], numfield](+),
	                  restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                  1, -1, -1],
	             quat[real,
	                  restrict[[numfield, numfield], [real, real], numfield](+),
	                  restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                  1, -1, -1]],
	            [nz_quat
	                 [real,
	                  restrict[[numfield, numfield], [real, real], numfield](+),
	                  restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                  1, -1, -1],
	             nz_quat
	                 [real,
	                  restrict[[numfield, numfield], [real, real], numfield](+),
	                  restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                  1, -1, -1]],
	            quat[real,
	                 restrict[[numfield, numfield], [real, real], numfield](+),
	                 restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                 1, -1, -1]]
	           (*),
	       one_q]
	      (fullset
	           [nz_quat
	                [real,
	                 restrict[[numfield, numfield], [real, real], numfield](+),
	                 restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                 1, -1, -1]])
	
	% Subtype TCC generated (at line 36, column 61) for  (red_norm(q)`x)
	% expected type  nz_T[real,
	%      restrict
	%          [[numfield, numfield], [real, real], numfield]
	%          (+),
	%      restrict
	%          [[numfield, numfield], [real, real], numfield]
	%          (*),
	%      0]
	  % untried
	QH_inv_red_norm_TCC5: OBLIGATION
	FORALL (q:
	            nz_quat
	                [real,
	                 restrict[[numfield, numfield], [real, real], numfield](+),
	                 restrict[[numfield, numfield], [real, real], numfield](*), 0,
	                 1, -1, -1]):
	    (red_norm
	         [real, restrict[[numfield, numfield], [real, real], numfield](+),
	          restrict[[numfield, numfield], [real, real], numfield](*), 0, 1, -1,
	          -1]
	         (q)`x)
	     /= 0
	
	% Subtype TCC generated (at line 33, column 31) for
	% inv[nz_T[real,
	%          restrict[[numfield, numfield], [real, real], numfield](+),
	%          restrict[[numfield, numfield], [real, real], numfield](*),
	%          0],
	%     restrict
	%         [[real, real],
	%          [nz_T[real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0],
	%           nz_T[real,
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (+),
	%                restrict[[numfield, numfield], [real, real], numfield]
	%                    (*),
	%                0]],
	%          real]
	%         (restrict[[numfield, numfield], [real, real], numfield](*)),
	%     1]
	% expected type  [[nz_T[real,
	%        restrict
	%            [[numfield, numfield], [real, real],
	%             numfield]
	%            (+),
	%        restrict
	%            [[numfield, numfield], [real, real],
	%             numfield]
	%            (*),
	%        0],
	%   nz_T[real,
	%        restrict
	%            [[numfield, numfield], [real, real],
	%             numfield]
	%            (+),
	%        restrict
	%            [[numfield, numfield], [real, real],
	%             numfield]
	%            (*),
	%        0]] ->
	%    nz_T[real,
	%         restrict
	%             [[numfield, numfield], [real, real],
	%              numfield]
	%             (+),
	%         restrict
	%             [[numfield, numfield], [real, real],
	%              numfield]
	%             (*),
	%         0]]
	  % untried
	QH_inv_red_norm_TCC6: OBLIGATION
	FORALL (x1:
	            [nz_T[real,
	                  restrict[[numfield, numfield], [real, real], numfield](+),
	                  restrict[[numfield, numfield], [real, real], numfield](*),
	                  0],
	             nz_T[real,
	                  restrict[[numfield, numfield], [real, real], numfield](+),
	                  restrict[[numfield, numfield], [real, real], numfield](*),
	                  0]]):
	    restrict[[numfield, numfield], [real, real], numfield](*)(x1) /= 0
	
	% The subtype TCC (at line 36, column 12) in decl nil for
	 % term generated from QH_inv_red_norm  nz_quat
	    % expected type  (remove(0, fullset[real]))
	  % is subsumed by IMP_quaternions_TCC1
	% The subtype TCC (at line 36, column 12) in decl nil for
	 % term generated from QH_inv_red_norm  nz_quat
	    % expected type  (remove(0, fullset[real]))
	  % is subsumed by IMP_quaternions_TCC1
	% The subtype TCC (at line 40, column 13) in decl nil for
	 % term generated from QH_inv_q_prod_charac  nz_quat
	    % expected type  (remove(0, fullset[real]))
	  % is subsumed by IMP_quaternions_TCC1
	% The subtype TCC (at line 40, column 13) in decl nil for
	 % term generated from QH_inv_q_prod_charac  nz_quat
	    % expected type  (remove(0, fullset[real]))
	  % is subsumed by IMP_quaternions_TCC1
	% The subtype TCC (at line 41, column 3) in decl nil for
	 % term generated from QH_inv_q_prod_charac
	    %  inv[nz_quat
	    %         [real,
	    %          restrict[[numfield, numfield], [real, real], numfield](+),
	    %          restrict[[numfield, numfield], [real, real], numfield](*),
	    %          0, 1, -1, -1],
	    %     restrict
	    %         [[quat[real,
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (+),
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (*),
	    %                0, 1, -1, -1],
	    %           quat[real,
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (+),
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (*),
	    %                0, 1, -1, -1]],
	    %          [nz_quat
	    %               [real,
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (+),
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (*),
	    %                0, 1, -1, -1],
	    %           nz_quat
	    %               [real,
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (+),
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (*),
	    %                0, 1, -1, -1]],
	    %          quat[real,
	    %               restrict[[numfield, numfield], [real, real], numfield]
	    %                   (+),
	    %               restrict[[numfield, numfield], [real, real], numfield]
	    %                   (*),
	    %               0, 1, -1, -1]]
	    %         (*),
	    %     one_q]
	    % expected type  [[nz_quat
	                   %       [real,
	                   %        restrict
	                   %            [[numfield, numfield], [real, real],
	                   %             numfield]
	                   %            (+),
	                   %        restrict
	                   %            [[numfield, numfield], [real, real],
	                   %             numfield]
	                   %            (*),
	                   %        0, 1, -1, -1],
	                   %   nz_quat
	                   %       [real,
	                   %        restrict
	                   %            [[numfield, numfield], [real, real],
	                   %             numfield]
	                   %            (+),
	                   %        restrict
	                   %            [[numfield, numfield], [real, real],
	                   %             numfield]
	                   %            (*),
	                   %        0, 1, -1, -1]] ->
	                   %    nz_quat
	                   %        [real,
	                   %         restrict
	                   %             [[numfield, numfield], [real, real],
	                   %              numfield]
	                   %             (+),
	                   %         restrict
	                   %             [[numfield, numfield], [real, real],
	                   %              numfield]
	                   %             (*),
	                   %         0, 1, -1, -1]]
	  % is subsumed by QH_inv_red_norm_TCC2
	% The subtype TCC (at line 41, column 3) in decl nil for
	 % term generated from QH_inv_q_prod_charac
	    %  inv[nz_quat
	    %         [real,
	    %          restrict[[numfield, numfield], [real, real], numfield](+),
	    %          restrict[[numfield, numfield], [real, real], numfield](*),
	    %          0, 1, -1, -1],
	    %     restrict
	    %         [[quat[real,
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (+),
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (*),
	    %                0, 1, -1, -1],
	    %           quat[real,
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (+),
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (*),
	    %                0, 1, -1, -1]],
	    %          [nz_quat
	    %               [real,
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (+),
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (*),
	    %                0, 1, -1, -1],
	    %           nz_quat
	    %               [real,
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (+),
	    %                restrict[[numfield, numfield], [real, real], numfield]
	    %                    (*),
	    %                0, 1, -1, -1]],
	    %          quat[real,
	    %               restrict[[numfield, numfield], [real, real], numfield]
	    %                   (+),
	    %               restrict[[numfield, numfield], [real, real], numfield]
	    %                   (*),
	    %               0, 1, -1, -1]]
	    %         (*),
	    %     one_q]
	    % expected type  nz_quat
	                   %     [real,
	                   %      restrict
	                   %          [[numfield, numfield], [real, real], numfield]
	                   %          (+),
	                   %      restrict
	                   %          [[numfield, numfield], [real, real], numfield]
	                   %          (*),
	                   %      0, 1, -1, -1]
	  % is subsumed by QH_inv_red_norm_TCC3

END quaternions_Hamilton_TCCS