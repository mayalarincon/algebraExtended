%% TCCs associated with theory euclidean_ring_def
%% This file was automatically generated by PVS, please **do not modify** by hand.
euclidean_ring_def_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 34, column 48) for  a
	% expected type  (difference(R, singleton(zero)))
	  % unfinished
	euclidean_ring?_TCC1: OBLIGATION
	FORALL (R: set[T]):
	    commutative_ring?(R) IMPLIES
	     FORALL (a, b: (R)):
	       a * b /= zero IMPLIES difference[T](R, singleton[T](zero))(a)
	
	% Subtype TCC generated (at line 34, column 58) for  a * b
	% expected type  (difference(R, singleton(zero)))
	  % proved
	euclidean_ring?_TCC2: OBLIGATION
	FORALL (R: set[T]):
	    commutative_ring?(R) IMPLIES
	     FORALL (a, b: (R)):
	       a * b /= zero IMPLIES difference[T](R, singleton[T](zero))(a * b)
	
	% Subtype TCC generated (at line 37, column 75) for  r
	% expected type  (difference(R, singleton(zero)))
	  % proved
	euclidean_ring?_TCC3: OBLIGATION
	FORALL (R: set[T]):
	    commutative_ring?(R) IMPLIES
	     FORALL (phi: [(difference[T](R, singleton[T](zero))) -> nat], a, b: (R)):
	       (a * b /= zero IMPLIES phi(a) <= phi(a * b)) AND b /= zero IMPLIES
	        FORALL (q, r: (R)):
	          a = q * b + r AND NOT r = zero AND r /= zero IMPLIES
	           difference[T](R, singleton[T](zero))(r)
	
	% Subtype TCC generated (at line 37, column 84) for  b
	% expected type  (difference(R, singleton(zero)))
	  % proved
	euclidean_ring?_TCC4: OBLIGATION
	FORALL (R: set[T]):
	    commutative_ring?(R) IMPLIES
	     FORALL (phi: [(difference[T](R, singleton[T](zero))) -> nat], a, b: (R)):
	       (a * b /= zero IMPLIES phi(a) <= phi(a * b)) AND b /= zero IMPLIES
	        FORALL (q, r: (R)):
	          a = q * b + r AND NOT r = zero AND r /= zero IMPLIES
	           difference[T](R, singleton[T](zero))(b)
	
	% Subtype TCC generated (at line 41, column 48) for  a
	% expected type  (difference(R, singleton(zero)))
	  % unfinished
	euclidean_pair?_TCC1: OBLIGATION
	FORALL (R: (euclidean_ring?), a, b: (R)):
	    a * b /= zero IMPLIES difference[T](R, singleton[T](zero))(a)
	
	% Subtype TCC generated (at line 41, column 58) for  a * b
	% expected type  (difference(R, singleton(zero)))
	  % proved
	euclidean_pair?_TCC2: OBLIGATION
	FORALL (R: (euclidean_ring?), a, b: (R)):
	    a * b /= zero IMPLIES difference[T](R, singleton[T](zero))(a * b)
	
	% Subtype TCC generated (at line 43, column 70) for  r
	% expected type  (difference(R, singleton(zero)))
	  % proved
	euclidean_pair?_TCC3: OBLIGATION
	FORALL (R: (euclidean_ring?),
	          phi: [(difference[T](R, singleton[T](zero))) -> nat], a, b: (R)):
	    (a * b /= zero IMPLIES phi(a) <= phi(a * b)) AND b /= zero IMPLIES
	     FORALL (q, r: (R)):
	       a = q * b + r AND NOT r = zero AND r /= zero IMPLIES
	        difference[T](R, singleton[T](zero))(r)
	
	% Subtype TCC generated (at line 43, column 79) for  b
	% expected type  (difference(R, singleton(zero)))
	  % proved
	euclidean_pair?_TCC4: OBLIGATION
	FORALL (R: (euclidean_ring?),
	          phi: [(difference[T](R, singleton[T](zero))) -> nat], a, b: (R)):
	    (a * b /= zero IMPLIES phi(a) <= phi(a * b)) AND b /= zero IMPLIES
	     FORALL (q, r: (R)):
	       a = q * b + r AND NOT r = zero AND r /= zero IMPLIES
	        difference[T](R, singleton[T](zero))(b)
	
	% Subtype TCC generated (at line 51, column 79) for  rem
	% expected type  (difference(R, singleton(zero)))
	  % proved
	euclidean_f_phi?_TCC1: OBLIGATION
	FORALL (R: (euclidean_ring?),
	          phi: [(difference[T](R, singleton[T](zero))) -> nat]
	              | euclidean_pair?(R, phi),
	          f_phi: [(R), (remove[T](zero, R)) -> [(R), (R)]], a: (R),
	          b: (remove[T](zero, R))):
	    NOT a = zero IMPLIES
	     FORALL (div: (R), rem: (R)):
	            (div = f_phi(a, b)`1) AND (rem = f_phi(a, b)`2)
	        AND (a = div * b + rem) AND (NOT rem = zero) AND (rem /= zero)
	        IMPLIES difference[T](R, singleton[T](zero))(rem)
	
	% Subtype TCC generated (at line 51, column 90) for  b
	% expected type  (difference(R, singleton(zero)))
	  % proved
	euclidean_f_phi?_TCC2: OBLIGATION
	FORALL (R: (euclidean_ring?),
	          phi: [(difference[T](R, singleton[T](zero))) -> nat]
	              | euclidean_pair?(R, phi),
	          f_phi: [(R), (remove[T](zero, R)) -> [(R), (R)]], a: (R),
	          b: (remove[T](zero, R))):
	    NOT a = zero IMPLIES
	     FORALL (div: (R), rem: (R)):
	            (div = f_phi(a, b)`1) AND (rem = f_phi(a, b)`2)
	        AND (a = div * b + rem) AND (NOT rem = zero) AND (rem /= zero)
	        IMPLIES difference[T](R, singleton[T](zero))(b)

END euclidean_ring_def_TCCS