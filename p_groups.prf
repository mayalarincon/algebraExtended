(p_groups
 (IMP_finite_groups_TCC1 0
  (IMP_finite_groups_TCC1-1 nil 3530721851
   ("" (rewrite "fullset_is_group") nil nil)
   ((fullset_is_group formula-decl nil p_groups nil)) nil
   (IMP_finite_groups assuming
    "finite_groups[p_groups.T, p_groups.*, p_groups.one].finite_groups"
    "fullset_is_group: ASSUMPTION group_def[finite_groups.T, finite_groups.*, finite_groups.one].group?(sets[finite_groups.T].fullset)")))
 (alt_is_action_TCC1 0
  (alt_is_action_TCC1-1 nil 3530265242
   ("" (skosimp*)
    (("" (typepred "x1!1`2" "x1!1`1" "H!1")
      (("" (expand "subgroup?")
        (("" (expand* "subset?" "member")
          (("" (inst?)
            (("" (assert)
              (("" (hide -3)
                (("" (expand "left_cosets")
                  (("" (skosimp)
                    (("" (expand "alt")
                      (("" (inst 1 "x1!1`1 * a!1")
                        (("1" (replaces -1)
                          (("1" (rewrite "left_coset_assoc") nil nil))
                          nil)
                         ("2" (rewrite "product_in") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((left_cosets const-decl "setofsets[T]" right_left_cosets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (subgroup type-eq-decl nil group nil)
    (subgroup? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (set type-eq-decl nil sets nil)
    (group nonempty-type-eq-decl nil group nil)
    (one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (T formal-type-decl nil p_groups nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (alt const-decl "set[T]" p_groups nil)
    (product_in formula-decl nil group nil)
    (TRUE const-decl "bool" booleans nil)
    (left_coset_assoc formula-decl nil cosets nil)
    (G!1 skolem-const-decl "group[T, *, one]" p_groups nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" p_groups nil)
    (K!1 skolem-const-decl "subgroup[T, *, one](G!1)" p_groups nil)
    (x1!1 skolem-const-decl "[(H!1), (left_cosets(G!1, K!1))]" p_groups
     nil)
    (a!1 skolem-const-decl "(G!1)" p_groups nil))
   nil
   (alt_is_action subtype
    "p_groups.alt(p_groups.G, p_groups.H, p_groups.K)"
    "group_action[p_groups.T, p_groups.*, p_groups.one, setof[T]].F(p_groups.H, right_left_cosets[p_groups.T, p_groups.*, p_groups.one].left_cosets(p_groups.G, p_groups.K))")))
 (alt_is_action 0
  (alt_is_action-1 nil 3530282276
   ("" (skosimp*)
    (("" (expand "group_action?")
      (("" (skosimp*)
        (("" (prop)
          (("1" (expand "alt")
            (("1" (rewrite "left_coset_one") nil nil)) nil)
           ("2" (expand "alt")
            (("2" (rewrite "left_coset_assoc") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((group_action? const-decl "bool" group_action nil)
    (left_coset_one formula-decl nil cosets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (subgroup? const-decl "bool" group_def nil)
    (subgroup type-eq-decl nil group nil)
    (setofsets type-eq-decl nil sets nil)
    (left_cosets const-decl "setofsets[T]" right_left_cosets nil)
    (T formal-type-decl nil p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (one formal-const-decl "T" p_groups nil)
    (alt const-decl "set[T]" p_groups nil)
    (left_coset_assoc formula-decl nil cosets nil))
   shostak))
 (Fix_iff_subset 0
  (Fix_iff_subset-1 nil 3530282442
   ("" (skosimp*)
    (("" (expand* "subset?" "member" "Fix" "alt")
      (("" (expand "extend")
        (("" (prop)
          (("1" (skosimp)
            (("1" (inst -2 "x!1")
              (("1" (rewrite "left_coset_assoc")
                (("1" (lemma "lc_eq")
                  (("1" (inst -1 "G!1" "K!1" "x!1 * g!1" "g!1")
                    (("1" (assert)
                      (("1" (skosimp)
                        (("1" (hide (-2 -3 -4))
                          (("1" (expand "*" 1)
                            (("1" (inst 1 "g!1 * h!1")
                              (("1"
                                (replace -1 1 rl)
                                (("1"
                                  (rewrite "assoc" :dir rl)
                                  nil
                                  nil))
                                nil)
                               ("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skosimp)
            (("2" (typepred "g!2")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (expand "*" -3)
                    (("2" (skosimp)
                      (("2" (hide -1)
                        (("2" (rewrite "left_coset_assoc")
                          (("2" (lemma "lc_is_eq")
                            (("2"
                              (inst -1 "G!1" "K!1" "g!2 * g!1" "g!1")
                              (("2"
                                (assert)
                                (("2"
                                  (inst 1 "inv(g!1) * h!1")
                                  (("1"
                                    (hide 2)
                                    (("1"
                                      (replaces -2)
                                      (("1"
                                        (rewrite "assoc")
                                        (("1"
                                          (rewrite "assoc" :dir rl)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide (-1 -2 2))
                                    (("2"
                                      (typepred "h!1")
                                      (("2"
                                        (skosimp)
                                        (("2"
                                          (replaces -1)
                                          (("2"
                                            (typepred "h!2")
                                            (("2"
                                              (rewrite "assoc")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide -1)
            (("3" (expand "left_cosets") (("3" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (alt const-decl "set[T]" p_groups nil)
    (Fix const-decl "{Y: set[T1] | subset?(Y, X)}" group_action nil)
    (subset? const-decl "bool" sets nil)
    (x!1 skolem-const-decl "T" p_groups nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" p_groups nil)
    (subgroup type-eq-decl nil group nil)
    (G!1 skolem-const-decl "group[T, *, one]" p_groups nil)
    (subgroup? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil p_groups nil)
    (lc_eq formula-decl nil cosets nil)
    (K!1 skolem-const-decl "subgroup[T, *, one](G!1)" p_groups nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (g!1 skolem-const-decl "(G!1)" p_groups nil)
    (h!1 skolem-const-decl "(K!1)" p_groups nil)
    (inv_right formula-decl nil group nil)
    (right_identity formula-decl nil monad nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (assoc formula-decl nil group nil)
    (* const-decl "set[T]" cosets nil)
    (* const-decl "set[T]" cosets nil)
    (left_coset_assoc formula-decl nil cosets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (h!1 skolem-const-decl "({t: T | EXISTS (h: (K!1)): t = g!1 * h})"
     p_groups nil)
    (TRUE const-decl "bool" booleans nil)
    (inv_left formula-decl nil group nil)
    (left_identity formula-decl nil monad nil)
    (lc_is_eq formula-decl nil cosets nil)
    (left_cosets const-decl "setofsets[T]" right_left_cosets nil)
    (extend const-decl "R" extend nil))
   shostak))
 (Fix_iff_subset_cor_TCC1 0
  (Fix_iff_subset_cor_TCC1-1 nil 3530267101
   ("" (skosimp*)
    (("" (typepred "x1!1`2" "x1!1`1" "H!1")
      (("" (expand "subgroup?")
        (("" (expand* "subset?" "member")
          (("" (inst?)
            (("" (assert)
              (("" (hide -3)
                (("" (expand "left_cosets")
                  (("" (skosimp)
                    (("" (expand "alt")
                      (("" (inst 1 "x1!1`1 * a!1")
                        (("1" (replaces -1)
                          (("1" (rewrite "left_coset_assoc") nil nil))
                          nil)
                         ("2" (rewrite "product_in") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (left_cosets const-decl "setofsets[T]" right_left_cosets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (subgroup type-eq-decl nil group nil)
    (subgroup? const-decl "bool" group_def nil)
    (group? const-decl "bool" group_def nil)
    (set type-eq-decl nil sets nil)
    (group nonempty-type-eq-decl nil group nil)
    (one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (T formal-type-decl nil p_groups nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (alt const-decl "set[T]" p_groups nil)
    (product_in formula-decl nil group nil)
    (TRUE const-decl "bool" booleans nil)
    (left_coset_assoc formula-decl nil cosets nil)
    (G!1 skolem-const-decl "finite_group[T, *, one]" p_groups nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" p_groups nil)
    (x1!1 skolem-const-decl "[(H!1), (left_cosets(G!1, H!1))]" p_groups
     nil)
    (a!1 skolem-const-decl "(G!1)" p_groups nil))
   nil
   (Fix_iff_subset_cor subtype
    "p_groups.alt(p_groups.G, p_groups.H, p_groups.H)"
    "group_action[p_groups.T, p_groups.*, p_groups.one, setof[T]].F(p_groups.H, right_left_cosets[p_groups.T, p_groups.*, p_groups.one].left_cosets(p_groups.G, p_groups.H))")))
 (Fix_iff_subset_cor 0
  (Fix_iff_subset_cor-1 nil 3530285250
   ("" (skosimp*)
    (("" (lemma "Fix_iff_subset")
      (("" (inst -1 "G!1" "H!1" "H!1" "g!1")
        (("" (assert)
          (("" (prop)
            (("1" (hide (-1 -2))
              (("1" (lemma "left_coset_correspondence_inv[T, *, one]")
                (("1" (inst -1 "G!1" "H!1" "g!1")
                  (("1" (assert)
                    (("1" (typepred "H!1")
                      (("1" (hide -1)
                        (("1" (lemma "finite_subgroups")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (hide -2)
                                (("1"
                                  (expand "finite_group?")
                                  (("1"
                                    (lemma "card_eq_bij[T, T]")
                                    (("1"
                                      (inst
                                       -1
                                       "H!1"
                                       "g!1 * H!1 * inv(g!1)")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide (-2 -4))
                                          (("1"
                                            (rewrite
                                             "same_card_subset")
                                            nil
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide (-3 2))
                                        (("2"
                                          (lemma
                                           "bijection_finite_set2[T,T]")
                                          (("2"
                                            (inst
                                             -1
                                             "H!1"
                                             "g!1 * H!1 * inv(g!1)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide (1 3))
              (("2" (replace -1 1 rl)
                (("2" (hide -1)
                  (("2" (rewrite "subset_reflexive") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fix_iff_subset formula-decl nil p_groups nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset_reflexive formula-decl nil sets_lemmas nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_subgroups formula-decl nil group nil)
    (is_finite const-decl "bool" finite_sets nil)
    (G!1 skolem-const-decl "finite_group[T, *, one]" p_groups nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" p_groups nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (g!1 skolem-const-decl "(G!1)" p_groups nil)
    (* const-decl "set[T]" cosets nil)
    (* const-decl "set[T]" cosets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (bijection_finite_set2 formula-decl nil finite_sets_eq finite_sets)
    (card_eq_bij formula-decl nil finite_sets_card_eq finite_sets)
    (left_coset_correspondence_inv formula-decl nil right_left_cosets
     nil)
    (subgroup type-eq-decl nil group nil)
    (subgroup? const-decl "bool" group_def nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil p_groups nil))
   shostak))
 (subgroup_is_p_group_TCC1 0
  (subgroup_is_p_group_TCC1-1 nil 3530352745
   ("" (skosimp*)
    (("" (lemma "finite_subgroups")
      (("" (inst -1 "H!1" "G!1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (T formal-type-decl nil p_groups nil)
    (finite_subgroups formula-decl nil group nil)
    (subgroup type-eq-decl nil group nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (subgroup? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (subgroup_is_p_group subtype "p_groups.H"
    "finite_group[T, *, one]")))
 (subgroup_is_p_group 0
  (subgroup_is_p_group-1 nil 3530352927
   ("" (skosimp*)
    (("" (hide -1)
      (("" (expand "p_group?")
        (("" (skosimp)
          (("" (inst -1 "a!1")
            (("1" (skosimp)
              (("1" (inst?)
                (("1" (replace -1 1 rl)
                  (("1" (hide -1)
                    (("1" (expand "period") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "a!1" "H!1")
                (("2" (hide -2)
                  (("2" (expand "subgroup?")
                    (("2" (expand "subset?")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (period const-decl "posnat" finite_groups nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil p_groups nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (one formal-const-decl "T" p_groups nil)
    (finite_group? const-decl "bool" group_def nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (G!1 skolem-const-decl "finite_group[T, *, one]" p_groups nil)
    (group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (subgroup? const-decl "bool" group_def nil)
    (subgroup type-eq-decl nil group nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" p_groups nil)
    (a!1 skolem-const-decl "(H!1)" p_groups nil)
    (p_group? const-decl "bool" p_groups nil))
   shostak))
 (p_group_iff_power 0
  (p_group_iff_power-1 nil 3530719670
   ("" (skosimp*)
    (("" (prop)
      (("1" (lemma "prime_factors")
        (("1" (inst -1 "order(G!1)")
          (("1" (skosimp)
            (("1" (lemma "product_only_power")
              (("1" (inst -1 "fs!1" "p!1")
                (("1" (prop)
                  (("1" (skosimp)
                    (("1" (inst 1 "n!1")
                      (("1" (expand "^") (("1" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "ordered_list_of_primes?")
                      (("2" (flatten)
                        (("2" (hide -3)
                          (("2"
                            (expand* "only_power_p" "p_group?"
                             "list_of_primes?")
                            (("2" (skosimp)
                              (("2"
                                (lemma "divides_product")
                                (("2"
                                  (inst -1 "fs!1" "j!1")
                                  (("2"
                                    (inst -3 "j!1")
                                    (("2"
                                      (replace -2 -1 rl)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (lemma "cauchy")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skosimp)
                                                (("2"
                                                  (inst -4 "x!1")
                                                  (("2"
                                                    (skosimp)
                                                    (("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (inst 1 "n!1")
                                                        (("2"
                                                          (expand "^")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (expand "p_group?")
          (("2" (skosimp)
            (("2" (lemma "Lagrange")
              (("2" (inst -1 "G!1" "generated_by(a!1)")
                (("1" (prop)
                  (("1" (replaces -2)
                    (("1" (lemma "divides_prime_power")
                      (("1" (expand "^")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (skosimp)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lemma "period_is_generated_order")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst 1 "i!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (rewrite "generated_is_subgroup") nil nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (expand "finite_group?")
                    (("2" (lemma "finite_generated_by")
                      (("2" (inst -1 "G!1" "a!1")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (T formal-type-decl nil p_groups nil)
    (set type-eq-decl nil sets nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (one formal-const-decl "T" p_groups nil)
    (finite_monad? const-decl "bool" monad_def nil)
    (finite_monad nonempty-type-eq-decl nil monad nil)
    (order const-decl "posnat" monad nil)
    (finite_group? const-decl "bool" group_def nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (product_only_power formula-decl nil general_properties nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (ordered_list_of_primes? const-decl "bool" prime_factorization
     numbers)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (cauchy formula-decl nil cauchy nil)
    (TRUE const-decl "bool" booleans nil)
    (divides_product formula-decl nil general_properties nil)
    (only_power_p const-decl "bool" general_properties nil)
    (list_of_primes? const-decl "bool" prime_factorization numbers)
    (p_group? const-decl "bool" p_groups nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (barray type-eq-decl nil fseqs structures)
    (fseq type-eq-decl nil fseqs structures)
    (prime_factors formula-decl nil prime_factorization numbers)
    (Lagrange formula-decl nil lagrange nil)
    (finite_generated_by formula-decl nil finite_groups nil)
    (divides_prime_power formula-decl nil general_properties nil)
    (period_is_generated_order formula-decl nil finite_groups nil)
    (member const-decl "bool" sets nil)
    (generated_is_subgroup formula-decl nil cyclic_group nil)
    (group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (generated_by const-decl "group" group nil)
    (G!1 skolem-const-decl "finite_group[T, *, one]" p_groups nil)
    (a!1 skolem-const-decl "(G!1)" p_groups nil))
   shostak))
 (p_divides_index 0
  (p_divides_index-1 nil 3530567198
   ("" (skosimp*)
    (("" (typepred "G!1" "H!1")
      (("" (hide -2)
        (("" (lemma "finite_subgroups")
          (("" (inst -1 "H!1" "G!1")
            (("" (assert)
              (("" (lemma "index_divides")
                (("" (inst?)
                  (("" (assert)
                    (("" (lemma "p_group_iff_power")
                      (("" (inst?)
                        (("" (assert)
                          (("" (skosimp)
                            (("" (replaces -1)
                              ((""
                                (lemma "divides_prime_power")
                                ((""
                                  (expand "^")
                                  ((""
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (hide (-1 -3 -8))
                                          (("1"
                                            (case-replace
                                             "i!1 = 0"
                                             :hide?
                                             T)
                                            (("1"
                                              (rewrite "expt_x0_aux")
                                              (("1"
                                                (lemma
                                                 "Lagrange_index")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -2 -1)
                                                      (("1"
                                                        (rewrite
                                                         "identity_mult")
                                                        (("1"
                                                          (lemma
                                                           "orders_equal")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "G!1"
                                                             "H!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide (-2 -3 -4 2))
                                              (("2"
                                                (replaces -1)
                                                (("2"
                                                  (lemma
                                                   "divides_power")
                                                  (("2"
                                                    (expand "^")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide (-1 -5 -6 2 3))
                                      (("2"
                                        (lemma "index_gt1")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subgroup type-eq-decl nil group nil)
    (subgroup? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil p_groups nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_subgroups formula-decl nil group nil)
    (p_group_iff_power formula-decl nil p_groups nil)
    (TRUE const-decl "bool" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (index_gt1 formula-decl nil right_left_cosets nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (divides_power formula-decl nil general_properties nil)
    (i!1 skolem-const-decl "nat" p_groups nil)
    (expt_x0_aux formula-decl nil exponentiation nil)
    (orders_equal formula-decl nil finite_groups nil)
    (identity_mult formula-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (finite_monad? const-decl "bool" monad_def nil)
    (finite_monad nonempty-type-eq-decl nil monad nil)
    (order const-decl "posnat" monad nil)
    (Lagrange_index formula-decl nil lagrange_index nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" p_groups nil)
    (G!1 skolem-const-decl "finite_group[T, *, one]" p_groups nil)
    (index const-decl "nat" right_left_cosets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (divides_prime_power formula-decl nil general_properties nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (index_divides formula-decl nil lagrange_index nil))
   shostak))
 (factor_cyclic_TCC1 0
  (factor_cyclic_TCC1-1 nil 3530273648
   ("" (skosimp*)
    (("" (lemma "center_subgroup")
      (("" (inst?)
        (("" (expand "normal_subgroup?")
          (("" (assert)
            (("" (expand "subgroup?")
              (("" (assert)
                (("" (skosimp)
                  (("" (expand* "subset?" "member")
                    (("" (skosimp)
                      (("" (hide -1)
                        (("" (expand "*")
                          (("" (skosimp)
                            (("" (typepred "h!1")
                              ((""
                                (skosimp)
                                ((""
                                  (typepred "h!2")
                                  ((""
                                    (expand "center")
                                    ((""
                                      (expand "extend")
                                      ((""
                                        (ground)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (hide (-1 -2))
                                            (("1"
                                              (replaces -2)
                                              (("1"
                                                (replaces -2)
                                                (("1"
                                                  (inst-cp -1 "a!1")
                                                  (("1"
                                                    (rewrite
                                                     "assoc"
                                                     :dir
                                                     rl)
                                                    (("1"
                                                      (replace -2 1 rl)
                                                      (("1"
                                                        (rewrite
                                                         "assoc")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x!2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -2)
                                          (("2"
                                            (replaces -2)
                                            (("2"
                                              (replaces -2)
                                              (("2"
                                                (rewrite "product_in")
                                                (("2"
                                                  (rewrite
                                                   "product_in")
                                                  (("2"
                                                    (rewrite "inv_in")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (T formal-type-decl nil p_groups nil)
    (center_subgroup formula-decl nil group nil)
    (normal_subgroup? const-decl "boolean" normal_subgroups nil)
    (subgroup? const-decl "bool" group_def nil)
    (* const-decl "set[T]" cosets nil)
    (* const-decl "set[T]" cosets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (center const-decl "{s: set[T] | subset?(s, G)}" group nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (extend const-decl "R" extend nil)
    (inv_in formula-decl nil group nil)
    (product_in formula-decl nil group nil)
    (TRUE const-decl "bool" booleans nil)
    (left_identity formula-decl nil monad nil)
    (inv_left formula-decl nil group nil)
    (assoc formula-decl nil group nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (factor_cyclic subtype
    "group[p_groups.T, p_groups.*, p_groups.one].center(p_groups.G)"
    "normal_subgroups[p_groups.T, p_groups.*, p_groups.one].normal_subgroup(p_groups.G)")))
 (factor_cyclic_TCC2 0
  (factor_cyclic_TCC2-1 nil 3530273648
   ("" (skosimp*)
    (("" (inst 1 "one")
      (("1" (rewrite "left_coset_one") nil nil)
       ("2" (rewrite "one_in") nil nil))
      nil))
    nil)
   ((G!1 skolem-const-decl "group[T, *, one]" p_groups nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil p_groups nil)
    (center const-decl "{s: set[T] | subset?(s, G)}" group nil)
    (subset? const-decl "bool" sets nil)
    (left_coset_one formula-decl nil cosets nil)
    (monad nonempty-type-eq-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (one_in formula-decl nil monad nil))
   nil
   (factor_cyclic subtype
    "group[p_groups.T, p_groups.*, p_groups.one].center(p_groups.G)"
    "cosets[p_groups.T, p_groups.*, p_groups.one].left_cosets(p_groups.G, group[p_groups.T, p_groups.*, p_groups.one].center(p_groups.G))")))
 (factor_cyclic_TCC3 0
  (factor_cyclic_TCC3-1 nil 3530721851
   ("" (skosimp*)
    (("" (rewrite "factor_groups[T, *, one].left_cosets_group")
      (("" (hide 2)
        (("" (lemma "center_is_normal[T, *, one]")
          (("1" (inst?)
            (("1" (assert)
              (("1" (expand "normal_subgroup?")
                (("1" (expand "subgroup?") (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (rewrite "fullset_is_group") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AND const-decl "[bool, bool -> bool]" booleans nil)
    (left_cosets_group formula-decl nil factor_groups nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (normal_subgroup? const-decl "boolean" normal_subgroups nil)
    (normal_subgroup type-eq-decl nil normal_subgroups nil)
    (subset? const-decl "bool" sets nil)
    (center const-decl "{s: set[T] | subset?(s, G)}" group nil)
    (T formal-type-decl nil p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (one formal-const-decl "T" p_groups nil)
    (center_is_normal formula-decl nil groups_scaf nil)
    (fullset const-decl "set" sets nil)
    (subgroup? const-decl "bool" group_def nil)
    (fullset_is_group formula-decl nil p_groups nil))
   nil
   (factor_cyclic assuming
    "group[cosets[p_groups.T, p_groups.*, p_groups.one].left_cosets(p_groups.G, group[p_groups.T, p_groups.*, p_groups.one].center(p_groups.G)), factor_groups[p_groups.T, p_groups.*, p_groups.one].mult(p_groups.G, group[p_groups.T, p_groups.*, p_groups.one].center(p_groups.G)), group[p_groups.T, p_groups.*, p_groups.one].center(p_groups.G)].group"
    "fullset_is_group: ASSUMPTION group_def[group.T, group.*, group.one].group?(sets[group.T].fullset)")))
 (factor_cyclic 0
  (factor_cyclic-1 nil 3530384047
   ("" (skosimp*)
    (("" (lemma "center_is_normal[T, *, one]")
      (("1" (inst?)
        (("1" (expand "cyclic?")
          (("1" (skosimp)
            (("1" (typepred "a!1")
              (("1" (skosimp)
                (("1" (decompose-equality -4)
                  (("1" (hide -3)
                    (("1" (expand "abelian_group?")
                      (("1" (expand* "commutative?" "restrict")
                        (("1" (skosimp)
                          (("1" (inst-cp -1 "x!1 * center(G!1)")
                            (("1" (iff)
                              (("1"
                                (prop)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (inst -2 "y!1 * center(G!1)")
                                    (("1"
                                      (iff)
                                      (("1"
                                        (prop)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "generated_by")
                                            (("1"
                                              (skosimp*)
                                              (("1"
                                                (replaces -3)
                                                (("1"
                                                  (lemma
                                                   "coset_power_int[T,*,one]")
                                                  (("1"
                                                    (inst-cp
                                                     -1
                                                     "G!1"
                                                     "i!1"
                                                     "a!2"
                                                     "center(G!1)")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "G!1"
                                                       "i!2"
                                                       "a!2"
                                                       "center(G!1)")
                                                      (("1"
                                                        (replaces -1)
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (lemma
                                                             "lc_eq")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "G!1"
                                                               "center(G!1)"
                                                               "y!1"
                                                               "a!2 ^ i!1")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "G!1"
                                                                 "center(G!1)"
                                                                 "x!1"
                                                                 "a!2 ^ i!2")
                                                                (("1"
                                                                  (expand
                                                                   "normal_subgroup?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         (-3
                                                                          -4
                                                                          -5
                                                                          -6))
                                                                        (("1"
                                                                          (skosimp*)
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (replaces
                                                                               -1)
                                                                              (("1"
                                                                                (typepred
                                                                                 "h!1"
                                                                                 "h!2")
                                                                                (("1"
                                                                                  (expand*
                                                                                   "center"
                                                                                   "extend")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (hide
                                                                                       (-1
                                                                                        -3))
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "assoc")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "assoc")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "assoc"
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "a!2 ^ i!1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2
                                                                                                 1
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "assoc"
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "assoc"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (inst-cp
                                                                                                         -1
                                                                                                         "h!1")
                                                                                                        (("1"
                                                                                                          (replaces
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (rewrite
                                                                                                             "assoc"
                                                                                                             :dir
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "assoc"
                                                                                                               :dir
                                                                                                               rl)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "a!2 ^ i!2")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "assoc"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "assoc")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "assoc")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "assoc")
                                                                                                                            (("1"
                                                                                                                              (rewrite
                                                                                                                               "assoc")
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "assoc")
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "assoc")
                                                                                                                                  (("1"
                                                                                                                                    (rewrite
                                                                                                                                     "expt_mult")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "expt_mult")
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "expt_member")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "G!1"
                                                                                                                       "a!2"
                                                                                                                       "i!2")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "h!1")
                                                                                                            (("2"
                                                                                                              (expand*
                                                                                                               "center"
                                                                                                               "extend")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 (-1
                                                                                                  2))
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "expt_member")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "G!1"
                                                                                                     "a!2"
                                                                                                     "i!1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 2)
                                          (("2"
                                            (expand "/")
                                            (("2"
                                              (expand "restrict")
                                              (("2"
                                                (expand "left_cosets")
                                                (("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (inst 1 "y!1") nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 2)
                                  (("2"
                                    (expand "/")
                                    (("2"
                                      (expand "restrict")
                                      (("2"
                                        (expand "left_cosets")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2" (inst 1 "x!1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (inst 1 "one")
                      (("1" (rewrite "left_coset_one") nil nil)
                       ("2" (rewrite "one_in") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide-all-but 1)
        (("2" (rewrite "fullset_is_group") nil nil)) nil))
      nil))
    nil)
   ((one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (T formal-type-decl nil p_groups nil)
    (center_is_normal formula-decl nil groups_scaf nil)
    (fullset const-decl "set" sets nil)
    (group? const-decl "bool" group_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cyclic? const-decl "boolean" group nil)
    (/ const-decl "group[left_cosets[T, *, one](G, N), mult(G, N), N]"
       right_left_cosets nil)
    (mult const-decl "left_cosets(G, H)" factor_groups nil)
    (normal_subgroup type-eq-decl nil normal_subgroups nil)
    (normal_subgroup? const-decl "boolean" normal_subgroups nil)
    (left_cosets type-eq-decl nil cosets nil)
    (center const-decl "{s: set[T] | subset?(s, G)}" group nil)
    (subset? const-decl "bool" sets nil)
    (* const-decl "set[T]" cosets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (generated_by const-decl "group" group nil)
    (abelian_group? const-decl "bool" group_def nil)
    (left_cosets const-decl "setofsets[T]" right_left_cosets nil)
    (coset_power_int formula-decl nil groups_scaf nil)
    (^ const-decl "T" group nil) (extend const-decl "R" extend nil)
    (a!2 skolem-const-decl "(G!1)" p_groups nil)
    (i!1 skolem-const-decl "int" p_groups nil)
    (member const-decl "bool" sets nil)
    (expt_member formula-decl nil group nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (expt_mult formula-decl nil group nil)
    (i!2 skolem-const-decl "int" p_groups nil)
    (h!1 skolem-const-decl "(center(G!1))" p_groups nil)
    (assoc formula-decl nil group nil)
    (lc_eq formula-decl nil cosets nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (TRUE const-decl "bool" booleans nil)
    (y!1 skolem-const-decl "(G!1)" p_groups nil)
    (x!1 skolem-const-decl "(G!1)" p_groups nil)
    (G!1 skolem-const-decl "group[T, *, one]" p_groups nil)
    (commutative? const-decl "bool" operator_defs nil)
    (restrict const-decl "R" restrict nil)
    (left_coset_one formula-decl nil cosets nil)
    (one_in formula-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (monad nonempty-type-eq-decl nil monad nil)
    (group nonempty-type-eq-decl nil group nil)
    (fullset_is_group formula-decl nil p_groups nil))
   shostak))
 (normalizer_index_TCC1 0
  (normalizer_index_TCC1-1 nil 3530273648
   ("" (skosimp*)
    (("" (typepred "H!1" "G!1")
      (("" (hide (-1 -4))
        (("" (lemma "finite_subgroups")
          (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((subgroup type-eq-decl nil group nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (subgroup? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil p_groups nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (finite_subgroups formula-decl nil group nil))
   nil
   (normalizer_index subtype "p_groups.H" "finite_group[T, *, one]")))
 (normalizer_index_TCC2 0
  (normalizer_index_TCC2-1 nil 3530273648
   ("" (skosimp*)
    (("" (lemma "normalizer_is_subgroup")
      (("" (inst?)
        (("" (assert)
          (("" (hide (-2 -3 -4))
            (("" (lemma "finite_subgroups")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (T formal-type-decl nil p_groups nil)
    (normalizer_is_subgroup formula-decl nil normalizer_centralizer
     nil)
    (finite_subgroups formula-decl nil group nil)
    (normalizer const-decl "{S: set[T] | subset?(S, G)}"
     normalizer_centralizer nil)
    (subset? const-decl "bool" sets nil)
    (subgroup type-eq-decl nil group nil)
    (subgroup? const-decl "bool" group_def nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (normalizer_index subtype
    "normalizer_centralizer[p_groups.T, p_groups.*, p_groups.one].normalizer(p_groups.G, p_groups.H)"
    "finite_group[T, *, one]")))
 (normalizer_index_TCC3 0
  (normalizer_index_TCC3-1 nil 3530273648
   ("" (skosimp*)
    (("" (hide-all-but 1)
      (("" (lemma "normal_in_normalizer")
        (("" (inst?)
          (("" (assert)
            (("" (expand "normal_subgroup?") (("" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (subgroup? const-decl "bool" group_def nil)
    (subgroup type-eq-decl nil group nil)
    (normal_subgroup? const-decl "boolean" normal_subgroups nil)
    (normal_in_normalizer formula-decl nil normalizer_centralizer nil)
    (T formal-type-decl nil p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (one formal-const-decl "T" p_groups nil))
   nil
   (normalizer_index subtype "p_groups.H"
    "group[p_groups.T, p_groups.*, p_groups.one].subgroup(normalizer_centralizer[p_groups.T, p_groups.*, p_groups.one].normalizer(p_groups.G, p_groups.H))")))
 (normalizer_index 0
  (normalizer_index-1 nil 3530541504
   ("" (skosimp*)
    (("" (lemma "p_group_iff_power")
      (("" (inst?)
        (("" (assert)
          (("" (skosimp)
            (("" (lemma "Fix_congruence[T,*,one,set[T]]")
              ((""
                (inst -1 "H!1" "left_cosets(G!1,H!1)" "m!1" "p!1"
                 "alt(G!1,H!1,H!1)")
                (("1" (prop)
                  (("1" (expand "index")
                    (("1"
                      (case-replace
                       "Fix(H!1, left_cosets(G!1, H!1))(alt(G!1, H!1, H!1)) = left_cosets(normalizer(G!1, H!1), H!1)"
                       :hide? T)
                      (("1" (hide (-2 -3 -4))
                        (("1" (expand "divides")
                          (("1" (skosimp*)
                            (("1" (inst 1 "x!2 - x!1")
                              (("1"
                                (replaces -2)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (decompose-equality 1)
                          (("2" (iff)
                            (("2" (prop)
                              (("1"
                                (copy -1)
                                (("1"
                                  (expand "Fix" -1)
                                  (("1"
                                    (expand "extend")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (expand "left_cosets" -1)
                                          (("1"
                                            (skosimp)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (lemma
                                                 "Fix_iff_subset_cor")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G!1"
                                                   "H!1"
                                                   "H!1"
                                                   "a!1")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "left_cosets")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "normalizer")
                                                            (("1"
                                                              (expand
                                                               "extend")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "lr_coset_assoc")
                                                                  (("1"
                                                                    (rewrite
                                                                     "left_coset_assoc")
                                                                    (("1"
                                                                      (rewrite
                                                                       "left_coset_one")
                                                                      (("1"
                                                                        (rewrite
                                                                         "right_coset_assoc")
                                                                        (("1"
                                                                          (rewrite
                                                                           "right_coset_one")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "left_cosets" -1)
                                (("2"
                                  (skosimp)
                                  (("2"
                                    (typepred "a!1")
                                    (("2"
                                      (replaces -2)
                                      (("2"
                                        (expand "normalizer")
                                        (("2"
                                          (expand "extend")
                                          (("2"
                                            (ground)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma
                                                 "Fix_iff_subset_cor")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "G!1"
                                                   "H!1"
                                                   "H!1"
                                                   "a!1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (replace
                                                         -1
                                                         1
                                                         rl)
                                                        (("2"
                                                          (rewrite
                                                           "lr_coset_assoc")
                                                          (("2"
                                                            (rewrite
                                                             "left_coset_assoc")
                                                            (("2"
                                                              (rewrite
                                                               "left_coset_one")
                                                              (("2"
                                                                (rewrite
                                                                 "right_coset_assoc")
                                                                (("2"
                                                                  (rewrite
                                                                   "right_coset_one")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but 1)
                    (("2" (typepred "G!1" "H!1")
                      (("2" (hide -2)
                        (("2" (lemma "finite_subgroups")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but 1)
                    (("3" (lemma "left_cosets_partition")
                      (("3" (inst?)
                        (("3" (expand "finite_partition?")
                          (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide-all-but 1)
                    (("4" (expand "nonempty?")
                      (("4" (expand* "empty?" "member")
                        (("4" (inst -1 "H!1")
                          (("4" (expand "left_cosets")
                            (("4" (inst 1 "one")
                              (("1" (rewrite "left_coset_one") nil nil)
                               ("2" (rewrite "one_in") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide-all-but 1)
                    (("5" (lemma "alt_is_action")
                      (("5" (inst?) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (hide-all-but 1)
                  (("2" (skosimp*)
                    (("2" (expand "alt")
                      (("2" (typepred "x1!1`2")
                        (("2" (expand "left_cosets")
                          (("2" (skosimp)
                            (("2" (replaces -1)
                              (("2"
                                (inst 1 "x1!1`1 * a!1")
                                (("1"
                                  (rewrite "left_coset_assoc")
                                  nil
                                  nil)
                                 ("2"
                                  (rewrite "product_in")
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (typepred "x1!1`1" "H!1")
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (expand "subgroup?")
                                          (("2"
                                            (expand*
                                             "subset?"
                                             "member")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_group_iff_power formula-decl nil p_groups nil)
    (Fix_congruence formula-decl nil group_action nil)
    (product_in formula-decl nil group nil)
    (a!1 skolem-const-decl "(G!1)" p_groups nil)
    (x1!1 skolem-const-decl "[(H!1), (left_cosets(G!1, H!1))]" p_groups
     nil)
    (normalizer const-decl "{S: set[T] | subset?(S, G)}"
     normalizer_centralizer nil)
    (Fix const-decl "{Y: set[T1] | subset?(Y, X)}" group_action nil)
    (subset? const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (divides const-decl "bool" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (a!1 skolem-const-decl "(G!1)" p_groups nil)
    (inv const-decl "{y | x * y = one AND y * x = one}" group nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (lr_coset_assoc formula-decl nil cosets nil)
    (left_coset_one formula-decl nil cosets nil)
    (right_coset_one formula-decl nil cosets nil)
    (right_coset_assoc formula-decl nil cosets nil)
    (inv_left formula-decl nil group nil)
    (left_coset_assoc formula-decl nil cosets nil)
    (* const-decl "set[T]" cosets nil)
    (member const-decl "bool" sets nil)
    (Fix_iff_subset_cor formula-decl nil p_groups nil)
    (extend const-decl "R" extend nil)
    (inv_right formula-decl nil group nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (index const-decl "nat" right_left_cosets nil)
    (finite_subgroups formula-decl nil group nil)
    (left_cosets_partition formula-decl nil right_left_cosets nil)
    (finite_partition? const-decl "bool" lagrange_scaf nil)
    (nonempty? const-decl "bool" sets nil)
    (one_in formula-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (monad nonempty-type-eq-decl nil monad nil)
    (empty? const-decl "bool" sets nil)
    (alt_is_action formula-decl nil p_groups nil)
    (F type-eq-decl nil group_action nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (alt const-decl "set[T]" p_groups nil)
    (left_cosets const-decl "setofsets[T]" right_left_cosets nil)
    (setofsets type-eq-decl nil sets nil)
    (setof type-eq-decl nil defined_types nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" p_groups nil)
    (G!1 skolem-const-decl "finite_group[T, *, one]" p_groups nil)
    (subgroup type-eq-decl nil group nil)
    (subgroup? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil p_groups nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (subgroup_proper 0
  (subgroup_proper-1 nil 3530548859
   ("" (skosimp*)
    (("" (lemma "Lagrange")
      (("" (inst -1 "normalizer(G!1, H!1)" "H!1")
        (("1" (prop)
          (("1" (lemma "divisor_smaller")
            (("1" (inst?)
              (("1" (prop)
                (("1" (hide-all-but -1)
                  (("1" (lemma "index_gt1")
                    (("1" (inst -1 "normalizer(G!1, H!1)" "H!1")
                      (("1" (assert) nil nil)
                       ("2" (lemma "normal_in_normalizer")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil)
                       ("3" (lemma "normalizer_is_subgroup")
                        (("3" (inst?) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "<=")
                  (("2" (prop)
                    (("1" (hide-all-but (-1 -5))
                      (("1" (expand "order") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (lemma "index_gt1")
                      (("2" (inst -1 "normalizer(G!1, H!1)" "H!1")
                        (("1" (lemma "prime_gt_1")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (hide -4)
                                (("1"
                                  (case
                                   "index(normalizer(G!1, H!1), H!1) > 1")
                                  (("1"
                                    (hide (-2 -3))
                                    (("1"
                                      (lemma "Lagrange_index")
                                      (("1"
                                        (inst
                                         -1
                                         "normalizer(G!1, H!1)"
                                         "H!1")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (replaces -3)
                                            (("1"
                                              (lemma
                                               "both_sides_times1")
                                              (("1"
                                                (inst
                                                 -1
                                                 "order(normalizer(G!1, H!1))"
                                                 "1"
                                                 "index(normalizer(G!1, H!1), H!1)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (lemma
                                               "normal_in_normalizer")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "normal_subgroup?")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but 1)
                                          (("2"
                                            (typepred "H!1" "G!1")
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma
                                                 "finite_subgroups")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "subgroup_is_p_group")
                                    (("2"
                                      (inst -1 "p!1" "G!1" "H!1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide (-4 -6 -7 2 3))
                                          (("2"
                                            (lemma "normalizer_index")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (lemma
                                                     "divisor_smaller")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (prop)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide
                                                           (-2 -3 -6))
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "p_divides_index")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but 1)
                          (("2" (lemma "normal_in_normalizer")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "normal_subgroup?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide-all-but 1)
                          (("3" (lemma "normalizer_is_subgroup")
                            (("3" (inst?)
                              (("3"
                                (assert)
                                (("3"
                                  (lemma "finite_subgroups")
                                  (("3"
                                    (inst?)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (lemma "normal_in_normalizer")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (expand "normal_subgroup?")
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (typepred "H!1" "G!1")
            (("2" (hide -1)
              (("2" (lemma "finite_subgroups")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("3" (hide-all-but 1)
          (("3" (lemma "normalizer_is_subgroup")
            (("3" (inst?)
              (("3" (assert)
                (("3" (lemma "finite_subgroups")
                  (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (T formal-type-decl nil p_groups nil)
    (Lagrange formula-decl nil lagrange nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_monad? const-decl "bool" monad_def nil)
    (finite_monad nonempty-type-eq-decl nil monad nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (order const-decl "posnat" monad nil)
    (<= const-decl "bool" reals nil)
    (prime_gt_1 formula-decl nil primes ints)
    (index const-decl "nat" right_left_cosets nil)
    (Lagrange_index formula-decl nil lagrange_index nil)
    (finite_subgroups formula-decl nil group nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (TRUE const-decl "bool" booleans nil)
    (normal_subgroup? const-decl "boolean" normal_subgroups nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (p_divides_index formula-decl nil p_groups nil)
    (normalizer_index formula-decl nil p_groups nil)
    (subgroup_is_p_group formula-decl nil p_groups nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (normal_in_normalizer formula-decl nil normalizer_centralizer nil)
    (normalizer_is_subgroup formula-decl nil normalizer_centralizer
     nil)
    (index_gt1 formula-decl nil right_left_cosets nil)
    (divisor_smaller formula-decl nil divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (finite_group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (group? const-decl "bool" group_def nil)
    (subgroup? const-decl "bool" group_def nil)
    (subgroup type-eq-decl nil group nil)
    (subset? const-decl "bool" sets nil)
    (normalizer const-decl "{S: set[T] | subset?(S, G)}"
     normalizer_centralizer nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (G!1 skolem-const-decl "finite_group[T, *, one]" p_groups nil)
    (H!1 skolem-const-decl "subgroup[T, *, one](G!1)" p_groups nil))
   shostak))
 (burside_theorem_TCC1 0
  (burside_theorem_TCC1-1 nil 3530273648
   ("" (skosimp*)
    (("" (typepred "G!1")
      (("" (lemma "center_subgroup")
        (("" (inst?)
          (("" (lemma "finite_subgroups")
            (("" (inst?)
              (("" (assert)
                (("" (hide (-2 -3))
                  ((""
                    (expand* "finite_group?" "finite_monad?" "group?"
                     "monoid?")
                    (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil p_groups nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (center const-decl "{s: set[T] | subset?(s, G)}" group nil)
    (subset? const-decl "bool" sets nil)
    (monoid? const-decl "bool" monoid_def nil)
    (finite_monad? const-decl "bool" monad_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_subgroups formula-decl nil group nil)
    (center_subgroup formula-decl nil group nil))
   nil
   (burside_theorem subtype
    "group[p_groups.T, p_groups.*, p_groups.one].center(p_groups.G)"
    "finite_monad[T, *, one]")))
 (burside_theorem 0
  (burside_theorem-1 nil 3530350714
   ("" (skosimp*)
    (("" (lemma "p_group_iff_power")
      (("" (inst?)
        (("" (assert)
          (("" (skosimp)
            (("" (case-replace "m!1 = 0" :hide? T)
              (("1" (hide (-3 -4 1))
                (("1" (rewrite "expt_x0_aux") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (case-replace "center(G!1) = G!1" :hide? T)
                (("1" (expand ">=")
                  (("1" (replace -1 2)
                    (("1" (lemma "prime_gt_1")
                      (("1" (inst -1 "p!1")
                        (("1" (prop)
                          (("1" (hide (-2 -3 -4 -5))
                            (("1" (lemma "both_sides_expt_gt1_le")
                              (("1"
                                (inst -1 "p!1" "1" "m!1")
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (rewrite "expt_x1_aux")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "nonempty?(CLs_nc(G!1))")
                  (("1" (lemma "class_equation_2")
                    (("1" (inst?)
                      (("1" (lemma "divide_sigma")
                        (("1" (inst -1 "CLs_nc(G!1)" "p!1")
                          (("1" (prop)
                            (("1"
                              (name-replace "ZZ"
                               "sigma_set.sigma(restrict[setof[T], finite_set[T], boolean](CLs_nc(G!1)), card)")
                              (("1"
                                (lemma "divides_power")
                                (("1"
                                  (expand "^")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replace -5 -1 rl)
                                      (("1"
                                        (replace -3 -1)
                                        (("1"
                                          (lemma "divides_element")
                                          (("1"
                                            (inst
                                             -1
                                             "p!1"
                                             "ZZ"
                                             "card(center(G!1))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide-all-but
                                                 (-1 -8 3))
                                                (("1"
                                                  (lemma
                                                   "order_gt_p[T,*,one]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (expand "order")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (-1 -2 2))
                                                      (("2"
                                                        (lemma
                                                         "center_subgroup")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (typepred
                                                             "G!1")
                                                            (("2"
                                                              (lemma
                                                               "finite_subgroups")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (rewrite
                                                     "fullset_is_group")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-3 1))
                                              (("2"
                                                (expand "order")
                                                (("2"
                                                  (lemma
                                                   "integers.closed_minus")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "card(G!1)"
                                                     "card(center(G!1))")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "m!1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-3 -5 1))
                              (("2"
                                (skosimp)
                                (("2"
                                  (prop)
                                  (("1"
                                    (hide (-2 -3))
                                    (("1"
                                      (lemma "empty_card[T]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -2)
                                            (("1"
                                              (typepred "A!1")
                                              (("1"
                                                (expand "CLs_nc")
                                                (("1"
                                                  (expand "extend")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (expand
                                                         "empty?")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (expand
                                                             "member")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (replaces
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "CL")
                                                                  (("1"
                                                                    (expand
                                                                     "extend")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "one")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "one_in")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "A!1")
                                    (("2"
                                      (expand "CLs_nc")
                                      (("2"
                                        (expand "extend")
                                        (("2"
                                          (prop)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (skosimp)
                                              (("2"
                                                (lemma "CLs_eq_index")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (replace -2 -1 rl)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (case-replace
                                                         "card(A!1) = 0"
                                                         :hide?
                                                         T)
                                                        (("1"
                                                          (hide
                                                           (-1 -2 -3))
                                                          (("1"
                                                            (rewrite
                                                             "divides_zero")
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "divides_prime_power")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "m!1"
                                                             "p!1"
                                                             "card(A!1)")
                                                            (("1"
                                                              (expand
                                                               "^")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (skosimp)
                                                                    (("1"
                                                                      (case-replace
                                                                       "i!1 = 0"
                                                                       :hide?
                                                                       T)
                                                                      (("1"
                                                                        (hide-all-but
                                                                         (-2
                                                                          -3))
                                                                        (("1"
                                                                          (rewrite
                                                                           "expt_x0_aux")
                                                                          (("1"
                                                                            (replaces
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "Lagrange_index")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (prop)
                                                                                  (("1"
                                                                                    (replaces
                                                                                     -2)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "identity_mult")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "order")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "same_card_subset[T]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "centralizer(G!1)(x!1)"
                                                                                             "G!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "x!1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "member")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "center")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "extend")
                                                                                                          (("1"
                                                                                                            (skosimp)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "x!2")
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "x!2")
                                                                                                                (("1"
                                                                                                                  (iff)
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "centralizer")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "extend")
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "centralizer_is_subgroup")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "G!1")
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "finite_subgroups")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "centralizer[T, *, one](G!1)(x!1)"
                                                                                         "G!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             (-1
                                                                                              2))
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "centralizer_is_subgroup")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         (-1
                                                                          -3
                                                                          -4
                                                                          2))
                                                                        (("2"
                                                                          (replaces
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             "divides_power")
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (lemma
                                                                       "Lagrange_index")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("1"
                                                                          (prop)
                                                                          (("1"
                                                                            (replaces
                                                                             -2)
                                                                            (("1"
                                                                              (replaces
                                                                               -2)
                                                                              (("1"
                                                                                (expand
                                                                                 "divides")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide-all-but
                                                                             1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "centralizer_is_subgroup")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           1)
                                                                          (("2"
                                                                            (typepred
                                                                             "G!1")
                                                                            (("2"
                                                                              (lemma
                                                                               "finite_subgroups")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "centralizer[T, *, one](G!1)(x!1)"
                                                                                 "G!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (hide
                                                                                     (-1
                                                                                      2))
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "centralizer_is_subgroup")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (lemma "orbits_nFix_is_CLs_nc")
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1 1 rl)
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (typepred "G!1")
                                      (("2"
                                        (expand "finite_group?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (lemma
                                               "orbits_nFix_partition")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide (-1 2))
                                                    (("2"
                                                      (rewrite
                                                       "a_by_c_is_action")
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (rewrite
                                                           "group_is_subgroup")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (1 2))
                    (("2" (expand* "nonempty?" "empty?" "member")
                      (("2" (decompose-equality 1)
                        (("2" (iff)
                          (("2" (prop)
                            (("1" (hide -2)
                              (("1"
                                (expand* "center" "extend")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (inst -2 "CL(G!1)(x!1)")
                              (("2"
                                (expand "CLs_nc")
                                (("2"
                                  (expand "extend")
                                  (("2"
                                    (prop)
                                    (("1"
                                      (inst 1 "x!1")
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (expand "CLs")
                                      (("2" (inst 1 "x!1") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((p_group_iff_power formula-decl nil p_groups nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt_x0_aux formula-decl nil exponentiation nil)
    (setof type-eq-decl nil defined_types nil)
    (nonempty? const-decl "bool" sets nil)
    (setofsets type-eq-decl nil sets nil)
    (CLs_nc const-decl "setofsets[T]" normalizer_centralizer nil)
    (finite_partition? const-decl "bool" lagrange_scaf nil)
    (G!1 skolem-const-decl "finite_group[T, *, one]" p_groups nil)
    (finite_partition type-eq-decl nil lagrange_scaf nil)
    (empty_card formula-decl nil finite_sets nil)
    (extend const-decl "R" extend nil)
    (member const-decl "bool" sets nil)
    (CL const-decl "{X: set[T] | subset?(X, G)}" normalizer_centralizer
     nil)
    (right_identity formula-decl nil monad nil)
    (inv_one formula-decl nil group nil)
    (left_identity formula-decl nil monad nil)
    (one_in formula-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (monad nonempty-type-eq-decl nil monad nil)
    (TRUE const-decl "bool" booleans nil)
    (empty? const-decl "bool" sets nil)
    (divides_prime_power formula-decl nil general_properties nil)
    (Lagrange_index formula-decl nil lagrange_index nil)
    (finite_monad nonempty-type-eq-decl nil monad nil)
    (finite_monad? const-decl "bool" monad_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (identity_mult formula-decl nil number_fields nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (centralizer_is_subgroup formula-decl nil normalizer_centralizer
     nil)
    (x!1 skolem-const-decl "{x: (G!1) | NOT member(x, center(G!1))}"
     p_groups nil)
    (centralizer const-decl "{S: set[T] | subset?(S, G)}"
     normalizer_centralizer nil)
    (i!1 skolem-const-decl "nat" p_groups nil)
    (divides const-decl "bool" divides nil)
    (A!1 skolem-const-decl "(CLs_nc(G!1))" p_groups nil)
    (divides_zero formula-decl nil divides nil)
    (CLs_eq_index formula-decl nil normalizer_centralizer nil)
    (card const-decl "{n: nat | n = Card(S)}" finite_sets nil)
    (Card const-decl "nat" finite_sets nil)
    (restrict const-decl "R" restrict nil)
    (sigma const-decl "real" sigma_set sigma_set)
    (convergent? const-decl "bool" convergence_set sigma_set)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (divides_element formula-decl nil general_properties nil)
    (closed_minus formula-decl nil integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (order_gt_p formula-decl nil groups_scaf nil)
    (fullset const-decl "set" sets nil)
    (finite_subgroups formula-decl nil group nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (center_subgroup formula-decl nil group nil)
    (order const-decl "posnat" monad nil)
    (fullset_is_group formula-decl nil p_groups nil)
    (ZZ skolem-const-decl "real" p_groups nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (m!1 skolem-const-decl "nat" p_groups nil)
    (divides_power formula-decl nil general_properties nil)
    (orbits_nFix_is_CLs_nc formula-decl nil normalizer_centralizer nil)
    (orbits_nFix_partition formula-decl nil group_action nil)
    (a_by_c_is_action formula-decl nil normalizer_centralizer nil)
    (group_is_subgroup formula-decl nil group nil)
    (F type-eq-decl nil group_action nil)
    (subgroup? const-decl "bool" group_def nil)
    (subgroup type-eq-decl nil group nil)
    (a_by_c const-decl "(G)" normalizer_centralizer nil)
    (divide_sigma formula-decl nil class_equation_scaf nil)
    (class_equation_2 formula-decl nil normalizer_centralizer nil)
    (CLs const-decl "setofsets[T]" normalizer_centralizer nil)
    (x!1 skolem-const-decl "T" p_groups nil)
    (prime_gt_1 formula-decl nil primes ints)
    (both_sides_expt_gt1_le formula-decl nil exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (expt_x1_aux formula-decl nil exponentiation nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (group nonempty-type-eq-decl nil group nil)
    (subset? const-decl "bool" sets nil)
    (group? const-decl "bool" group_def nil)
    (center const-decl "{s: set[T] | subset?(s, G)}" group nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (finite_group? const-decl "bool" group_def nil)
    (one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (set type-eq-decl nil sets nil)
    (T formal-type-decl nil p_groups nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (p_square_is_abelian 0
  (p_square_is_abelian-1 nil 3530396563
   ("" (skosimp*)
    (("" (lemma "Lagrange")
      (("" (inst -1 "G!1" "center(G!1)")
        (("1" (prop)
          (("1" (replace -3 -1)
            (("1" (lemma "divides_prime_power")
              (("1" (expand "^")
                (("1" (inst -1 "2" "p!1" "order(center(G!1))")
                  (("1" (assert)
                    (("1" (skosimp)
                      (("1" (hide -3)
                        (("1" (case-replace "i!1 = 0" :hide? T)
                          (("1" (hide -1)
                            (("1" (rewrite "expt_x0_aux")
                              (("1"
                                (lemma "prime_gt_1")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "burside_theorem")
                                      (("1"
                                        (inst -1 "p!1" "G!1")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (hide (-4 -5 1))
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (hide (-2 -3 2))
                                            (("2"
                                              (replaces -2)
                                              (("2"
                                                (lemma "expt_ge1")
                                                (("2"
                                                  (expand "^")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (expand*
                                                       ">="
                                                       ">")
                                                      (("2"
                                                        (expand "<=")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 1)
                                                            (("2"
                                                              (copy -2)
                                                              (("2"
                                                                (replace
                                                                 -2
                                                                 -1)
                                                                (("2"
                                                                  (hide
                                                                   -2)
                                                                  (("2"
                                                                    (lemma
                                                                     "both_sides_expt_gt1_lt")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "p!1"
                                                                       "2"
                                                                       "1")
                                                                      (("2"
                                                                        (expand
                                                                         "^")
                                                                        (("2"
                                                                          (rewrite
                                                                           "expt_x1_aux")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide-all-but (-3 -4 1))
                                            (("3"
                                              (lemma
                                               "p_group_iff_power")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case-replace "i!1 = 1" :hide? T)
                            (("1" (rewrite "expt_x1_aux")
                              (("1"
                                (hide 1)
                                (("1"
                                  (lemma "order_factor")
                                  (("1"
                                    (inst -1 "G!1" "center(G!1)")
                                    (("1"
                                      (prop)
                                      (("1"
                                        (lemma
                                         "card_extend[set[T], left_cosets[T, *, one](G!1,center(G!1))]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (replaces -3)
                                              (("1"
                                                (replaces -4)
                                                (("1"
                                                  (lemma
                                                   "exponentiation.expt_div")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "2"
                                                     "1"
                                                     "p!1")
                                                    (("1"
                                                      (expand "^")
                                                      (("1"
                                                        (rewrite
                                                         "expt_x1_aux")
                                                        (("1"
                                                          (replaces -1)
                                                          (("1"
                                                            (lemma
                                                             "prime_order_cycle[left_cosets(G!1,center(G!1)),mult(G!1,center(G!1)),center(G!1)]")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (expand
                                                                 "order")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (rewrite
                                                                       "factor_cyclic")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide-all-but
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "finite_group?")
                                                                  (("2"
                                                                    (lemma
                                                                     "card_factor_TCC1")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (expand
                                                                             "/")
                                                                            (("1"
                                                                              (rewrite
                                                                               "finite_extension[set[T],left_cosets[T, *, one](G!1, center[T, *, one](G!1))]")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (rewrite
                                                                               "center_is_normal[T, *, one]")
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "fullset_is_group")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               1)
                                                              (("2"
                                                                (rewrite
                                                                 "factor_groups[T, *, one].left_cosets_group")
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "center_is_normal[T, *, one]")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "normal_subgroup?")
                                                                          (("1"
                                                                            (expand
                                                                             "subgroup?")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (rewrite
                                                                         "fullset_is_group")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               1)
                                                              (("3"
                                                                (inst
                                                                 1
                                                                 "one")
                                                                (("1"
                                                                  (rewrite
                                                                   "left_coset_one")
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (rewrite
                                                                   "one_in")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide-all-but
                                                               1)
                                                              (("4"
                                                                (inst
                                                                 1
                                                                 "center(G!1)")
                                                                (("4"
                                                                  (inst
                                                                   1
                                                                   "one")
                                                                  (("1"
                                                                    (rewrite
                                                                     "left_coset_one")
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (rewrite
                                                                     "one_in")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2"
                                              (lemma
                                               "card_factor_TCC1")
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (rewrite
                                                       "finite_extension[set[T],left_cosets[T, *, one](G!1, center[T, *, one](G!1))]")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (rewrite
                                                         "center_is_normal[T, *, one]")
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (rewrite
                                                             "fullset_is_group")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2"
                                          (rewrite
                                           "center_is_normal[T, *, one]")
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (rewrite
                                               "fullset_is_group")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2"
                                        (typepred "G!1")
                                        (("2"
                                          (lemma "finite_subgroups")
                                          (("2"
                                            (inst
                                             -1
                                             "center(G!1)"
                                             "G!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide (-1 2))
                                                (("2"
                                                  (rewrite
                                                   "center_subgroup")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "<=")
                              (("2"
                                (assert)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (hide (-2 1 2))
                                    (("2"
                                      (expand "order")
                                      (("2"
                                        (replace -1 -2 rl)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (lemma
                                             "same_card_subset[T]")
                                            (("2"
                                              (inst
                                               -1
                                               "center(G!1)"
                                               "G!1")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (lemma
                                                     "abelian_eq_center[T,*,one]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide (-1 2))
                                                      (("2"
                                                        (rewrite
                                                         "fullset_is_group")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide-all-but 1)
            (("2" (rewrite "center_subgroup") nil nil)) nil))
          nil)
         ("2" (hide-all-but 1)
          (("2" (lemma "finite_subgroups")
            (("2" (inst -1 "center(G!1)" "G!1")
              (("2" (assert)
                (("2" (hide 2)
                  (("2" (lemma "center_subgroup")
                    (("2" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((one formal-const-decl "T" p_groups nil)
    (* formal-const-decl "[T, T -> T]" p_groups nil)
    (T formal-type-decl nil p_groups nil)
    (Lagrange formula-decl nil lagrange nil)
    (divides_prime_power formula-decl nil general_properties nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (finite_monad? const-decl "bool" monad_def nil)
    (finite_monad nonempty-type-eq-decl nil monad nil)
    (order const-decl "posnat" monad nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (expt_x0_aux formula-decl nil exponentiation nil)
    (burside_theorem formula-decl nil p_groups nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (expt_x1_aux formula-decl nil exponentiation nil)
    (both_sides_expt_gt1_lt formula-decl nil exponentiation nil)
    (<= const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt_ge1 formula-decl nil exponentiation nil)
    (p_group_iff_power formula-decl nil p_groups nil)
    (prime_gt_1 formula-decl nil primes ints)
    (abelian_eq_center formula-decl nil groups_scaf nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (same_card_subset formula-decl nil finite_sets nil)
    (order_factor formula-decl nil lagrange_index nil)
    (finite_subgroups formula-decl nil group nil)
    (center_subgroup formula-decl nil group nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (is_finite const-decl "bool" finite_sets nil)
    (normal_subgroup? const-decl "boolean" normal_subgroups nil)
    (normal_subgroup type-eq-decl nil normal_subgroups nil)
    (mult const-decl "left_cosets(G, H)" factor_groups nil)
    (/ const-decl "group[left_cosets[T, *, one](G, N), mult(G, N), N]"
       right_left_cosets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (expt_div formula-decl nil exponentiation nil)
    (monad nonempty-type-eq-decl nil monad nil)
    (monad? const-decl "bool" monad_def nil)
    (one_in formula-decl nil monad nil)
    (left_coset_one formula-decl nil cosets nil)
    (left_cosets_group formula-decl nil factor_groups nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (factor_cyclic formula-decl nil p_groups nil)
    (left_cosets const-decl "setofsets[T]" right_left_cosets nil)
    (setofsets type-eq-decl nil sets nil)
    (subgroup type-eq-decl nil group nil)
    (subgroup? const-decl "bool" group_def nil)
    (restrict const-decl "R" restrict nil)
    (setof type-eq-decl nil defined_types nil)
    (finite_extension formula-decl nil extend_set_props nil)
    (center_is_normal formula-decl nil groups_scaf nil)
    (fullset_is_group formula-decl nil p_groups nil)
    (card_factor_TCC1 subtype-tcc nil right_left_cosets nil)
    (fullset const-decl "set" sets nil)
    (prime_order_cycle formula-decl nil finite_cyclic_groups nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (left_cosets type-eq-decl nil cosets nil)
    (* const-decl "set[T]" cosets nil)
    (card_extend formula-decl nil extend_set_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (finite_group? const-decl "bool" group_def nil)
    (group nonempty-type-eq-decl nil group nil)
    (subset? const-decl "bool" sets nil)
    (group? const-decl "bool" group_def nil)
    (center const-decl "{s: set[T] | subset?(s, G)}" group nil)
    (finite_group nonempty-type-eq-decl nil group nil)
    (G!1 skolem-const-decl "finite_group[T, *, one]" p_groups nil))
   shostak)))

